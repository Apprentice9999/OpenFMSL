{
  "$id": "1",
  "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
  "Id": "00000000-0000-0000-0000-000000000000",
  "Name": "Root",
  "Children": {
    "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
    "$values": [
      {
        "$id": "2",
        "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
        "Id": "00000000-0000-0000-0000-000000000000",
        "Name": "Projects",
        "Children": {
          "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
          "$values": [
            {
              "$id": "3",
              "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
              "Id": "00000000-0000-0000-0000-000000000000",
              "Name": "Scripts",
              "Children": {
                "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                "$values": [
                  {
                    "$id": "4",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\n\r\n\r\ndef Homotopy( flowsheet, variable, x1, uom, steps):\r\n x0= variable.GetValue(uom)\r\n tol=_newton.Tolerance\r\n _newton.Tolerance=1e-2\r\n print('x0='+str(x0))\r\n dx=(x1-x0)/float(steps)\r\n print('d0='+str(dx))\r\n eq = EquationSystem()\r\n variable.IsFixed=True\r\n flowsheet.FillEquationSystem(eq)\r\n print('Simple Homotopy Solver')\r\n \r\n for i in range(steps):\r\n  x=x0+(i+1)*dx\r\n  variable.FixValue(x, uom)\r\n  print('x = '+ str(x))\r\n  \r\n  if(i==steps-1):\r\n   _newton.Tolerance=tol\r\n   \r\n  solve(eq)\r\n  \r\n  if(_newton.IsConverged==False):\r\n   print('Homotopy did not converge.')\r\n   _newton.Tolerance=tol\r\n   return   \r\n print('Homotopy solve converged.')\r\n _newton.Tolerance=tol\r\n return\r\n \r\n\r\n\r\ndef StreamMolarFractionToFlow(stream):\r\n total= stream.GetVariable(\"n\").ValueInSI\r\n for c in range(stream.System.Components.Count):\r\n  stream.GetVariable(\"n[\"+stream.System.Components[c].ID+\"]\").ValueInSI = total *  stream.GetVariable(\"x[\"+stream.System.Components[c].ID+\"]\").ValueInSI\r\n\r\ndef printSection(sec,simple=False):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfTrays\r\n\t\r\n\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('Stage', 'T','TV', 'P', 'Q','L' ,'V','F','W','RL', 'EPS')\r\n\tprint '{0:>10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('',sec.GetVariable(\"T[1]\").OutputUnit,sec.GetVariable(\"TV[1]\").OutputUnit,sec.GetVariable(\"P[1]\").OutputUnit,sec.GetVariable(\"Q[1]\").OutputUnit, sec.GetVariable(\"L[1]\").OutputUnit,sec.GetVariable(\"V[1]\").OutputUnit,sec.GetVariable(\"F[1]\").OutputUnit,sec.GetVariable(\"W[1]\").OutputUnit,sec.GetVariable(\"RL[1]\").OutputUnit,'[-]')\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format(j, sec.GetVariable(\"T[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"TV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"P[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"Q[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"L[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"V[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"F[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"W[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"RL[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"eps[\"+j+\"]\").ValueInOutputUnit)\t\r\n\tprint ''\r\n\t\r\n\tif(simple):\r\n\t return\r\n\t \r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('x['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'x['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('y['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'y['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('y*['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'yeq['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('z['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'z['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\r\n\treturn\r\n\t\r\n\r\n\t\r\ndef printHEX(hex):\r\n\tcells=hex.Discretization\r\n\ttubeSideCells=hex.Tube\r\n\tshellSideCells=hex.Shell\r\n\ttubeSideStreams=hex.TubeStreams\r\n\tshellSideStreams=hex.ShellStreams\r\n\tqex= hex.QExchanged\r\n\t\r\n\ttubeIn=hex.FindMaterialPort(\"TubeIn\").Streams[0]\r\n\tshellIn=hex.FindMaterialPort(\"ShellIn\").Streams[0]\r\n\ttubeOut=hex.FindMaterialPort(\"TubeOut\").Streams[0]\r\n\tshellOut=hex.FindMaterialPort(\"ShellOut\").Streams[0]\r\n\t\r\n\t\r\n\tprint '--- {0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10}'.format('Tube_Cell', 'Tube_T', 'Tube_P', 'Tube_VF','Shell_Cell' ,'Shell_T', 'Shell_P', 'Shell_VF', 'Q')\r\n\tprint '--- {0:>10} {1:>10} {2:>10} {3:>10} {4:10} {5:>10} {6:>10} {7:>10} {8:>10}'.format('', tubeIn.GetVariable(\"T\").OutputUnit,tubeIn.GetVariable(\"p\").OutputUnit,tubeIn.GetVariable(\"VF\").OutputUnit, '',shellIn.GetVariable(\"T\").OutputUnit,shellIn.GetVariable(\"p\").OutputUnit,shellIn.GetVariable(\"VF\").OutputUnit, qex[0].Q.OutputUnit)\r\n\tprint '--- {0:>10} {1:10} {2:10} {3:10} {4:>10} {5:10} {6:10} {7:10}'.format('In', tubeIn.GetVariable(\"T\").ValueInOutputUnit,tubeIn.GetVariable(\"p\").ValueInOutputUnit,tubeIn.GetVariable(\"VF\").ValueInSI, 'In',shellIn.GetVariable(\"T\").ValueInOutputUnit,shellIn.GetVariable(\"p\").ValueInOutputUnit,shellIn.GetVariable(\"VF\").ValueInSI)\r\n\tfor i in range(cells):\r\n\t\tj=i+1\r\n\t\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\t j=cells-i\r\n\t\tprint '--- {0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10}'.format((i+1), tubeSideCells[i].GetVariable(\"T\").ValueInOutputUnit,tubeSideCells[i].GetVariable(\"P\").ValueInOutputUnit,tubeSideStreams[i].GetVariable(\"VF\").ValueInSI, j,shellSideCells[i].GetVariable(\"T\").ValueInOutputUnit,shellSideCells[i].GetVariable(\"P\").ValueInOutputUnit,shellSideStreams[i].GetVariable(\"VF\").ValueInSI,qex[0].Q.ValueInOutputUnit)\r\n\tprint '--- {0:>10} {1:10} {2:10} {3:10} {4:>10} {5:10} {6:10} {7:10}'.format('Out', tubeOut.GetVariable(\"T\").ValueInOutputUnit,tubeOut.GetVariable(\"p\").ValueInOutputUnit,tubeOut.GetVariable(\"VF\").ValueInSI, 'Out',shellOut.GetVariable(\"T\").ValueInOutputUnit,shellOut.GetVariable(\"p\").ValueInOutputUnit,shellOut.GetVariable(\"VF\").ValueInSI)\t\t\r\n\treturn\r\n\r\ndef plot(name, xlabel, ylabel, x,y):\r\n \tchart=ChartModel(name);\t\r\n\tchart.XAxisTitle = xlabel\r\n\tchart.YAxisTitle = ylabel\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\tfor i in range(len(x)):\t\r\n\t\txValues.Add(x[i])\r\n\t\tyValues.Add(y[i])\r\n\tySeries = SeriesModel(\"Series\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\tchart.Series.Add(ySeries)\r\n\tshow(chart)\t\t\r\n\treturn\r\n\r\ndef plotHEX(hex):\r\n\tchartEntity= Chart(\"HEX Plot\")\r\n\tchartEntity.Model=ChartModel(\"Heat Exchanger Temperature Profile\");\r\n\t\r\n\tchart=chartEntity.Model\r\n\tchart.XAxisTitle = \"Length [-]\"\r\n\tchart.YAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tsteps = hex.Discretization\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\ttubeOut=hex.FindMaterialPort(\"TubeOut\").Streams[0]\r\n\tshellOut=hex.FindMaterialPort(\"ShellOut\").Streams[0]\r\n\r\n\tfor i in range(steps):\t\t\r\n\t\txValues.Add(i+1)\r\n\t\tyValues.Add(hex.Tube[i].GetVariable(\"T\").ValueInOutputUnit)\r\n\txValues.Add(steps+1)\r\n\tyValues.Add(tubeOut.GetVariable(\"T\").ValueInOutputUnit)\r\n\tySeries = SeriesModel(\"Tube T\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\tfor i in range(steps):\t\t\r\n\t\tj=i+1\r\n\t\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\t j=steps-i\r\n\t\txValues.Add(j)\r\n\t\tyValues.Add(hex.Shell[i].GetVariable(\"T\").ValueInOutputUnit)\r\n\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\txValues.Add(0)\r\n\telse:\r\n\t\txValues.Add(steps+1)\r\n\tyValues.Add(shellOut.GetVariable(\"T\").ValueInOutputUnit)\r\n\tySeries = SeriesModel(\"Shell T\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\tfor i in range(steps):\t\t\r\n\t\tj=i+1\t\r\n\t\txValues.Add(j)\r\n\t\tyValues.Add(hex.TubeStreams[i].GetVariable(\"VF\").ValueInOutputUnit*100)\r\n\txValues.Add(steps+1)\r\n\tyValues.Add(tubeOut.GetVariable(\"VF\").ValueInOutputUnit*100)\r\n\r\n\tySeries = SeriesModel(\"Tube VF\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\tfor i in range(steps):\t\t\r\n\t\tj=i+1\r\n\t\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\t j=steps-i\r\n\t\txValues.Add(j)\r\n\t\tyValues.Add(hex.ShellStreams[i].GetVariable(\"VF\").ValueInOutputUnit*100)\r\n\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\txValues.Add(0)\r\n\telse:\r\n\t\txValues.Add(steps+1)\r\n\tyValues.Add(shellOut.GetVariable(\"VF\").ValueInOutputUnit)\r\n\r\n\tySeries = SeriesModel(\"Shell VF\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\t#Items.Add(\"Results|Charts\",chartEntity)\r\n\tshow(chart)\r\n\treturn\r\n\t\r\ndef plotSection(section):\r\n\tchart=ChartModel(section.Name +\" Temperature\");\r\n\tchart.YAxisTitle = \"Tray\"\r\n\tchart.XAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tchart.IsReversedYAxis=True\r\n\tsteps = section.NumberOfTrays\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\t#chart.XMin = 0\r\n\t#chart.XMax = 160\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit)\r\n\t\r\n\tySeries = SeriesModel(\"T\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\t\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"TV[\"+str(i+1)+\"]\").ValueInOutputUnit)\r\n\t\r\n\tySeries = SeriesModel(\"TV\", SeriesType.Line, xValues, yValues, \"Blue\")\t\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\t\r\n\tshow(chart)\r\n\treturn\r\n\r\n\r\ndef plotHT(section):\r\n\tchart=ChartModel(\"H-T Profile\");\r\n\tchart.YAxisTitle = \"Tray\"\r\n\tchart.XAxisTitle = \"Enthalpy [kW]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tchart.IsReversedYAxis=True\r\n\tsteps = section.NumberOfTrays\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tx2Values = chart.CreateList()\t\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"HL[\"+str(i+1)+\"]\").ValueInSI*section.GetVariable(\"L[\"+str(i+1)+\"]\").ValueInSI*1e-3)\r\n\t\tx2Values.Add(section.GetVariable(\"HV[\"+str(i+1)+\"]\").ValueInSI*section.GetVariable(\"V[\"+str(i+1)+\"]\").ValueInSI*1e-3)\r\n\t#section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit\r\n\tySeries = SeriesModel(\"HL\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\ty2Series = SeriesModel(\"HV\", SeriesType.Line, x2Values, yValues, \"Blue\")\r\n\t\r\n\tchart.Series.Add(ySeries)\r\n\tchart.Series.Add(y2Series)\r\n\t\t\r\n\t\r\n\tshow(chart)\r\n\treturn\r\n\t\r\ndef plotXT(section):\r\n\tchart=ChartModel(\"X-T Profile\");\r\n\tchart.YAxisTitle = \"Stage\"\r\n\tchart.XAxisTitle = \"Molar Fraction [-]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\t\r\n\tchart.IsReversedYAxis=True\r\n\tsteps = section.NumberOfTrays\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tx2Values = chart.CreateList()\t\r\n\tx3Values = chart.CreateList()\t\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", XYLOL]\").ValueInSI)\r\n\t\tx2Values.Add(section.GetVariable(\"y[\"+str(i+1)+\", XYLOL]\").ValueInSI)\r\n\t\tx3Values.Add(section.GetVariable(\"yeq[\"+str(i+1)+\", XYLOL]\").ValueInSI)\r\n\t#section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit\r\n\tySeries = SeriesModel(\"x\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\ty2Series = SeriesModel(\"y\", SeriesType.Line, x2Values, yValues, \"Blue\")\r\n\ty3Series = SeriesModel(\"yeq\", SeriesType.Line, x3Values, yValues, \"Green\")\r\n\t\r\n\tchart.Series.Add(ySeries)\r\n\tchart.Series.Add(y2Series)\r\n\tchart.Series.Add(y3Series)\r\n\t\t\r\n\t\r\n\tshow(chart)\r\n\treturn\r\n\t\r\ndef plotMcCabe(title, section, xF,xB,xD, rr,q):\r\n\tchart=ChartModel(title);\r\n\tchart.YAxisTitle = \"vapor mole fraction [-]\"\r\n\tchart.XAxisTitle = \"liquid mole fraction [-]\"\r\n\tchart.YMin = 0.0\r\n\tchart.YMax = 1\r\n\tchart.XMin = 0.0\r\n\tchart.XMax = 1\t\t\r\n\tsteps = section.NumberOfTrays\t\r\n\txValues = chart.CreateList()\r\n\ty1Values = chart.CreateList()\t\r\n\ty2Values = chart.CreateList()\r\n\tqxValues = chart.CreateList()\r\n\tqyValues = chart.CreateList()\r\n\r\n\ty1Series = SeriesModel(\"y\", SeriesType.Line, xValues, y1Values, \"Blue\")\r\n\ty2Series = SeriesModel(\"yeq\", SeriesType.Line, xValues, y2Values, \"Green\")\t\r\n\ty3Series = SeriesModel(\"x\", SeriesType.Line, xValues, xValues, \"Black\")\t\r\n\tqSeries = SeriesModel(\"q\", SeriesType.Line, qxValues, qyValues, \"Black\")\t\r\n\t\r\n\ty1Series.DashPattern=DashPattern.Dash\r\n\ty3Series.ShowInLegend=False\r\n\tqSeries.ShowInLegend=False\r\n\r\n\t#chart.Series.Add(y1Series)\r\n\tchart.Series.Add(y2Series)\r\n\tchart.Series.Add(y3Series)\r\n\tchart.Series.Add(qSeries)\r\n\t\r\n\t\r\n\t\r\n\txValues.Add(1)\r\n\ty1Values.Add(1)\r\n\ty2Values.Add(1)\r\n\t\r\n\tyF=xD-rr/(1+rr)*(xD-xF)\r\n\t\r\n\t\r\n\tif q==0:\r\n\t\tqxValues.Add(xF)\r\n\t\tqxValues.Add(xF)\r\n\t\tqyValues.Add(xF)\r\n\t\tqyValues.Add(yF)\r\n\r\n\t\t\r\n\tfor i in range(steps):\t\t\t\t\r\n\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(i+1)+\", TOLUOL]\").ValueInSI)\r\n\t\ty1Values.Add(section.GetVariable(\"y[\"+str(i+1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(i+1)+\", TOLUOL]\").ValueInSI)\r\n\t\ty2Values.Add(section.GetVariable(\"yeq[\"+str(i+1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"yeq[\"+str(i+1)+\", TOLUOL]\").ValueInSI)\r\n\t\t\r\n\t\tx = chart.CreateList()\t\t\r\n\t\ty = chart.CreateList()\t\r\n\t\t\r\n\t\tyq=y1Values.Last();\r\n\t\t\r\n\t\tif(i<steps-1):\r\n\t\t y.Add(section.GetVariable(\"y[\"+str(i+2)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(i+2)+\", TOLUOL]\").ValueInSI)\r\n\t\t x.Add(section.GetVariable(\"x[\"+str(i+2)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(i+2)+\", TOLUOL]\").ValueInSI)\t\t\r\n\t\r\n\t\r\n\t\tx.Add(xValues.Last())\r\n\t\tx.Add(xValues.Last())\t\t\r\n\t\tif(xValues.Last()>xF):\r\n\t\t y.Add(xD-rr/(1+rr)*(xD-xValues.Last()))\r\n\t\telse:\r\n\t\t y.Add(xB+(yF-xB)/(xF-xB)*(xValues.Last()-xB))\r\n\t\t\r\n\t\ty.Add(yq)\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\tstageSeries = SeriesModel(\"S\"+str(i+1), SeriesType.Line, x, y, \"Black\")\t\t\r\n\t\tstageSeries.ShowInLegend=False\t\r\n\t\tchart.Series.Add(stageSeries)\r\n\t\r\n\txValues.Add(0.0)\r\n\ty1Values.Add(0.0)\r\n\ty2Values.Add(0.0)\r\n\t\r\n\t\r\n\t\r\n\t#Draw Top, Feed and Bot vertical lines\r\n\tfeedLineValuesX = chart.CreateList()\r\n\tfeedLineValuesY = chart.CreateList()\r\n\toperatingLineValuesX = chart.CreateList()\r\n\toperatingLineValuesY = chart.CreateList()\r\n\t\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesY.Add(0)\r\n\tfeedLineValuesY.Add(xF)\r\n\t\r\n\t#Bottom\r\n\t#xB= section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[BENZOL]\").ValueInSI+section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[TOLUOL]\").ValueInSI\r\n\t#xB=section.GetVariable(\"x[\"+str(steps)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(steps)+\", TOLUOL]\").ValueInSI\r\n\t#xD=section.GetVariable(\"y[\"+str(1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(1)+\", TOLUOL]\").ValueInSI\r\n\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(0)\r\n\t\r\n\toperatingLineValuesX.Add(xB)\t\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\t#Stripping Line\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\toperatingLineValuesX.Add(xF)\t\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\t\t\r\n\t#Rectifying Line\r\n\t\r\n\toperatingLineValuesX.Add(xF)\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(xD)\t\r\n\t\r\n\t#Top\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(0)\r\n\toperatingLineValuesY.Add(xD)\r\n\t\r\n\tfeedLine = SeriesModel(\"F\", SeriesType.Line, feedLineValuesX, feedLineValuesY, \"Black\")\t\r\n\toperatingLine = SeriesModel(\"Op\", SeriesType.Line, operatingLineValuesX, operatingLineValuesY, \"Black\")\t\r\n\t\r\n\tfeedLine.ShowInLegend=False\r\n\toperatingLine.ShowInLegend=False\r\n\t\r\n\tchart.Series.Add(feedLine)\r\n\tchart.Series.Add(operatingLine)\r\n\tchart.LegendPosition=LegendPosition.TopLeft\t\t\r\n\tshow(chart)\r\n\treturn\r\n\t\r\n\t\r\ndef plotMcCabe2(title, section, xF,xB,xD, rr, LBID):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\tchart=ChartModel(title);\r\n\tchart.YAxisTitle = \"Vapor Molar Fraction \"+LBID+\" [-]\"\r\n\tchart.XAxisTitle = \"Liquid Molar Fraction \"+LBID+\" [-]\"\r\n\tchart.YMin = 0\r\n\tchart.YMax = 1\r\n\tchart.XMin = 0\r\n\tchart.XMax = 1\t\t\r\n\tsteps = section.NumberOfTrays\t\r\n\txValues = chart.CreateList()\r\n\ty1Values = chart.CreateList()\t\r\n\ty2Values = chart.CreateList()\r\n\r\n\ty1Series = SeriesModel(\"y\", SeriesType.Line, xValues, y1Values, \"Blue\")\r\n\ty2Series = SeriesModel(\"yeq\", SeriesType.Line, xValues, y2Values, \"Green\")\t\r\n\ty3Series = SeriesModel(\"x\", SeriesType.Line, xValues, xValues, \"Black\")\t\r\n\t\r\n\ty1Series.DashPattern=DashPattern.Dash\r\n\tchart.Series.Add(y1Series)\r\n\tchart.Series.Add(y2Series)\r\n\tchart.Series.Add(y3Series)\r\n\t\r\n\t\r\n\txValues.Add(1)\r\n\ty1Values.Add(1)\r\n\ty2Values.Add(1)\r\n\t\r\n\tyF=xD-rr/(1+rr)*(xD-xF)\r\n\t\r\n\tfor i in range(steps):\t\t\t\t\r\n\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\ty1Values.Add(section.GetVariable(\"y[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\ty2Values.Add(section.GetVariable(\"yeq[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\t\r\n\t\tx = chart.CreateList()\t\t\r\n\t\ty = chart.CreateList()\t\r\n\t\t\r\n\t\tyq=y1Values.Last()\r\n\t\tif(i<steps-1):\r\n\t\t\ty.Add(section.GetVariable(\"y[\"+str(i+2)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\t\tx.Add(section.GetVariable(\"x[\"+str(i+2)+\", \"+LBID+\"]\").ValueInSI)\t\t\r\n\t\r\n\t\tx.Add(xValues.Last())\r\n\t\tx.Add(xValues.Last())\t\t\r\n\t\tif(xValues.Last()>xF):\r\n\t\t\ty.Add(xD-rr/(1+rr)*(xD-xValues.Last()))\r\n\t\telse:\r\n\t\t\ty.Add(xB+(yF-xB)/(xF-xB)*(xValues.Last()-xB))\r\n\t\ty.Add(y1Values.Last())\r\n\t\tstageSeries = SeriesModel(\"S\"+str(i+1), SeriesType.Line, x, y, \"Black\")\t\t\r\n\t\tstageSeries.ShowInLegend=False\r\n\t\tchart.Series.Add(stageSeries)\r\n\t\r\n\t\ty.Add(yq)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\txValues.Add(0.0)\r\n\ty1Values.Add(0.0)\r\n\ty2Values.Add(0.0)\r\n\t\r\n\t\r\n\t\r\n\t#Draw Top, Feed and Bot vertical lines\r\n\tfeedLineValuesX = chart.CreateList()\r\n\tfeedLineValuesY = chart.CreateList()\r\n\toperatingLineValuesX = chart.CreateList()\r\n\toperatingLineValuesY = chart.CreateList()\r\n\t\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesY.Add(0)\r\n\tfeedLineValuesY.Add(yF)\r\n\t\r\n\t#Bottom\r\n\t#xB= section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[BENZOL]\").ValueInSI+section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[TOLUOL]\").ValueInSI\r\n\t#xB=section.GetVariable(\"x[\"+str(steps)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(steps)+\", TOLUOL]\").ValueInSI\r\n\t#xD=section.GetVariable(\"y[\"+str(1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(1)+\", TOLUOL]\").ValueInSI\r\n\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(0)\r\n\t\r\n\toperatingLineValuesX.Add(xB)\t\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\t#Stripping Line\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\toperatingLineValuesX.Add(xF)\t\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\t\t\r\n\t#Rectifying Line\r\n\t\r\n\toperatingLineValuesX.Add(xF)\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(xD)\t\r\n\t\r\n\t#Top\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(0)\r\n\toperatingLineValuesY.Add(xD)\r\n\t\r\n\tfeedLine = SeriesModel(\"F\", SeriesType.Line, feedLineValuesX, feedLineValuesY, \"DarkRed\")\t\r\n\toperatingLine = SeriesModel(\"Op\", SeriesType.Line, operatingLineValuesX, operatingLineValuesY, \"DarkRed\")\t\r\n\t\r\n\tchart.Series.Add(feedLine)\r\n\tchart.Series.Add(operatingLine)\r\n\tchart.LegendPosition=LegendPosition.TopLeft\r\n\t\r\n\tshow(chart)\t\r\n\treturn\r\n\t\r\n\t\r\ndef plotSectionConcLiquid(section):\r\n\tchart=ChartModel(section.Name +\" Liq. Conc. Profile\");\r\n\tchart.YAxisTitle = \"Tray\"\r\n\tchart.XAxisTitle = \"Liquid molar fraction [-]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tchart.IsReversedYAxis=True\r\n\tchart.ShowLegend=True\r\n\tsteps = section.NumberOfTrays\t\r\n\t\r\n\tfor j in range(section.System.Components.Count):\r\n\t\tyValues = chart.CreateList()\r\n\t\txValues = chart.CreateList()\t\r\n \t\tfor i in range(steps):\t\t\r\n\t\t\tyValues.Add(i+1)\r\n\t\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", \"+section.System.Components[j].ID+\"]\").ValueInOutputUnit)\t\r\n\t\tySeries = SeriesModel(section.System.Components[j].ID, SeriesType.Line, xValues, yValues, \"Auto\")\r\n\t\tchart.Series.Add(ySeries)\r\n\t\r\n\tshow(chart)\t\r\n\treturn\r\n\t\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Hex Helper",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "5",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\ndef ColumnBuilder(name, sys, FEED, TOP, BOT, stages, feedTray, TCon,p):\t\r\n\t\r\n\tVIN = MaterialStream(FEED.Name+\"g\", sys)\r\n\tLIN = MaterialStream(FEED.Name+\"c\", sys)\r\n\tVOUT = MaterialStream(FEED.Name+\"a\", sys)\r\n\tLOUT = MaterialStream(FEED.Name+\"e\", sys)\t\r\n\tBOTREF = MaterialStream(FEED.Name+\"f\", sys)\t\r\n\tCON = MaterialStream(FEED.Name+\"b\", sys)\r\n\t\t\r\n\tVIN.CopyFrom(FEED)\t\t\r\n\tLIN.CopyFrom(FEED)\t\r\n\t\r\n\tSEC01 = TraySection(name+\"_\"+\"SEC01\",sys,stages)\r\n\tSEC01.Connect(\"VIn\", VIN)\r\n\tSEC01.Connect(\"LIn\", LIN)\r\n\tSEC01.Connect(\"VOut\", VOUT)\r\n\tSEC01.Connect(\"LOut\", LOUT)\r\n\tSEC01.ConnectFeed(FEED,feedTray)\r\n\tSEC01.MakeAdiabatic()\r\n\tSEC01.MakeIsobaric()\r\n\t\r\n\tREBSPLI = Splitter(name+\"_\"+\"REBSPLI\",sys)\r\n\tREBSPLI.Connect(\"In\", LOUT)\r\n\tREBSPLI.Connect(\"Out1\", BOTREF)\r\n\tREBSPLI.Connect(\"Out2\", BOT)\r\n\tREBSPLI.Specify(\"DP\",0, METRIC.bar)\r\n\tREBSPLI.Specify(\"K\",0.7)\r\n\t\r\n\tREB = Heater(name+\"_\"+\"REB\",sys)\r\n\tREB.Connect(\"In\", BOTREF)\r\n\tREB.Connect(\"Out\", VIN)\r\n\tREB.Specify(\"P\",p, METRIC.bar)\r\n\tREB.Specify(\"VF\",0.4)\r\n\t#REB.Specify(\"T\",175, METRIC.C)\r\n\t\r\n\tCOND = Heater(name+\"_\"+\"COND\",sys)\r\n\tCOND.Connect(\"In\", VOUT)\r\n\tCOND.Connect(\"Out\", CON)\r\n\tCOND.Specify(\"P\",p, METRIC.bar)\r\n\tCOND.Specify(\"T\",TCon, METRIC.C)\r\n\r\n\tREFSPLI = Splitter(name+\"_\"+\"REFSPLI\",sys)\r\n\tREFSPLI.Connect(\"In\", CON)\r\n\tREFSPLI.Connect(\"Out1\", LIN)\r\n\tREFSPLI.Connect(\"Out2\", TOP)\r\n\tREFSPLI.Specify(\"DP\",0, METRIC.bar)\r\n\tREFSPLI.Specify(\"K\",0.4)\r\n\t\r\n\tREBSPLI.GetVariable(\"K\").LowerBound=0.1\r\n\tREBSPLI.GetVariable(\"K\").UpperBound=0.9\r\n\r\n\tREFSPLI.GetVariable(\"K\").LowerBound=0.1\r\n\tREFSPLI.GetVariable(\"K\").UpperBound=0.9\r\n\r\n\tunits=[SEC01,COND, REFSPLI,  REBSPLI, REB]\r\n\t\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\tflowsheet= Flowsheet(\"Flow\")\r\n\tflowsheet.AddMaterialStreams(VOUT, CON,LIN, TOP, LOUT,BOTREF, VIN, BOT)\r\n\tflowsheet.AddUnits(SEC01, COND, REFSPLI, REBSPLI,REB)\r\n\tdecomp(flowsheet)\r\n\treturn flowsheet\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ColumnBuilder",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "6",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\ndef ColumnBuilder2(name, sys, FEED, TOP, BOT, stages, feedTray, TCon,p, BoilupGuess):\t\r\n\t\r\n\tVIN = MaterialStream(FEED.Name+\"g\", sys)\r\n\tLIN = MaterialStream(FEED.Name+\"c\", sys)\r\n\tVOUT = MaterialStream(FEED.Name+\"a\", sys)\r\n\tLOUT = MaterialStream(FEED.Name+\"e\", sys)\t\t\r\n\tCON = MaterialStream(FEED.Name+\"b\", sys)\r\n\t\t\r\n\tVIN.CopyFrom(FEED)\t\t\r\n\tLIN.CopyFrom(FEED)\t\r\n\t\r\n\tSEC01 = TraySection(name+\"_\"+\"SEC01\",sys,stages)\r\n\tSEC01.Connect(\"VIn\", VIN)\r\n\tSEC01.Connect(\"LIn\", LIN)\r\n\tSEC01.Connect(\"VOut\", VOUT)\r\n\tSEC01.Connect(\"LOut\", LOUT)\r\n\tSEC01.ConnectFeed(FEED,feedTray)\r\n\tSEC01.MakeAdiabatic()\r\n\tSEC01.MakeIsobaric()\r\n\tSEC01.FixStageEfficiency(1.0)\r\n\tREB = Flash(name+\"_\"+\"REB\",sys)\r\n\tREB.Connect(\"In\", LOUT)\r\n\tREB.Connect(\"Vap\", VIN)\r\n\tREB.Connect(\"Liq\", BOT)\r\n\tREB.Specify(\"P\",p, METRIC.bar)\r\n\tREB.Specify(\"VF\",BoilupGuess)\r\n\t\r\n\tCOND = Heater(name+\"_\"+\"COND\",sys)\r\n\tCOND.Connect(\"In\", VOUT)\r\n\tCOND.Connect(\"Out\", CON)\r\n\tCOND.Specify(\"P\",p, METRIC.bar)\r\n\t#COND.Specify(\"VF\",TCon, METRIC.C)\r\n\tCOND.Specify(\"VF\",0)\r\n\r\n\tREFSPLI = Splitter(name+\"_\"+\"REFSPLI\",sys)\r\n\tREFSPLI.Connect(\"In\", CON)\r\n\tREFSPLI.Connect(\"Out1\", LIN)\r\n\tREFSPLI.Connect(\"Out2\", TOP)\r\n\tREFSPLI.Specify(\"DP\",0, METRIC.bar)\r\n\tREFSPLI.Specify(\"K\",0.45)\r\n\t\r\n\tREFSPLI.GetVariable(\"K\").LowerBound=0.01\r\n\tREFSPLI.GetVariable(\"K\").UpperBound=0.99\r\n\r\n\tREB.GetVariable(\"VF\").LowerBound=0.01\r\n\tREB.GetVariable(\"VF\").UpperBound=0.99\r\n\t\r\n\r\n\tunits=[SEC01,COND, REFSPLI, REB]\r\n\t\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\t #u.SolveSequential()\r\n\r\n\r\n\r\n\tflowsheet= Flowsheet(\"Flow\")\r\n\tflowsheet.AddMaterialStreams(VOUT, CON,LIN, TOP, LOUT, VIN, BOT)\r\n\tflowsheet.AddUnits(SEC01, COND, REFSPLI, REB)\r\n\tdecomp(flowsheet)\r\n\treturn flowsheet\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ColumnBuilder2",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "7",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\ndef ColumnBuilder3(name, sys, FEED, TOP, BOT, stages, feedTray,pTop, RefluxRatio, BoilupFraction):\t\r\n\t\r\n\tVIN = MaterialStream(FEED.Name+\"g\", sys)\r\n\tLIN = MaterialStream(FEED.Name+\"c\", sys)\r\n\tVOUT = MaterialStream(FEED.Name+\"a\", sys)\r\n\tLOUT = MaterialStream(FEED.Name+\"e\", sys)\t\t\r\n\tCON = MaterialStream(FEED.Name+\"b\", sys)\r\n\t\t\r\n\tVIN.CopyFrom(FEED)\t\t\r\n\tLIN.CopyFrom(FEED)\t\r\n\t\r\n\tSEC01 = TraySection(name+\"_\"+\"SECTION\",sys,stages)\r\n\tSEC01.Connect(\"VIn\", VIN)\r\n\tSEC01.Connect(\"LIn\", LIN)\r\n\tSEC01.Connect(\"VOut\", VOUT)\r\n\tSEC01.Connect(\"LOut\", LOUT)\r\n\tSEC01.ConnectFeed(FEED,feedTray)\r\n\tSEC01.MakeAdiabatic()\r\n\tSEC01.MakeIsobaric()\r\n\tSEC01.FixStageEfficiency(1.0)\r\n\t\r\n\tREB = Flash(name+\"_\"+\"REBOILER\",sys)\\\r\n\t\t.Connect(\"In\", LOUT)\\\r\n\t\t.Connect(\"Vap\", VIN)\\\r\n\t\t.Connect(\"Liq\", BOT)\\\r\n\t\t.Specify(\"P\",pTop, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",BoilupFraction)\r\n\t\r\n\tCOND = Heater(name+\"_\"+\"CONDENSER\",sys)\\\r\n\t\t.Connect(\"In\", VOUT)\\\r\n\t\t.Connect(\"Out\", CON)\\\r\n\t\t.Specify(\"P\",pTop, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0)\r\n\r\n\tREFSPLI = Splitter(name+\"_\"+\"REFLUXSPLIT\",sys)\\\r\n\t\t.Connect(\"In\", CON)\\\r\n\t\t.Connect(\"Out1\", LIN)\\\r\n\t\t.Connect(\"Out2\", TOP)\\\r\n\t\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t\t.Specify(\"K\",RefluxRatio/(1.0+RefluxRatio))\r\n\t\r\n\tREFSPLI.GetVariable(\"K\").LowerBound=0.01\r\n\tREFSPLI.GetVariable(\"K\").UpperBound=0.99\r\n\r\n\tREB.GetVariable(\"VF\").LowerBound=0.01\r\n\tREB.GetVariable(\"VF\").UpperBound=0.99\r\n\t\r\n\tSEC01.Initialize()\r\n\t\r\n\tunits=[COND, REFSPLI, REB]\r\n\tfor i in range(2):\r\n\t for u in units:\r\n\t  u.Initialize()\r\n\t\r\n\tSEC01.Solve()\r\n\t\r\n\tfor i in range(2):\r\n\t for u in units:\r\n\t  u.Initialize()\r\n\t  \r\n\tflowsheet= Flowsheet(\"Column Builder Kettle-Type\")\r\n\tflowsheet.AddMaterialStreams(VOUT, CON,LIN, TOP, LOUT, VIN, BOT)\r\n\tflowsheet.AddUnits(SEC01, COND, REFSPLI, REB)\r\n\tdecomp(flowsheet)\r\n\treturn flowsheet\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ColumnBuilder3",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "8",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def PhaseEnvelope(stream, fromT, toT,steps):\r\n\tchart=ChartModel(stream.Name +\" Phase Envelope PT\");\r\n\tchart.YAxisTitle = \"Pressure [mbar]\"\r\n\tchart.XAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\t\t\r\n\t#for i in range(steps):\t\t\r\n\t#\tyValues.Add(i+1)\r\n\t#\txValues.Add(section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit)\r\n\t#\t\r\n\t\r\n \tdeltaT=(toT-fromT)/float(steps)\r\n \tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n \r\n \tfor i in range(steps+1):\r\n \t\tT=fromT+deltaT*i \t\t\r\n \t\tstream.Specify(\"T\", T, METRIC.C)\r\n \t\tsolve(flowsheet)\r\n \t\txValues.Add(T)\r\n \t\tyValues.Add(stream.GetVariable(\"p\").ValueInOutputUnit)  \t\t\r\n  \t\t\r\n\tstream.Specify(\"VF\",1.0)\r\n\t\r\n\tfor i in range(steps+1):\r\n \t\tT=fromT+deltaT*i\r\n \t\tstream.Specify(\"T\", T, METRIC.C)\r\n \t\tsolve(flowsheet) \t\t\r\n \t\ty2Values.Add(stream.GetVariable(\"p\").ValueInOutputUnit )\t\t\r\n \t\r\n \tySeries = SeriesModel(\"PB\", SeriesType.Line, xValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"PD\", SeriesType.Line, xValues, y2Values, \"Blue\")\t\r\n\tchart.Series.Add(y2Series)\t\r\n\t\r\n\tshow(chart)\r\n \treturn \r\n\r\ndef TXYChart(stream, c1, c2,steps):\r\n\tchart=ChartModel(\"TXY \"+c1.ID+\"/\"+c2.ID+ \"(p=\"+str(stream.GetVariable(\"p\").ValueInOutputUnit)+\" \"+str(stream.GetVariable(\"p\").OutputUnit)+\")\");\r\n\tchart.YAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.XAxisTitle = \"Molar Fraction \"+c1.ID\r\n\t#chart.AutoScaleX = True\r\n\tchart.XMin=0\r\n\tchart.XMax=1\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n \t\r\n \tstream.Specify(\"VF\",0.0)\r\n \tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\t#stream.FlashPZ()\t\r\n \t\tdecomp(flowsheet)\r\n \t\txValues.Add(x1)\r\n \t\tyValues.Add(stream.GetVariable(\"T\").ValueInOutputUnit)  \t\t\r\n  \t\t\r\n\tstream.Specify(\"VF\",1.0)\r\n\r\n\tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\t#stream.FlashPZ()\t\r\n \t\tdecomp(flowsheet)\r\n \t\t#xValues.Add(x1)\r\n \t\ty2Values.Add(stream.GetVariable(\"T\").ValueInOutputUnit) \r\n \t\t\r\n \tySeries = SeriesModel(\"T Boiling\", SeriesType.Line, xValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"T Dew\", SeriesType.Line, xValues, y2Values, \"Blue\")\t\r\n\tchart.Series.Add(y2Series)\t\r\n\t\r\n\tshow(chart)\r\n \treturn  \r\n \t\r\n \t\r\ndef PXYChart(stream, c1, c2,steps):\r\n\tchart=ChartModel(\"PXY \"+c1.ID+\"/\"+c2.ID + \"(T=\"+str(stream.GetVariable(\"T\").ValueInOutputUnit)+\" \"+str(stream.GetVariable(\"T\").OutputUnit)+\")\" );\r\n\tchart.YAxisTitle = \"Pressure [mbar]\"\r\n\tchart.XAxisTitle = \"Molar Fraction \"+c1.ID\r\n\t#chart.AutoScaleX = True\r\n\tchart.XMin=0\r\n\tchart.XMax=1\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n\tstream.Specify(\"VF\",0.0)\r\n \tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\tdecomp(flowsheet)\r\n \t\txValues.Add(x1)\r\n \t\tyValues.Add(stream.GetVariable(\"p\").ValueInOutputUnit)  \t\t\r\n  \t\t\r\n\tstream.Specify(\"VF\",1.0)\r\n\t\r\n\tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\tdecomp(flowsheet)\r\n \t\t#xValues.Add(x1)\r\n \t\ty2Values.Add(stream.GetVariable(\"p\").ValueInOutputUnit)  \r\n \t\t\r\n \tySeries = SeriesModel(\"P Boiling\", SeriesType.Line, xValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"P Dew\", SeriesType.Line, xValues, y2Values, \"Blue\")\t\r\n\tchart.Series.Add(y2Series)\t\r\n\t\r\n\tshow(chart)\r\n \treturn  \r\n \t\r\ndef HTChart(stream, c1, T1, T2, steps):\r\n\tchart=ChartModel(\"HT-Diagram \"+c1.ID);\r\n\tchart.XAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.YAxisTitle = \"Specific Enthalpy [\"+str(stream.GetVariable(\"hV[\"+c1.ID+\"]\").OutputUnit)+\"]\" \r\n\t#chart.AutoScaleX = True\r\n\tchart.XMin=T1\r\n\tchart.XMax=T2\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n \t \t\r\n \tfor i in range(steps):\r\n \t\tT=T1 + i*(T2-T1)/float(steps-1) \t\t\r\n \t\tstream.Specify(\"T\", T,  METRIC.C) \t\t\r\n \t\tdecomp(flowsheet)\r\n \t\txValues.Add(T)\r\n \t\tyValues.Add(stream.GetVariable(\"hV[\"+c1.ID+\"]\").ValueInOutputUnit)  \t\t\r\n \t\ty2Values.Add(stream.GetVariable(\"hL[\"+c1.ID+\"]\").ValueInOutputUnit)  \t\t\r\n  \t\t\r\n \tySeries = SeriesModel(\"HV\", SeriesType.Line, xValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"HL\", SeriesType.Line, xValues, y2Values, \"Blue\")\t\r\n\tchart.Series.Add(y2Series)\t\t\r\n\tshow(chart)\r\n \treturn   \t",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ThermoUtilityFunctions",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "9",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def printRateBasedSection(sec,simple=False):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfElements\r\n\t\r\n\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('Stage', 'TL','TI','TV', 'P', 'DP', 'Q', 'E', 'L' ,'V','A')\r\n\tprint '{0:>10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('',sec.GetVariable(\"TL[1]\").OutputUnit,sec.GetVariable(\"TI[1]\").OutputUnit,sec.GetVariable(\"TV[1]\").OutputUnit,sec.GetVariable(\"P[1]\").OutputUnit,sec.GetVariable(\"DP[1]\").OutputUnit,sec.GetVariable(\"Q[1]\").OutputUnit,sec.GetVariable(\"E[1]\").OutputUnit, sec.GetVariable(\"L[1]\").OutputUnit,sec.GetVariable(\"V[1]\").OutputUnit,sec.GetVariable(\"aeff[1]\").OutputUnit)\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format(j, sec.GetVariable(\"TL[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"TI[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"TV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"P[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"DP[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"Q[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"E[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"L[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"V[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"aeff[\"+j+\"]\").ValueInOutputUnit)\t\r\n\tprint ''\r\n\t\r\n\tif(simple):\r\n\t return\r\n\t \r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('x['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'x['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('xI['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'xI['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('yI['+c.ID+']'))))\t\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'yI['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('y['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'y['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\t\r\n\r\n\treturn\t\r\ndef printRateBasedSectionBeta(sec):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfElements\r\n\tprint ''\t\t\r\n\tprint sec.Name\t\t\r\n\tprint 'Mass Transfer coefficients'\r\n\tprint ''\t\r\n\ttrays=sec.NumberOfElements\r\n\tfor tray in range(1,trays+1):\r\n\t print '{0:10} {1:10} '.format('Stage '+str(tray), ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format(c.ID))))\r\n\t for c1 in sec.System.Components:\t \r\n\t  print '{0:10} {1:10}'.format(c1.ID, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'BetaV['+str(tray)+', '+ c1.ID +', '+c.ID+']' ).ValueInSI ) ) ))\t\r\n\t print ''\t\t\r\n\treturn\t\r\n\t\r\ndef printRateBasedSectionHydro(sec):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfElements\r\n\t\r\n\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10} {11:10}'.format('Stage', 'P', 'DP', 'L' ,'V','uV','ReV','aspec','aeff','d','h','dhyd')\r\n\tprint '{0:>10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10} {11:10}'.format('',sec.GetVariable(\"P[1]\").OutputUnit,sec.GetVariable(\"DP[1]\").OutputUnit,sec.GetVariable(\"L[1]\").OutputUnit,sec.GetVariable(\"V[1]\").OutputUnit,sec.GetVariable(\"uV[1]\").OutputUnit,sec.GetVariable(\"ReV[1]\").OutputUnit,sec.GetVariable(\"aspec[1]\").OutputUnit,sec.GetVariable(\"aeff[1]\").OutputUnit,sec.GetVariable(\"d[1]\").OutputUnit,sec.GetVariable(\"h[1]\").OutputUnit,sec.GetVariable(\"dhyd[1]\").OutputUnit)\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10} {11:10}'.format(j, sec.GetVariable(\"P[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"DP[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"L[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"V[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"uV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"ReV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"aspec[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"aeff[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"d[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"h[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"dhyd[\"+j+\"]\").ValueInOutputUnit)\t\r\n\tprint ''\t\r\n\t\r\n\treturn",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "RateBasedUtilityFunctions",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "10",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def EnableLinesearch():\r\n\t_newton.DoLinesearch=True\r\n\treturn\t \r\n\t\r\ndef DisableLinesearch():\r\n\t_newton.DoLinesearch=False\r\n\treturn\t \r\n\t\r\ndef EnableScaling():\r\n\t_newton.DoScaling=True\r\n\treturn\t \r\n\t\r\ndef DisableScaling():\r\n\t_newton.DoScaling=False\r\n\treturn\t \r\n\t\r\ndef MaxIter(iter):\r\n\t_newton.MaximumIterations=iter;\r\n\treturn\t \r\n\t\r\ndef StopOnError():\r\n\tif(_newton.IsConverged):\r\n\t return\r\n\telse:\r\n\t stop()\r\n\treturn\t  \r\n\t\r\ndef printTitle(msg):\r\n\tprint 'ââââââââââââââââââââââââââââââââââââââââââââââââââââ'\r\n\tprint 'â'+msg.center(50)+'â' \r\n\tprint 'ââââââââââââââââââââââââââââââââââââââââââââââââââââ'\r\n\treturn\r\n \r\ndef printUnderline(msg): \r\n\tprint ' '+msg.center(50)+' ' \r\n\tprint 'ââââââââââââââââââââââââââââââââââââââââââââââââââââ'\r\n\treturn\t ",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "CommonUtilityFunctions",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  }
                ]
              },
              "IsExpanded": true,
              "IconName": "Folder",
              "IsRenaming": false,
              "Parent": {
                "$ref": "2"
              }
            },
            {
              "$id": "11",
              "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
              "Id": "00000000-0000-0000-0000-000000000000",
              "Name": "ChemSep",
              "Children": {
                "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                "$values": [
                  {
                    "$id": "12",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "sys= ThermodynamicSystem(\"Test1\",\"Ideal\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Ethanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Isopropanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Ethanol]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Isopropanol]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Water]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.35)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Test1",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "11"
                    }
                  },
                  {
                    "$id": "13",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "run(Items[\"Projects|Scripts|ThermoHelper\"].Data)\t\r\n\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"Ideal\", \"default\")\r\n\r\nDatabase.ListComponents(\"Benze\")\r\nDatabase.ListComponents(\"Tolu\")\r\nDatabase.ListComponents(\"xyle\")\r\n\r\n\r\nsys.AddComponent(Database.FindComponent(\"Benzene\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\"))\r\nsys.AddComponent(Database.FindComponent(\"P-xylene\"))\r\n#Database.FillBinaryParameters(\"NRTL\", sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Benzene]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Toluene]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[P-xylene]\",0, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.35)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Unspecify(\"p\")\r\nS01.Specify(\"T\", 80, METRIC.C)\r\nPXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\n\r\nHTChart(S01, sys.Components[0], 0, 400,21)\r\nHTChart(S01, sys.Components[1], 0, 400,21)\r\nHTChart(S01, sys.Components[2], 0, 400,21)",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Test BTX System",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "11"
                    }
                  },
                  {
                    "$id": "14",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\n\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"NRTLRP\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Ethanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Isopropanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Ethanol]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Isopropanol]\",0, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Water]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.5)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[2],21)\r\n\r\n\r\nS01.Unspecify(\"p\")\r\nS01.Specify(\"T\", 100, METRIC.C)\r\nPXYChart(S01, sys.Components[0], sys.Components[2],21)\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Test EtOH Water System",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "11"
                    }
                  },
                  {
                    "$id": "15",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "run(Items[\"Projects|Scripts|RateBasedUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\t\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"NRTLRP\", \"default\")\\\r\n\t.AddComponent(Database.FindComponent(\"Methanol\").RenameID(\"METHANOL\"))\\\r\n\t.AddComponent(Database.FindComponent(\"Isopropanol\").RenameID(\"ISOPROPA\"))\\\r\n\t.AddComponent(Database.FindComponent(\"Water\").RenameID(\"WASSER\"))\r\nDatabase.FillBIPs(sys)\r\n\r\n#Manually add diffusion coefficients \r\nDVIJ0= DiffusionCoefficients(sys)\\\r\n\t.SetParamSymmetric(\"A\", sys.Components[0], sys.Components[1], 7.68300000E-06)\\\r\n\t.SetParamSymmetric(\"A\", sys.Components[0], sys.Components[2], 1.82900000E-05)\\\r\n\t.SetParamSymmetric(\"A\", sys.Components[1], sys.Components[2],  1.19300000E-05)\r\n\t\r\nsys.BinaryParameters.Add(DVIJ0)   \r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, SI.kg/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MolarFlow, SI.mol/SI.s)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.VolumeFlow, SI.cum/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, METRIC.C)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.mbar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\n\r\nreport(sys)\r\n\r\n#Scaling of the axial discretization. M is the number of repetitions\r\nM=3\r\nN1=3*M\r\nN2=5*M\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t.Specify(\"T\",60, METRIC.C)\\\r\n\t.Specify(\"p\",920, METRIC.mbar)\\\r\n\t.Specify(\"n[METHANOL]\",5.3427, SI.mol/SI.s)\\\r\n\t.Specify(\"n[ISOPROPA]\",2.4285, SI.mol/SI.s)\\\r\n\t.Specify(\"n[WASSER]\",1.9428, SI.mol/SI.s)\\\r\n\t.FlashPT()\r\n\r\nS03 = MaterialStream(\"S03\", sys)\r\nS04 = MaterialStream(\"S04\", sys)\r\nS05 = MaterialStream(\"S05\", sys)\\\r\n\t.Init(\"T\",63,METRIC.C)\\\r\n\t.Init(\"p\",1, METRIC.bar)\\\r\n\t.Init(\"n[METHANOL]\",5.3427, SI.mol/SI.s)\\\r\n\t.Init(\"n[ISOPROPA]\",0.5, SI.mol/SI.s)\\\r\n\t.Init(\"n[WASSER]\",0.2, SI.mol/SI.s)\\\r\n\t.FlashPT()\r\n\t\r\nS06 = MaterialStream(\"S06\", sys)\r\nS07 = MaterialStream(\"S07\", sys)\r\nS08 = MaterialStream(\"S08\", sys)\r\nS09 = MaterialStream(\"S09\", sys)\r\nS10 = MaterialStream(\"S10\", sys)\r\nS11 = MaterialStream(\"S11\", sys)\r\nS12 = MaterialStream(\"S12\", sys)\r\n\r\n\r\nS12.Specify(\"T\",90, METRIC.C)\\\r\n\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t.Specify(\"n[METHANOL]\",8, SI.kmol/SI.h)\\\r\n\t.Specify(\"n[ISOPROPA]\",1, SI.kmol/SI.h)\\\r\n\t.Specify(\"n[WASSER]\",10, SI.kmol/SI.h)\\\r\n\t.FlashPT()\r\n\r\nS07.Init(\"T\",50, METRIC.C)\\\r\n\t.Init(\"p\",1, METRIC.bar)\\\r\n\t.Init(\"n[METHANOL]\",12, SI.kmol/SI.h)\\\r\n\t.Init(\"n[ISOPROPA]\",2, SI.kmol/SI.h)\\\r\n\t.Init(\"n[WASSER]\",8, SI.kmol/SI.h)\\\r\n\t.FlashPT()\r\n\r\nFEEDTRAY = Mixer(\"FEEDTRAY\",sys)\\\r\n\t.Connect(\"In\", S01)\\\r\n\t.Connect(\"In\", S07)\\\r\n\t.Connect(\"Out\", S08)\\\r\n\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t.Initialize()\\\r\n\t.Solve()\r\n\r\nSEC01 = RateBasedSection(\"SEC01\",sys,N1)\\\r\n\t.Connect(\"VIn\", S12)\\\r\n\t.Connect(\"LIn\", S05)\\\r\n\t.Connect(\"VOut\", S03)\\\r\n\t.Connect(\"LOut\", S07)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.SetHeight(0.215*3, SI.m)\\\r\n\t.SetDiameter(1.033, SI.m)\\\r\n\t.SetSpecificArea(250, SI.sqm/SI.cum)\\\r\n\t.SetModel(False,False,False,False)\\\r\n\t.SetInitMode()\\\r\n\t.Initialize()\r\n\r\nCONDENSER = Heater(\"CONDENSER\",sys)\\\r\n\t.Connect(\"In\", S03)\\\r\n\t.Connect(\"Out\", S04)\\\r\n\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t.Specify(\"VF\",0)\\\r\n\t.Initialize()\r\n\t\r\nSPLIT01 = Splitter(\"SPLIT01\",sys)\\\r\n\t.Connect(\"In\", S04)\\\r\n\t.Connect(\"Out1\", S06)\\\r\n\t.Connect(\"Out2\", S05)\\\r\n\t.Specify(\"DP\",0)\\\r\n\t.Specify(\"K\",0.125)\\\r\n\t.Initialize()\r\n\t\t\r\nSEC01.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01, S03,S04,S05,S06,S07,S08,S12)\\\r\n\t.AddUnits(FEEDTRAY,  SEC01,CONDENSER,SPLIT01)\r\n\r\nprintTitle(\"Solve rectification section\")\r\n\r\ndecomp(flowsheet)\r\n\r\nSEC01.SetSolveMode()\r\ndecomp(flowsheet)\r\n\r\n#Stop()\r\n\r\nS12.Unfix()\r\n\r\nSEC02 = RateBasedSection(\"SEC02\",sys,N2)\\\r\n\t.Connect(\"VIn\", S11)\\\r\n\t.Connect(\"LIn\", S08)\\\r\n\t.Connect(\"VOut\", S12)\\\r\n\t.Connect(\"LOut\", S09)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.SetHeight(0.215*5, SI.m)\\\r\n\t.SetDiameter(1.033, SI.m)\\\r\n\t.SetSpecificArea(250, SI.sqm/SI.cum)\\\r\n\t.SetModel(False,False,False,False)\\\r\n\t.SetInitMode()\\\r\n\t.Initialize()\r\n\t\r\nREB= Flash(\"REB\",sys)\\\r\n\t.Connect(\"In\", S09)\\\r\n\t.Connect(\"Vap\",S11)\\\r\n\t.Connect(\"Liq\",S10)\\\r\n\t.Specify(\"VF\", 0.5)\\\r\n\t.Specify(\"P\", 929, METRIC.mbar)\\\r\n\t.Initialize()\r\n\r\nSEC02.Initialize()\r\n\r\nflowsheet\\\r\n\t.AddMaterialStreams(S09,S10,S11)\\\r\n\t.AddUnits(SEC02,REB)\r\n\r\nprintTitle(\"Initialize stripping section\")\r\ndecomp(flowsheet)\r\n\r\nSEC02.SetSolveMode()\r\ndecomp(flowsheet)\r\n#Stop()\r\n\r\nprintTitle(\"Fix Pressure Drop\")\r\nfor t in range(1,N1+1):\t\r\n\tSEC01.Specify(\"DP[\"+str(t)+\"]\",8.0/(N1+N2), METRIC.mbar)\r\nfor t in range(1,N2+1):\t\t\r\n\tSEC02.Specify(\"DP[\"+str(t)+\"]\",8.0/(N1+N2), METRIC.mbar)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Activate Mass Transfer Vapor (Beta=const.)\")\r\nSEC01.SetModel(True,False,False,False)\r\nSEC02.SetModel(True,False,False,False)\r\n\r\nfor t in range(1,N1+1):\t\t\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, ISOPROPA]\").SetValue(1.368998E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, WASSER]\").SetValue(2.440758E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, METHANOL]\").SetValue(1.368998E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, WASSER]\").SetValue( 1.835732E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", WASSER, METHANOL]\").SetValue(2.440758E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", WASSER, ISOPROPA]\").SetValue( 1.835732E-02, SI.m/SI.s)\r\n\r\nfor t in range(1,N2+1):\t\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, ISOPROPA]\").SetValue(1.380624E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, WASSER]\").SetValue(2.461487E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, METHANOL]\").SetValue(1.380624E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, WASSER]\").SetValue(1.851322E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", WASSER, METHANOL]\").SetValue(2.461487E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", WASSER, ISOPROPA]\").SetValue(1.851322E-02, SI.m/SI.s)\r\ndecomp(flowsheet)\t\r\n\r\n\r\nprintTitle(\"Increase Reboiler VF to reach bottoms flow\")\r\nREB.Unspecify(\"VF\")\r\nS10.Specify(\"n\",8.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\nS10.Specify(\"n\",7.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\nS10.Specify(\"n\",5.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\nS10.Specify(\"n\",4.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Enable Beta Calculation\")\r\nSEC01.EnableBetaVCalculation()\r\nSEC02.EnableBetaVCalculation()\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Define Reflux ratio aux variable\")\r\nrr1= Variable(\"rr1\", 0.4)\r\nrr1.Description=\"Reflux ratio\"\r\nrr1.BindTo((1-SPLIT01.GetVariable(\"K\"))/Sym.Par(1-(1-SPLIT01.GetVariable(\"K\"))))\r\n\r\n\r\nprintTitle(\"Create Flowsheet Documentation and Reports\")\r\ntext1=TextElement(\"Ratebased Distillation Example\",24,\"Blue\")\\\r\n\t.SetPosition(800, 60)\\\r\n\t.SetSize(400,80)\\\r\n\t.SetColors(\"White\",\"GhostWhite\")\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(800,200)\\\r\n\t.SetSize(1200,600)\t\r\ntable1.PrintMolarVariables=True\r\n\t\r\nflowsheet.AddDocumentation(text1,table1)\r\n\r\n\r\nreport(rr1)\r\nreport(CONDENSER.GetVariable(\"Q\")) \r\nreport(REB.GetVariable(\"Q\")) \r\nprint(\"\")\r\nprintRateBasedSection(SEC01)\r\nprintRateBasedSection(SEC02)\r\n\r\nprintRateBasedSectionHydro(SEC01)\r\nprintRateBasedSectionHydro(SEC02)\r\nprintRateBasedSectionBeta(SEC02)\r\n\r\nFEEDTRAY.SetIcon(IconTypes.Mixer, 310,460)\r\nSEC01.SetIcon(IconTypes.RateBasedSection, 410,190)\r\nCONDENSER.SetIcon(IconTypes.Heater, 460,30)\r\nSPLIT01.SetIcon(IconTypes.Splitter, 600,100)\r\nS01.SetIcon(IconTypes.Stream, 100,460)\r\nS06.SetIcon(IconTypes.Stream, 730,30)\r\nS08.SetIcon(IconTypes.Stream, 680,600)\r\nS12.SetIcon(IconTypes.Stream, 100,600)\r\nSEC02.SetIcon(IconTypes.RateBasedSection, 410,610)\r\nREB.SetIcon(IconTypes.TwoPhaseFlash, 530,840)\r\nS10.SetIcon(IconTypes.Stream, 630,940)\r\n\r\nshow(flowsheet)\r\n\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "RatebasedDistl",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "11"
                    }
                  }
                ]
              },
              "IsExpanded": true,
              "IconName": "Folder",
              "IsRenaming": false,
              "Parent": {
                "$ref": "2"
              }
            }
          ]
        },
        "IsExpanded": true,
        "IconName": "Folder",
        "IsRenaming": false,
        "Parent": {
          "$ref": "1"
        }
      },
      {
        "$id": "16",
        "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
        "Id": "00000000-0000-0000-0000-000000000000",
        "Name": "Results",
        "Children": {
          "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
          "$values": [
            {
              "$id": "17",
              "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
              "Id": "00000000-0000-0000-0000-000000000000",
              "Name": "Snapshots",
              "Children": {
                "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                "$values": []
              },
              "IsExpanded": true,
              "IconName": "Folder",
              "IsRenaming": false,
              "Parent": {
                "$ref": "16"
              }
            }
          ]
        },
        "IsExpanded": true,
        "IconName": "Folder",
        "IsRenaming": false,
        "Parent": {
          "$ref": "1"
        }
      }
    ]
  },
  "IsExpanded": true,
  "IconName": "Folder",
  "IsRenaming": false,
  "Parent": null
}