{
  "$id": "1",
  "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
  "Id": "00000000-0000-0000-0000-000000000000",
  "Name": "Root",
  "Children": {
    "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
    "$values": [
      {
        "$id": "2",
        "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
        "Id": "00000000-0000-0000-0000-000000000000",
        "Name": "Projects",
        "Children": {
          "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
          "$values": [
            {
              "$id": "3",
              "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
              "Id": "00000000-0000-0000-0000-000000000000",
              "Name": "Scripts",
              "Children": {
                "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                "$values": [
                  {
                    "$id": "4",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\n\r\n\r\ndef Homotopy( flowsheet, variable, x1, uom, steps):\r\n x0= variable.GetValue(uom)\r\n tol=_newton.Tolerance\r\n _newton.Tolerance=1e-2\r\n print('x0='+str(x0))\r\n dx=(x1-x0)/float(steps)\r\n print('d0='+str(dx))\r\n eq = EquationSystem()\r\n variable.IsFixed=True\r\n flowsheet.FillEquationSystem(eq)\r\n print('Simple Homotopy Solver')\r\n \r\n for i in range(steps):\r\n  x=x0+(i+1)*dx\r\n  variable.FixValue(x, uom)\r\n  print('x = '+ str(x))\r\n  \r\n  if(i==steps-1):\r\n   _newton.Tolerance=tol\r\n   \r\n  solve(eq)\r\n  \r\n  if(_newton.IsConverged==False):\r\n   print('Homotopy did not converge.')\r\n   _newton.Tolerance=tol\r\n   return   \r\n print('Homotopy solve converged.')\r\n _newton.Tolerance=tol\r\n return\r\n \r\n\r\n\r\ndef StreamMolarFractionToFlow(stream):\r\n total= stream.GetVariable(\"n\").ValueInSI\r\n for c in range(stream.System.Components.Count):\r\n  stream.GetVariable(\"n[\"+stream.System.Components[c].ID+\"]\").ValueInSI = total *  stream.GetVariable(\"x[\"+stream.System.Components[c].ID+\"]\").ValueInSI\r\n\r\ndef printSection(sec,simple=False):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfTrays\r\n\t\r\n\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('Stage', 'T','TV', 'P', 'Q','L' ,'V','F','W','RL', 'EPS')\r\n\tprint '{0:>10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('',sec.GetVariable(\"T[1]\").OutputUnit,sec.GetVariable(\"TV[1]\").OutputUnit,sec.GetVariable(\"P[1]\").OutputUnit,sec.GetVariable(\"Q[1]\").OutputUnit, sec.GetVariable(\"L[1]\").OutputUnit,sec.GetVariable(\"V[1]\").OutputUnit,sec.GetVariable(\"F[1]\").OutputUnit,sec.GetVariable(\"W[1]\").OutputUnit,sec.GetVariable(\"RL[1]\").OutputUnit,'[-]')\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format(j, sec.GetVariable(\"T[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"TV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"P[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"Q[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"L[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"V[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"F[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"W[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"RL[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"eps[\"+j+\"]\").ValueInOutputUnit)\t\r\n\tprint ''\r\n\t\r\n\tif(simple):\r\n\t return\r\n\t \r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('x['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'x['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('y['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'y['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('y*['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'yeq['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('z['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'z['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\r\n\treturn\r\n\t\r\n\r\n\t\r\ndef printHEX(hex):\r\n\tcells=hex.Discretization\r\n\ttubeSideCells=hex.Tube\r\n\tshellSideCells=hex.Shell\r\n\ttubeSideStreams=hex.TubeStreams\r\n\tshellSideStreams=hex.ShellStreams\r\n\tqex= hex.QExchanged\r\n\t\r\n\ttubeIn=hex.FindMaterialPort(\"TubeIn\").Streams[0]\r\n\tshellIn=hex.FindMaterialPort(\"ShellIn\").Streams[0]\r\n\ttubeOut=hex.FindMaterialPort(\"TubeOut\").Streams[0]\r\n\tshellOut=hex.FindMaterialPort(\"ShellOut\").Streams[0]\r\n\t\r\n\t\r\n\tprint '--- {0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10}'.format('Tube_Cell', 'Tube_T', 'Tube_P', 'Tube_VF','Shell_Cell' ,'Shell_T', 'Shell_P', 'Shell_VF', 'Q')\r\n\tprint '--- {0:>10} {1:>10} {2:>10} {3:>10} {4:10} {5:>10} {6:>10} {7:>10} {8:>10}'.format('', tubeIn.GetVariable(\"T\").OutputUnit,tubeIn.GetVariable(\"p\").OutputUnit,tubeIn.GetVariable(\"VF\").OutputUnit, '',shellIn.GetVariable(\"T\").OutputUnit,shellIn.GetVariable(\"p\").OutputUnit,shellIn.GetVariable(\"VF\").OutputUnit, qex[0].Q.OutputUnit)\r\n\tprint '--- {0:>10} {1:10} {2:10} {3:10} {4:>10} {5:10} {6:10} {7:10}'.format('In', tubeIn.GetVariable(\"T\").ValueInOutputUnit,tubeIn.GetVariable(\"p\").ValueInOutputUnit,tubeIn.GetVariable(\"VF\").ValueInSI, 'In',shellIn.GetVariable(\"T\").ValueInOutputUnit,shellIn.GetVariable(\"p\").ValueInOutputUnit,shellIn.GetVariable(\"VF\").ValueInSI)\r\n\tfor i in range(cells):\r\n\t\tj=i+1\r\n\t\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\t j=cells-i\r\n\t\tprint '--- {0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10}'.format((i+1), tubeSideCells[i].GetVariable(\"T\").ValueInOutputUnit,tubeSideCells[i].GetVariable(\"P\").ValueInOutputUnit,tubeSideStreams[i].GetVariable(\"VF\").ValueInSI, j,shellSideCells[i].GetVariable(\"T\").ValueInOutputUnit,shellSideCells[i].GetVariable(\"P\").ValueInOutputUnit,shellSideStreams[i].GetVariable(\"VF\").ValueInSI,qex[0].Q.ValueInOutputUnit)\r\n\tprint '--- {0:>10} {1:10} {2:10} {3:10} {4:>10} {5:10} {6:10} {7:10}'.format('Out', tubeOut.GetVariable(\"T\").ValueInOutputUnit,tubeOut.GetVariable(\"p\").ValueInOutputUnit,tubeOut.GetVariable(\"VF\").ValueInSI, 'Out',shellOut.GetVariable(\"T\").ValueInOutputUnit,shellOut.GetVariable(\"p\").ValueInOutputUnit,shellOut.GetVariable(\"VF\").ValueInSI)\t\t\r\n\treturn\r\n\r\ndef plot(name, xlabel, ylabel, x,y):\r\n \tchart=ChartModel(name);\t\r\n\tchart.XAxisTitle = xlabel\r\n\tchart.YAxisTitle = ylabel\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\tfor i in range(len(x)):\t\r\n\t\txValues.Add(x[i])\r\n\t\tyValues.Add(y[i])\r\n\tySeries = SeriesModel(\"Series\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\tchart.Series.Add(ySeries)\r\n\tshow(chart)\t\t\r\n\treturn\r\n\r\ndef plotHEX(hex):\r\n\tchartEntity= Chart(\"HEX Plot\")\r\n\tchartEntity.Model=ChartModel(\"Heat Exchanger Temperature Profile\");\r\n\t\r\n\tchart=chartEntity.Model\r\n\tchart.XAxisTitle = \"Length [-]\"\r\n\tchart.YAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tsteps = hex.Discretization\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\ttubeOut=hex.FindMaterialPort(\"TubeOut\").Streams[0]\r\n\tshellOut=hex.FindMaterialPort(\"ShellOut\").Streams[0]\r\n\r\n\tfor i in range(steps):\t\t\r\n\t\txValues.Add(i+1)\r\n\t\tyValues.Add(hex.Tube[i].GetVariable(\"T\").ValueInOutputUnit)\r\n\txValues.Add(steps+1)\r\n\tyValues.Add(tubeOut.GetVariable(\"T\").ValueInOutputUnit)\r\n\tySeries = SeriesModel(\"Tube T\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\tfor i in range(steps):\t\t\r\n\t\tj=i+1\r\n\t\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\t j=steps-i\r\n\t\txValues.Add(j)\r\n\t\tyValues.Add(hex.Shell[i].GetVariable(\"T\").ValueInOutputUnit)\r\n\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\txValues.Add(0)\r\n\telse:\r\n\t\txValues.Add(steps+1)\r\n\tyValues.Add(shellOut.GetVariable(\"T\").ValueInOutputUnit)\r\n\tySeries = SeriesModel(\"Shell T\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\tfor i in range(steps):\t\t\r\n\t\tj=i+1\t\r\n\t\txValues.Add(j)\r\n\t\tyValues.Add(hex.TubeStreams[i].GetVariable(\"VF\").ValueInOutputUnit*100)\r\n\txValues.Add(steps+1)\r\n\tyValues.Add(tubeOut.GetVariable(\"VF\").ValueInOutputUnit*100)\r\n\r\n\tySeries = SeriesModel(\"Tube VF\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\r\n\t\r\n\tfor i in range(steps):\t\t\r\n\t\tj=i+1\r\n\t\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\t j=steps-i\r\n\t\txValues.Add(j)\r\n\t\tyValues.Add(hex.ShellStreams[i].GetVariable(\"VF\").ValueInOutputUnit*100)\r\n\tif(hex.FlowPattern==FlowPattern.CounterCurrent):\r\n\t\txValues.Add(0)\r\n\telse:\r\n\t\txValues.Add(steps+1)\r\n\tyValues.Add(shellOut.GetVariable(\"VF\").ValueInOutputUnit)\r\n\r\n\tySeries = SeriesModel(\"Shell VF\", SeriesType.Line, xValues, yValues, \"Auto\")\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\t#Items.Add(\"Results|Charts\",chartEntity)\r\n\tshow(chart)\r\n\treturn\r\n\t\r\ndef plotSection(section):\r\n\tchart=ChartModel(section.Name +\" Temperature\");\r\n\tchart.YAxisTitle = \"Tray\"\r\n\tchart.XAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tchart.IsReversedYAxis=True\r\n\tsteps = section.NumberOfTrays\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\t#chart.XMin = 0\r\n\t#chart.XMax = 160\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit)\r\n\t\r\n\tySeries = SeriesModel(\"T\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\t\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"TV[\"+str(i+1)+\"]\").ValueInOutputUnit)\r\n\t\r\n\tySeries = SeriesModel(\"TV\", SeriesType.Line, xValues, yValues, \"Blue\")\t\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\t\r\n\tshow(chart)\r\n\treturn\r\n\r\n\r\ndef plotHT(section):\r\n\tchart=ChartModel(\"H-T Profile\");\r\n\tchart.YAxisTitle = \"Tray\"\r\n\tchart.XAxisTitle = \"Enthalpy [kW]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tchart.IsReversedYAxis=True\r\n\tsteps = section.NumberOfTrays\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tx2Values = chart.CreateList()\t\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"HL[\"+str(i+1)+\"]\").ValueInSI*section.GetVariable(\"L[\"+str(i+1)+\"]\").ValueInSI*1e-3)\r\n\t\tx2Values.Add(section.GetVariable(\"HV[\"+str(i+1)+\"]\").ValueInSI*section.GetVariable(\"V[\"+str(i+1)+\"]\").ValueInSI*1e-3)\r\n\t#section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit\r\n\tySeries = SeriesModel(\"HL\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\ty2Series = SeriesModel(\"HV\", SeriesType.Line, x2Values, yValues, \"Blue\")\r\n\t\r\n\tchart.Series.Add(ySeries)\r\n\tchart.Series.Add(y2Series)\r\n\t\t\r\n\t\r\n\tshow(chart)\r\n\treturn\r\n\t\r\ndef plotXT(section):\r\n\tchart=ChartModel(\"X-T Profile\");\r\n\tchart.YAxisTitle = \"Stage\"\r\n\tchart.XAxisTitle = \"Molar Fraction [-]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\t\r\n\tchart.IsReversedYAxis=True\r\n\tsteps = section.NumberOfTrays\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tx2Values = chart.CreateList()\t\r\n\tx3Values = chart.CreateList()\t\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", XYLOL]\").ValueInSI)\r\n\t\tx2Values.Add(section.GetVariable(\"y[\"+str(i+1)+\", XYLOL]\").ValueInSI)\r\n\t\tx3Values.Add(section.GetVariable(\"yeq[\"+str(i+1)+\", XYLOL]\").ValueInSI)\r\n\t#section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit\r\n\tySeries = SeriesModel(\"x\", SeriesType.Line, xValues, yValues, \"Red\")\r\n\ty2Series = SeriesModel(\"y\", SeriesType.Line, x2Values, yValues, \"Blue\")\r\n\ty3Series = SeriesModel(\"yeq\", SeriesType.Line, x3Values, yValues, \"Green\")\r\n\t\r\n\tchart.Series.Add(ySeries)\r\n\tchart.Series.Add(y2Series)\r\n\tchart.Series.Add(y3Series)\r\n\t\t\r\n\t\r\n\tshow(chart)\r\n\treturn\r\n\t\r\ndef plotMcCabe(title, section, xF,xB,xD, rr,q):\r\n\tchart=ChartModel(title);\r\n\tchart.YAxisTitle = \"vapor mole fraction [-]\"\r\n\tchart.XAxisTitle = \"liquid mole fraction [-]\"\r\n\tchart.YMin = 0.0\r\n\tchart.YMax = 1\r\n\tchart.XMin = 0.0\r\n\tchart.XMax = 1\t\t\r\n\tsteps = section.NumberOfTrays\t\r\n\txValues = chart.CreateList()\r\n\ty1Values = chart.CreateList()\t\r\n\ty2Values = chart.CreateList()\r\n\tqxValues = chart.CreateList()\r\n\tqyValues = chart.CreateList()\r\n\r\n\ty1Series = SeriesModel(\"y\", SeriesType.Line, xValues, y1Values, \"Blue\")\r\n\ty2Series = SeriesModel(\"yeq\", SeriesType.Line, xValues, y2Values, \"Green\")\t\r\n\ty3Series = SeriesModel(\"x\", SeriesType.Line, xValues, xValues, \"Black\")\t\r\n\tqSeries = SeriesModel(\"q\", SeriesType.Line, qxValues, qyValues, \"Black\")\t\r\n\t\r\n\ty1Series.DashPattern=DashPattern.Dash\r\n\ty3Series.ShowInLegend=False\r\n\tqSeries.ShowInLegend=False\r\n\r\n\t#chart.Series.Add(y1Series)\r\n\tchart.Series.Add(y2Series)\r\n\tchart.Series.Add(y3Series)\r\n\tchart.Series.Add(qSeries)\r\n\t\r\n\t\r\n\t\r\n\txValues.Add(1)\r\n\ty1Values.Add(1)\r\n\ty2Values.Add(1)\r\n\t\r\n\tyF=xD-rr/(1+rr)*(xD-xF)\r\n\t\r\n\t\r\n\tif q==0:\r\n\t\tqxValues.Add(xF)\r\n\t\tqxValues.Add(xF)\r\n\t\tqyValues.Add(xF)\r\n\t\tqyValues.Add(yF)\r\n\r\n\t\t\r\n\tfor i in range(steps):\t\t\t\t\r\n\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(i+1)+\", TOLUOL]\").ValueInSI)\r\n\t\ty1Values.Add(section.GetVariable(\"y[\"+str(i+1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(i+1)+\", TOLUOL]\").ValueInSI)\r\n\t\ty2Values.Add(section.GetVariable(\"yeq[\"+str(i+1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"yeq[\"+str(i+1)+\", TOLUOL]\").ValueInSI)\r\n\t\t\r\n\t\tx = chart.CreateList()\t\t\r\n\t\ty = chart.CreateList()\t\r\n\t\t\r\n\t\tyq=y1Values.Last();\r\n\t\t\r\n\t\tif(i<steps-1):\r\n\t\t y.Add(section.GetVariable(\"y[\"+str(i+2)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(i+2)+\", TOLUOL]\").ValueInSI)\r\n\t\t x.Add(section.GetVariable(\"x[\"+str(i+2)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(i+2)+\", TOLUOL]\").ValueInSI)\t\t\r\n\t\r\n\t\r\n\t\tx.Add(xValues.Last())\r\n\t\tx.Add(xValues.Last())\t\t\r\n\t\tif(xValues.Last()>xF):\r\n\t\t y.Add(xD-rr/(1+rr)*(xD-xValues.Last()))\r\n\t\telse:\r\n\t\t y.Add(xB+(yF-xB)/(xF-xB)*(xValues.Last()-xB))\r\n\t\t\r\n\t\ty.Add(yq)\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\tstageSeries = SeriesModel(\"S\"+str(i+1), SeriesType.Line, x, y, \"Black\")\t\t\r\n\t\tstageSeries.ShowInLegend=False\t\r\n\t\tchart.Series.Add(stageSeries)\r\n\t\r\n\txValues.Add(0.0)\r\n\ty1Values.Add(0.0)\r\n\ty2Values.Add(0.0)\r\n\t\r\n\t\r\n\t\r\n\t#Draw Top, Feed and Bot vertical lines\r\n\tfeedLineValuesX = chart.CreateList()\r\n\tfeedLineValuesY = chart.CreateList()\r\n\toperatingLineValuesX = chart.CreateList()\r\n\toperatingLineValuesY = chart.CreateList()\r\n\t\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesY.Add(0)\r\n\tfeedLineValuesY.Add(xF)\r\n\t\r\n\t#Bottom\r\n\t#xB= section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[BENZOL]\").ValueInSI+section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[TOLUOL]\").ValueInSI\r\n\t#xB=section.GetVariable(\"x[\"+str(steps)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(steps)+\", TOLUOL]\").ValueInSI\r\n\t#xD=section.GetVariable(\"y[\"+str(1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(1)+\", TOLUOL]\").ValueInSI\r\n\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(0)\r\n\t\r\n\toperatingLineValuesX.Add(xB)\t\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\t#Stripping Line\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\toperatingLineValuesX.Add(xF)\t\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\t\t\r\n\t#Rectifying Line\r\n\t\r\n\toperatingLineValuesX.Add(xF)\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(xD)\t\r\n\t\r\n\t#Top\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(0)\r\n\toperatingLineValuesY.Add(xD)\r\n\t\r\n\tfeedLine = SeriesModel(\"F\", SeriesType.Line, feedLineValuesX, feedLineValuesY, \"Black\")\t\r\n\toperatingLine = SeriesModel(\"Op\", SeriesType.Line, operatingLineValuesX, operatingLineValuesY, \"Black\")\t\r\n\t\r\n\tfeedLine.ShowInLegend=False\r\n\toperatingLine.ShowInLegend=False\r\n\t\r\n\tchart.Series.Add(feedLine)\r\n\tchart.Series.Add(operatingLine)\r\n\tchart.LegendPosition=LegendPosition.TopLeft\t\t\r\n\tshow(chart)\r\n\treturn\r\n\t\r\n\t\r\ndef plotMcCabe2(title, section, xF,xB,xD, rr, LBID):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\tchart=ChartModel(title);\r\n\tchart.YAxisTitle = \"Vapor Molar Fraction \"+LBID+\" [-]\"\r\n\tchart.XAxisTitle = \"Liquid Molar Fraction \"+LBID+\" [-]\"\r\n\tchart.YMin = 0\r\n\tchart.YMax = 1\r\n\tchart.XMin = 0\r\n\tchart.XMax = 1\t\t\r\n\tsteps = section.NumberOfTrays\t\r\n\txValues = chart.CreateList()\r\n\ty1Values = chart.CreateList()\t\r\n\ty2Values = chart.CreateList()\r\n\r\n\ty1Series = SeriesModel(\"y\", SeriesType.Line, xValues, y1Values, \"Blue\")\r\n\ty2Series = SeriesModel(\"yeq\", SeriesType.Line, xValues, y2Values, \"Green\")\t\r\n\ty3Series = SeriesModel(\"x\", SeriesType.Line, xValues, xValues, \"Black\")\t\r\n\t\r\n\ty1Series.DashPattern=DashPattern.Dash\r\n\tchart.Series.Add(y1Series)\r\n\tchart.Series.Add(y2Series)\r\n\tchart.Series.Add(y3Series)\r\n\t\r\n\t\r\n\txValues.Add(1)\r\n\ty1Values.Add(1)\r\n\ty2Values.Add(1)\r\n\t\r\n\tyF=xD-rr/(1+rr)*(xD-xF)\r\n\t\r\n\tfor i in range(steps):\t\t\t\t\r\n\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\ty1Values.Add(section.GetVariable(\"y[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\ty2Values.Add(section.GetVariable(\"yeq[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\t\r\n\t\tx = chart.CreateList()\t\t\r\n\t\ty = chart.CreateList()\t\r\n\t\t\r\n\t\tyq=y1Values.Last()\r\n\t\tif(i<steps-1):\r\n\t\t\ty.Add(section.GetVariable(\"y[\"+str(i+2)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\t\tx.Add(section.GetVariable(\"x[\"+str(i+2)+\", \"+LBID+\"]\").ValueInSI)\t\t\r\n\t\r\n\t\tx.Add(xValues.Last())\r\n\t\tx.Add(xValues.Last())\t\t\r\n\t\tif(xValues.Last()>xF):\r\n\t\t\ty.Add(xD-rr/(1+rr)*(xD-xValues.Last()))\r\n\t\telse:\r\n\t\t\ty.Add(xB+(yF-xB)/(xF-xB)*(xValues.Last()-xB))\r\n\t\ty.Add(y1Values.Last())\r\n\t\tstageSeries = SeriesModel(\"S\"+str(i+1), SeriesType.Line, x, y, \"Black\")\t\t\r\n\t\tstageSeries.ShowInLegend=False\r\n\t\tchart.Series.Add(stageSeries)\r\n\t\r\n\t\ty.Add(yq)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\txValues.Add(0.0)\r\n\ty1Values.Add(0.0)\r\n\ty2Values.Add(0.0)\r\n\t\r\n\t\r\n\t\r\n\t#Draw Top, Feed and Bot vertical lines\r\n\tfeedLineValuesX = chart.CreateList()\r\n\tfeedLineValuesY = chart.CreateList()\r\n\toperatingLineValuesX = chart.CreateList()\r\n\toperatingLineValuesY = chart.CreateList()\r\n\t\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesY.Add(0)\r\n\tfeedLineValuesY.Add(yF)\r\n\t\r\n\t#Bottom\r\n\t#xB= section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[BENZOL]\").ValueInSI+section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[TOLUOL]\").ValueInSI\r\n\t#xB=section.GetVariable(\"x[\"+str(steps)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(steps)+\", TOLUOL]\").ValueInSI\r\n\t#xD=section.GetVariable(\"y[\"+str(1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(1)+\", TOLUOL]\").ValueInSI\r\n\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(0)\r\n\t\r\n\toperatingLineValuesX.Add(xB)\t\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\t#Stripping Line\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\toperatingLineValuesX.Add(xF)\t\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\t\t\r\n\t#Rectifying Line\r\n\t\r\n\toperatingLineValuesX.Add(xF)\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(xD)\t\r\n\t\r\n\t#Top\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(0)\r\n\toperatingLineValuesY.Add(xD)\r\n\t\r\n\tfeedLine = SeriesModel(\"F\", SeriesType.Line, feedLineValuesX, feedLineValuesY, \"DarkRed\")\t\r\n\toperatingLine = SeriesModel(\"Op\", SeriesType.Line, operatingLineValuesX, operatingLineValuesY, \"DarkRed\")\t\r\n\t\r\n\tchart.Series.Add(feedLine)\r\n\tchart.Series.Add(operatingLine)\r\n\tchart.LegendPosition=LegendPosition.TopLeft\r\n\t\r\n\tshow(chart)\t\r\n\treturn\r\n\t\r\n\t\r\ndef plotSectionConcLiquid(section):\r\n\tchart=ChartModel(section.Name +\" Liq. Conc. Profile\");\r\n\tchart.YAxisTitle = \"Tray\"\r\n\tchart.XAxisTitle = \"Liquid molar fraction [-]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tchart.IsReversedYAxis=True\r\n\tchart.ShowLegend=True\r\n\tsteps = section.NumberOfTrays\t\r\n\t\r\n\tfor j in range(section.System.Components.Count):\r\n\t\tyValues = chart.CreateList()\r\n\t\txValues = chart.CreateList()\t\r\n \t\tfor i in range(steps):\t\t\r\n\t\t\tyValues.Add(i+1)\r\n\t\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", \"+section.System.Components[j].ID+\"]\").ValueInOutputUnit)\t\r\n\t\tySeries = SeriesModel(section.System.Components[j].ID, SeriesType.Line, xValues, yValues, \"Auto\")\r\n\t\tchart.Series.Add(ySeries)\r\n\t\r\n\tshow(chart)\t\r\n\treturn\r\n\t\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Hex Helper",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "5",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\ndef ColumnBuilder(name, sys, FEED, TOP, BOT, stages, feedTray, TCon,p):\t\r\n\t\r\n\tVIN = MaterialStream(FEED.Name+\"g\", sys)\r\n\tLIN = MaterialStream(FEED.Name+\"c\", sys)\r\n\tVOUT = MaterialStream(FEED.Name+\"a\", sys)\r\n\tLOUT = MaterialStream(FEED.Name+\"e\", sys)\t\r\n\tBOTREF = MaterialStream(FEED.Name+\"f\", sys)\t\r\n\tCON = MaterialStream(FEED.Name+\"b\", sys)\r\n\t\t\r\n\tVIN.CopyFrom(FEED)\t\t\r\n\tLIN.CopyFrom(FEED)\t\r\n\t\r\n\tSEC01 = TraySection(name+\"_\"+\"SEC01\",sys,stages)\r\n\tSEC01.Connect(\"VIn\", VIN)\r\n\tSEC01.Connect(\"LIn\", LIN)\r\n\tSEC01.Connect(\"VOut\", VOUT)\r\n\tSEC01.Connect(\"LOut\", LOUT)\r\n\tSEC01.ConnectFeed(FEED,feedTray)\r\n\tSEC01.MakeAdiabatic()\r\n\tSEC01.MakeIsobaric()\r\n\t\r\n\tREBSPLI = Splitter(name+\"_\"+\"REBSPLI\",sys)\r\n\tREBSPLI.Connect(\"In\", LOUT)\r\n\tREBSPLI.Connect(\"Out1\", BOTREF)\r\n\tREBSPLI.Connect(\"Out2\", BOT)\r\n\tREBSPLI.Specify(\"DP\",0, METRIC.bar)\r\n\tREBSPLI.Specify(\"K\",0.7)\r\n\t\r\n\tREB = Heater(name+\"_\"+\"REB\",sys)\r\n\tREB.Connect(\"In\", BOTREF)\r\n\tREB.Connect(\"Out\", VIN)\r\n\tREB.Specify(\"P\",p, METRIC.bar)\r\n\tREB.Specify(\"VF\",0.4)\r\n\t#REB.Specify(\"T\",175, METRIC.C)\r\n\t\r\n\tCOND = Heater(name+\"_\"+\"COND\",sys)\r\n\tCOND.Connect(\"In\", VOUT)\r\n\tCOND.Connect(\"Out\", CON)\r\n\tCOND.Specify(\"P\",p, METRIC.bar)\r\n\tCOND.Specify(\"T\",TCon, METRIC.C)\r\n\r\n\tREFSPLI = Splitter(name+\"_\"+\"REFSPLI\",sys)\r\n\tREFSPLI.Connect(\"In\", CON)\r\n\tREFSPLI.Connect(\"Out1\", LIN)\r\n\tREFSPLI.Connect(\"Out2\", TOP)\r\n\tREFSPLI.Specify(\"DP\",0, METRIC.bar)\r\n\tREFSPLI.Specify(\"K\",0.4)\r\n\t\r\n\tREBSPLI.GetVariable(\"K\").LowerBound=0.1\r\n\tREBSPLI.GetVariable(\"K\").UpperBound=0.9\r\n\r\n\tREFSPLI.GetVariable(\"K\").LowerBound=0.1\r\n\tREFSPLI.GetVariable(\"K\").UpperBound=0.9\r\n\r\n\tunits=[SEC01,COND, REFSPLI,  REBSPLI, REB]\r\n\t\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\tflowsheet= Flowsheet(\"Flow\")\r\n\tflowsheet.AddMaterialStreams(VOUT, CON,LIN, TOP, LOUT,BOTREF, VIN, BOT)\r\n\tflowsheet.AddUnits(SEC01, COND, REFSPLI, REBSPLI,REB)\r\n\tdecomp(flowsheet)\r\n\treturn flowsheet\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ColumnBuilder",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "6",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\ndef ColumnBuilder2(name, sys, FEED, TOP, BOT, stages, feedTray, TCon,p, BoilupGuess):\t\r\n\t\r\n\tVIN = MaterialStream(FEED.Name+\"g\", sys)\r\n\tLIN = MaterialStream(FEED.Name+\"c\", sys)\r\n\tVOUT = MaterialStream(FEED.Name+\"a\", sys)\r\n\tLOUT = MaterialStream(FEED.Name+\"e\", sys)\t\t\r\n\tCON = MaterialStream(FEED.Name+\"b\", sys)\r\n\t\t\r\n\tVIN.CopyFrom(FEED)\t\t\r\n\tLIN.CopyFrom(FEED)\t\r\n\t\r\n\tSEC01 = TraySection(name+\"_\"+\"SEC01\",sys,stages)\r\n\tSEC01.Connect(\"VIn\", VIN)\r\n\tSEC01.Connect(\"LIn\", LIN)\r\n\tSEC01.Connect(\"VOut\", VOUT)\r\n\tSEC01.Connect(\"LOut\", LOUT)\r\n\tSEC01.ConnectFeed(FEED,feedTray)\r\n\tSEC01.MakeAdiabatic()\r\n\tSEC01.MakeIsobaric()\r\n\tSEC01.FixStageEfficiency(1.0)\r\n\tREB = Flash(name+\"_\"+\"REB\",sys)\r\n\tREB.Connect(\"In\", LOUT)\r\n\tREB.Connect(\"Vap\", VIN)\r\n\tREB.Connect(\"Liq\", BOT)\r\n\tREB.Specify(\"P\",p, METRIC.bar)\r\n\tREB.Specify(\"VF\",BoilupGuess)\r\n\t\r\n\tCOND = Heater(name+\"_\"+\"COND\",sys)\r\n\tCOND.Connect(\"In\", VOUT)\r\n\tCOND.Connect(\"Out\", CON)\r\n\tCOND.Specify(\"P\",p, METRIC.bar)\r\n\t#COND.Specify(\"VF\",TCon, METRIC.C)\r\n\tCOND.Specify(\"VF\",0)\r\n\r\n\tREFSPLI = Splitter(name+\"_\"+\"REFSPLI\",sys)\r\n\tREFSPLI.Connect(\"In\", CON)\r\n\tREFSPLI.Connect(\"Out1\", TOP)\r\n\tREFSPLI.Connect(\"Out2\", LIN)\r\n\tREFSPLI.Specify(\"DP\",0, METRIC.bar)\r\n\tREFSPLI.Specify(\"K\",0.55)\r\n\t\r\n\tREFSPLI.GetVariable(\"K\").LowerBound=0.01\r\n\tREFSPLI.GetVariable(\"K\").UpperBound=0.99\r\n\r\n\tREB.GetVariable(\"VF\").LowerBound=0.01\r\n\tREB.GetVariable(\"VF\").UpperBound=0.99\r\n\t\r\n\r\n\tunits=[SEC01,COND, REFSPLI, REB]\r\n\t\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\tfor u in units:\r\n\t u.Initialize()\r\n\t #u.SolveSequential()\r\n\r\n\r\n\r\n\tflowsheet= Flowsheet(\"Flow\")\r\n\tflowsheet.AddMaterialStreams(VOUT, CON,LIN, TOP, LOUT, VIN, BOT)\r\n\tflowsheet.AddUnits(SEC01, COND, REFSPLI, REB)\r\n\tdecomp(flowsheet)\r\n\treturn flowsheet\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ColumnBuilder2",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "7",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "# Python Scripting Language Input File\r\ndef ColumnBuilder3(name, sys, FEED, TOP, BOT, stages, feedTray,pTop, RefluxRatio, BoilupFraction):\t\r\n\t\r\n\tVIN = MaterialStream(name+\"e\", sys)\r\n\tLIN = MaterialStream(name+\"c\", sys)\r\n\tVOUT = MaterialStream(name+\"a\", sys)\r\n\tLOUT = MaterialStream(name+\"d\", sys)\t\t\r\n\tCON = MaterialStream(name+\"b\", sys)\r\n\t\t\r\n\tVIN.CopyFrom(BOT)\t\t\r\n\tLIN.CopyFrom(TOP)\t\r\n\t\r\n\tSEC01 = TraySection(name,sys,stages)\r\n\tSEC01.Connect(\"VIn\", VIN)\r\n\tSEC01.Connect(\"LIn\", LIN)\r\n\tSEC01.Connect(\"VOut\", VOUT)\r\n\tSEC01.Connect(\"LOut\", LOUT)\r\n\tSEC01.ConnectFeed(FEED,feedTray)\r\n\tSEC01.MakeAdiabatic()\r\n\tSEC01.MakeIsobaric()\r\n\tSEC01.FixStageEfficiency(1.0)\r\n\t\r\n\tREB = Flash(name+\"\"+\"REB\",sys)\\\r\n\t\t.Connect(\"In\", LOUT)\\\r\n\t\t.Connect(\"Vap\", VIN)\\\r\n\t\t.Connect(\"Liq\", BOT)\\\r\n\t\t.Specify(\"P\",pTop, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",BoilupFraction)\r\n\t\r\n\tCOND = Heater(name+\"\"+\"CON\",sys)\\\r\n\t\t.Connect(\"In\", VOUT)\\\r\n\t\t.Connect(\"Out\", CON)\\\r\n\t\t.Specify(\"P\",pTop, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0)\r\n\r\n\tREFSPLI = Splitter(name+\"\"+\"SPL\",sys)\\\r\n\t\t.Connect(\"In\", CON)\\\r\n\t\t.Connect(\"Out1\", TOP)\\\r\n\t\t.Connect(\"Out2\", LIN)\\\r\n\t\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t\t.Specify(\"K\",1-RefluxRatio/(1.0+RefluxRatio))\r\n\t\r\n\tREFSPLI.GetVariable(\"K\").LowerBound=0.01\r\n\tREFSPLI.GetVariable(\"K\").UpperBound=0.99\r\n\r\n\tREB.GetVariable(\"VF\").LowerBound=0.01\r\n\tREB.GetVariable(\"VF\").UpperBound=0.99\r\n\t\r\n\tSEC01.Initialize()\r\n\t\r\n\tunits=[COND, REFSPLI, REB]\r\n\tfor i in range(2):\r\n\t for u in units:\r\n\t  u.Initialize()\r\n  \r\n\tSEC01.Solve()\r\n\t\r\n\tfor i in range(2):\r\n\t for u in units:\r\n\t  u.Initialize()\r\n\t\t  \r\n\tflowsheet= Flowsheet(\"Column Builder Kettle-Type\")\r\n\tflowsheet.AddMaterialStreams(VOUT, CON,LIN, TOP, LOUT, VIN, BOT)\r\n\tflowsheet.AddUnits(SEC01, COND, REFSPLI, REB)\r\n\tdecomp(flowsheet)\r\n\treturn flowsheet\r\n\r\n",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ColumnBuilder3",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "8",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def PhaseEnvelope(stream, fromP, toP,steps):\r\n\tchart=ChartModel(stream.Name +\" Phase Envelope\");\r\n\tchart.YAxisTitle = \"Pressure [\"+str(stream.GetVariable(\"p\").OutputUnit)+\"]\"\r\n\tchart.XAxisTitle = \"Temperature [\"+str(stream.GetVariable(\"T\").OutputUnit)+\"]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\t\r\n\txLValues = chart.CreateList()\t\r\n\txVValues = chart.CreateList()\t\r\n\txMValues = chart.CreateList()\t\r\n\t\r\n \tdeltaP=(toP-fromP)/float(steps)\r\n \tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n\tstream.Specify(\"VF\", 0)\r\n\tstream.Unspecify(\"T\")\r\n\t\r\n \tfor i in range(steps+1):\r\n \t\tp=fromP+deltaP*i \t\t\r\n \t\tstream.Specify(\"p\", p, METRIC.bar)\r\n \t\tdecomp(flowsheet)\r\n \t\tyValues.Add(p)\r\n \t\txLValues.Add(stream.GetVariable(\"T\").ValueInOutputUnit)  \t\t\r\n  \t\r\n  \tstream.Specify(\"VF\", 0.5)\r\n\tstream.Unspecify(\"T\")\r\n\tstream.FlashPZ()\r\n\t\r\n \tfor i in range(steps+1):\r\n \t\tp=fromP+deltaP*i \t\t\r\n \t\tstream.Specify(\"p\", p, METRIC.bar)\r\n \t\tdecomp(flowsheet)\r\n \t\t#yValues.Add(p)\r\n \t\txMValues.Add(stream.GetVariable(\"T\").ValueInOutputUnit)  \t\t\r\n\r\n\r\n  \tstream.Specify(\"VF\", 1)\r\n\tstream.Unspecify(\"T\")\r\n\tstream.FlashPZ()\r\n\t\r\n \tfor i in range(steps+1):\r\n \t\tp=fromP+deltaP*i \t\t\r\n \t\tstream.Specify(\"p\", p, METRIC.bar)\r\n \t\tdecomp(flowsheet)\r\n \t\t#yValues.Add(p)\r\n \t\txVValues.Add(stream.GetVariable(\"T\").ValueInOutputUnit)  \t\t\r\n\r\n\r\n\t\t\r\n \txLSeries = SeriesModel(\"VF=0\", SeriesType.Line, xLValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(xLSeries)\t\r\n\txMSeries = SeriesModel(\"VF=0.5\", SeriesType.Line, xMValues, yValues, \"Green\")\t\r\n\tchart.Series.Add(xMSeries)\t\r\n\txVSeries = SeriesModel(\"VF=1\", SeriesType.Line, xVValues, yValues, \"Blue\")\t\r\n\tchart.Series.Add(xVSeries)\t\r\n\t\r\n\tchart.LegendPosition=LegendPosition.TopLeft\r\n\tshow(chart)\r\n \treturn \r\n\r\ndef TXYChart(stream, c1, c2,steps):\r\n\tchart=ChartModel(\"TXY \"+c1.ID+\"/\"+c2.ID+ \" (p=\"+str(stream.GetVariable(\"p\").ValueInOutputUnit)+\" \"+str(stream.GetVariable(\"p\").OutputUnit)+\")\");\r\n\tchart.YAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.XAxisTitle = \"Molar Fraction \"+c1.ID\r\n\t#chart.AutoScaleX = True\r\n\tchart.XMin=0\r\n\tchart.XMax=1\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(stream)\r\n \t\r\n \tstream.Specify(\"VF\",0.0)\r\n\tfor j in stream.System.Components:\r\n\t stream.Specify(\"n[\"+j.ID+\"]\", 0,  SI.mol/SI.s)\r\n\r\n \tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s) \t\r\n \t\tstream.FlashPZ()\r\n \t\tdecomp(flowsheet)\r\n \t\txValues.Add(x1)\r\n \t\tyValues.Add(stream.GetVariable(\"T\").ValueInOutputUnit)  \t\t\r\n  \t\t\r\n\tstream.Specify(\"VF\",1.0)\r\n\tstream.FlashPZ()\r\n\tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\tstream.FlashPZ()\r\n \t\tdecomp(flowsheet) \t\t\r\n \t\ty2Values.Add(stream.GetVariable(\"T\").ValueInOutputUnit) \r\n \t\t\r\n \tySeries = SeriesModel(\"T Boiling\", SeriesType.Line, xValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"T Dew\", SeriesType.Line, xValues, y2Values, \"Blue\")\t\r\n\tchart.Series.Add(y2Series)\t\r\n\t\r\n\tshow(chart)\r\n \treturn  \r\n \t\r\n \t\r\ndef PXYChart(stream, c1, c2,steps):\r\n\tchart=ChartModel(\"PXY \"+c1.ID+\"/\"+c2.ID + \" (T=\"+str(stream.GetVariable(\"T\").ValueInOutputUnit)+\" \"+str(stream.GetVariable(\"T\").OutputUnit)+\")\" );\r\n\tchart.YAxisTitle = \"Pressure [mbar]\"\r\n\tchart.XAxisTitle = \"Molar Fraction \"+c1.ID\r\n\t#chart.AutoScaleX = True\r\n\tchart.XMin=0\r\n\tchart.XMax=1\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n\tstream.Specify(\"VF\",0.0)\r\n\tfor j in stream.System.Components:\r\n\t stream.Specify(\"n[\"+j.ID+\"]\", 0,  SI.mol/SI.s)\r\n\r\n \tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\t\r\n \t\tdecomp(flowsheet)\r\n \t\txValues.Add(x1)\r\n \t\tyValues.Add(stream.GetVariable(\"p\").ValueInOutputUnit)  \t\t\r\n  \t\t\r\n\tstream.Specify(\"VF\",1.0)\r\n\t\r\n\tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\t\r\n \t\tdecomp(flowsheet)\r\n \t\t#xValues.Add(x1)\r\n \t\ty2Values.Add(stream.GetVariable(\"p\").ValueInOutputUnit)  \r\n \t\t\r\n \tySeries = SeriesModel(\"P Boiling\", SeriesType.Line, xValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"P Dew\", SeriesType.Line, xValues, y2Values, \"Blue\")\t\r\n\tchart.Series.Add(y2Series)\t\r\n\t\r\n\tshow(chart)\r\n \treturn  \r\n \t\r\ndef XYChart(stream, c1, c2,steps):\r\n\tchart=ChartModel(\"XY \"+c1.ID+\"/\"+c2.ID + \" (p=\"+str(stream.GetVariable(\"p\").ValueInOutputUnit)+\" \"+str(stream.GetVariable(\"p\").OutputUnit)+\")\" );\r\n\tchart.YAxisTitle = \"Vapour Molar Fraction \"+c1.ID\r\n\tchart.XAxisTitle = \"Liquid Molar Fraction \"+c1.ID\r\n\t#chart.AutoScaleX = True\r\n\tchart.XMin=0\r\n\tchart.XMax=1\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\ty3Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tx2Values = chart.CreateList()\r\n\tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n\tstream.Specify(\"VF\",0.0)\r\n\t\r\n\tfor j in stream.System.Components:\r\n\t stream.Specify(\"n[\"+j.ID+\"]\", 0,  SI.mol/SI.s)\r\n\t\r\n \tfor i in range(steps):\r\n \t\tx1=i*1.0/float(steps-1)\r\n \t\tx2=1.0-x1\r\n \t\tstream.Specify(\"n[\"+c1.ID+\"]\", x1,  SI.mol/SI.s)\r\n \t\tstream.Specify(\"n[\"+c2.ID+\"]\", x2,  SI.mol/SI.s)\r\n \t\tstream.FlashPZ()\r\n \t\tdecomp(flowsheet)\r\n \t\txValues.Add(x1)\r\n \t\tx2Values.Add(x2)\r\n \t\tyValues.Add(stream.GetVariable(\"xL[\"+c1.ID+\"]\").ValueInOutputUnit)  \t\t\r\n \t\ty2Values.Add(stream.GetVariable(\"xV[\"+c1.ID+\"]\").ValueInOutputUnit)  \t\r\n \t\ty3Values.Add(stream.GetVariable(\"xV[\"+c2.ID+\"]\").ValueInOutputUnit)  \t\r\n \t\t\r\n \tySeries = SeriesModel(\"Diagonal\", SeriesType.Line, xValues, yValues, \"DimGray\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"y[\"+c1.ID+\"]\", SeriesType.Line, xValues, y2Values, \"Red\")\t\r\n\tchart.Series.Add(y2Series)\t\r\n\ty3Series = SeriesModel(\"y[\"+c2.ID+\"]\", SeriesType.Line, x2Values, y3Values, \"Blue\")\t\r\n\tchart.Series.Add(y3Series)\t\r\n\r\n\tshow(chart)\r\n \treturn   \t\r\n \t\r\ndef HTChart(stream, c1, T1, T2, steps):\r\n\tchart=ChartModel(\"HT-Diagram \"+c1.ID);\r\n\tchart.XAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.YAxisTitle = \"Specific Enthalpy [\"+str(stream.GetVariable(\"hV[\"+c1.ID+\"]\").OutputUnit)+\"]\" \r\n\t#chart.AutoScaleX = True\r\n\tchart.XMin=T1\r\n\tchart.XMax=T2\r\n\tchart.AutoScaleY = True\t\t\r\n\tyValues = chart.CreateList()\r\n\ty2Values = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tflowsheet= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(S01)\r\n\t \t \t\r\n \tfor i in range(steps):\r\n \t\tT=T1 + i*(T2-T1)/float(steps-1) \t\t\r\n \t\tstream.Specify(\"T\", T,  METRIC.C) \t\t\r\n \t\tdecomp(flowsheet)\r\n \t\txValues.Add(T)\r\n \t\tyValues.Add(stream.GetVariable(\"hV[\"+c1.ID+\"]\").ValueInOutputUnit)  \t\t\r\n \t\ty2Values.Add(stream.GetVariable(\"hL[\"+c1.ID+\"]\").ValueInOutputUnit)  \t\t\r\n  \t\t\r\n \tySeries = SeriesModel(\"HV\", SeriesType.Line, xValues, yValues, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\r\n\t\r\n\ty2Series = SeriesModel(\"HL\", SeriesType.Line, xValues, y2Values, \"Blue\")\t\r\n\tchart.Series.Add(y2Series)\t\t\r\n\tshow(chart)\r\n \treturn   \t",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ThermoUtilityFunctions",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "9",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def printRateBasedSection(sec,simple=False):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfElements\r\n\t\r\n\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('Stage', 'TL','TI','TV', 'P', 'DP', 'Q', 'E', 'L' ,'V','A')\r\n\tprint '{0:>10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format('',sec.GetVariable(\"TL[1]\").OutputUnit,sec.GetVariable(\"TI[1]\").OutputUnit,sec.GetVariable(\"TV[1]\").OutputUnit,sec.GetVariable(\"P[1]\").OutputUnit,sec.GetVariable(\"DP[1]\").OutputUnit,sec.GetVariable(\"Q[1]\").OutputUnit,sec.GetVariable(\"E[1]\").OutputUnit, sec.GetVariable(\"L[1]\").OutputUnit,sec.GetVariable(\"V[1]\").OutputUnit,sec.GetVariable(\"aeff[1]\").OutputUnit)\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10}'.format(j, sec.GetVariable(\"TL[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"TI[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"TV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"P[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"DP[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"Q[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"E[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"L[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"V[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"aeff[\"+j+\"]\").ValueInOutputUnit)\t\r\n\tprint ''\r\n\t\r\n\tif(simple):\r\n\t return\r\n\t \r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('x['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'x['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('xI['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'xI['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('yI['+c.ID+']'))))\t\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'yI['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\tprint '{0:10} {1:10} '.format('Stage', ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format('y['+c.ID+']'))))\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10}'.format(j, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'y['+ j +', '+c.ID+']' ).ValueInSI ) ) ))\r\n\t\r\n\t\r\n\r\n\treturn\t\r\ndef printRateBasedSectionBeta(sec):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfElements\r\n\tprint ''\t\t\r\n\tprint sec.Name\t\t\r\n\tprint 'Mass Transfer coefficients'\r\n\tprint ''\t\r\n\ttrays=sec.NumberOfElements\r\n\tfor tray in range(1,trays+1):\r\n\t print '{0:10} {1:10} '.format('Stage '+str(tray), ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format(c.ID))))\r\n\t for c1 in sec.System.Components:\t \r\n\t  print '{0:10} {1:10}'.format(c1.ID, ' '.join(sec.System.Components.Select(lambda c: '{0:10}'.format( sec.GetVariable( 'BetaV['+str(tray)+', '+ c1.ID +', '+c.ID+']' ).ValueInSI ) ) ))\t\r\n\t print ''\t\t\r\n\treturn\t\r\n\t\r\ndef printRateBasedSectionHydro(sec):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\ttrays=sec.NumberOfElements\r\n\t\r\n\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10} {11:10}'.format('Stage', 'P', 'DP', 'L' ,'V','uV','ReV','aspec','aeff','d','h','dhyd')\r\n\tprint '{0:>10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10} {11:10}'.format('',sec.GetVariable(\"P[1]\").OutputUnit,sec.GetVariable(\"DP[1]\").OutputUnit,sec.GetVariable(\"L[1]\").OutputUnit,sec.GetVariable(\"V[1]\").OutputUnit,sec.GetVariable(\"uV[1]\").OutputUnit,sec.GetVariable(\"ReV[1]\").OutputUnit,sec.GetVariable(\"aspec[1]\").OutputUnit,sec.GetVariable(\"aeff[1]\").OutputUnit,sec.GetVariable(\"d[1]\").OutputUnit,sec.GetVariable(\"h[1]\").OutputUnit,sec.GetVariable(\"dhyd[1]\").OutputUnit)\r\n\tfor i in range(trays):\r\n\t\tj=str(i+1)\r\n\t\tprint '{0:10} {1:10} {2:10} {3:10} {4:10} {5:10} {6:10} {7:10} {8:10} {9:10} {10:10} {11:10}'.format(j, sec.GetVariable(\"P[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"DP[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"L[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"V[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"uV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"ReV[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"aspec[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"aeff[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"d[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"h[\"+j+\"]\").ValueInOutputUnit,sec.GetVariable(\"dhyd[\"+j+\"]\").ValueInOutputUnit)\t\r\n\tprint ''\t\r\n\t\r\n\treturn",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "RateBasedUtilityFunctions",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "10",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def EnableLinesearch():\r\n\t_newton.DoLinesearch=True\r\n\treturn\t \r\n\t\r\ndef DisableLinesearch():\r\n\t_newton.DoLinesearch=False\r\n\treturn\t \r\n\t\r\ndef EnableScaling():\r\n\t_newton.DoScaling=True\r\n\treturn\t \r\n\t\r\ndef DisableScaling():\r\n\t_newton.DoScaling=False\r\n\treturn\t \r\n\t\r\ndef MaxIter(iter):\r\n\t_newton.MaximumIterations=iter;\r\n\treturn\t \r\n\t\r\ndef SetSolverOptions(maxiter, tolerance, minlambda, linesearch):\r\n\t_decomp.NewtonMaxIter=maxiter\r\n\t_decomp.NewtonTolerance=tolerance\r\n\t_decomp.DoLinesearch=linesearch\r\n\t_decomp.MinNewtonLambda=minlambda\r\n\treturn\r\ndef ResetSolverOptions():\r\n\t_decomp.NewtonMaxIter=50\r\n\t_decomp.NewtonTolerance=1e-6\r\n\t_decomp.DoLinesearch=True\r\n\t_decomp.MinNewtonLambda=0.2\r\n\treturn\t\r\n\r\ndef StopOnError():\r\n\tif(_newton.IsConverged):\r\n\t return\r\n\telse:\r\n\t stop()\r\n\treturn\t  \r\n\t\r\ndef printTitle(msg):\r\n\tprint 'ââââââââââââââââââââââââââââââââââââââââââââââââââââ'\r\n\tprint 'â'+msg.center(50)+'â' \r\n\tprint 'ââââââââââââââââââââââââââââââââââââââââââââââââââââ'\r\n\treturn\r\n \r\ndef printUnderline(msg): \r\n\tprint ' '+msg.center(50)+' ' \r\n\tprint 'ââââââââââââââââââââââââââââââââââââââââââââââââââââ'\r\n\treturn\t ",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "CommonUtilityFunctions",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "11",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def transform(a, b, c):\r\n\tx = 0.5 * (2 * b + c) / (a + b + c)\r\n\ty = Math.Sqrt(3) * 0.5 * (c) / (a + b + c)\r\n\treturn (x,y)\r\n\r\ndef drawTernaryChartGrid(chart):\r\n\tfor j in range(1,5):\t         \r\n\t\ti= j/5.0\r\n\t\t(x1,y1) =transform(i, 0.0, 1 - i);\r\n\t\t(x2,y2) =transform(i, 1 - i, 0);\r\n\t\tyh = chart.CreateList()\t\r\n\t\txh = chart.CreateList()\t\r\n\t\txh.Add(x1)\r\n\t\txh.Add(x2)\r\n\t\tyh.Add(y1)\r\n\t\tyh.Add(y2)\r\n\t\tline = SeriesModel(\"h1\"+str(j), SeriesType.Line, xh, yh, \"DimGray\")\t\r\n\t\tline.DashPattern=DashPattern.Dotted\r\n\t\tline.Thickness=1.0\r\n\t\tline.ShowInLegend=False\r\n\t\tchart.Series.Add(line)\r\n\tfor j in range(1,5):\t         \r\n\t\ti= j/5.0\r\n\t\t(x1,y1) =transform(0, i, 1 - i);\r\n\t\t(x2,y2) =transform(1 - i, i, 0);\r\n\t\tyh = chart.CreateList()\t\r\n\t\txh = chart.CreateList()\t\r\n\t\txh.Add(x1)\r\n\t\txh.Add(x2)\r\n\t\tyh.Add(y1)\r\n\t\tyh.Add(y2)\r\n\t\tline = SeriesModel(\"h2\"+str(j), SeriesType.Line, xh, yh, \"DimGray\")\t\r\n\t\tline.DashPattern=DashPattern.Dotted\r\n\t\tline.Thickness=1.0\r\n\t\tline.ShowInLegend=False\r\n\t\tchart.Series.Add(line)\r\n\tfor j in range(1,5):\t         \r\n\t\ti= j/5.0\r\n\t\t(x1,y1) =transform(1 - i, 0, i);\r\n\t\t(x2,y2) =transform(0, 1 - i, i);\r\n\t\tyh = chart.CreateList()\t\r\n\t\txh = chart.CreateList()\t\r\n\t\txh.Add(x1)\r\n\t\txh.Add(x2)\r\n\t\tyh.Add(y1)\r\n\t\tyh.Add(y2)\r\n\t\tline = SeriesModel(\"h2\"+str(j), SeriesType.Line, xh, yh, \"DimGray\")\t\r\n\t\tline.DashPattern=DashPattern.Dotted\r\n\t\tline.Thickness=1.0\r\n\t\tline.ShowInLegend=False\r\n\t\tchart.Series.Add(line)\r\n\treturn\r\ndef drawTernaryChartFrame(chart,stream):\r\n\tyb = chart.CreateList()\t\r\n\txb = chart.CreateList()\t\t\r\n\t(x,y) = transform(1.0, 0.0, 0.0) \t\r\n\txb.Add(x)\r\n\tyb.Add(y)\r\n\t(x,y) = transform(0.0, 1.0, 0.0)\r\n\txb.Add(x)\r\n\tyb.Add(y)\r\n\t(x,y) = transform(0.0, 0.0, 1.0)\r\n\txb.Add(x)\r\n\tyb.Add(y)\r\n\t(x,y) = transform(1.0, 0.0, 0.0)\r\n\txb.Add(x)\r\n\tyb.Add(y)\t \t\r\n \tborder = SeriesModel(\"Border\", SeriesType.Line, xb, yb, \"Black\")\t\r\n \tborder.ShowInLegend=False\r\n\tchart.Series.Add(border)\t\r\n\tc1=SeriesModel(stream.System.Components[0].ID, SeriesType.Scatter, xb[0], yb[0], \"Red\")\r\n\tc1.ShowInLegend=True\r\n\tc2=SeriesModel(stream.System.Components[1].ID, SeriesType.Scatter, xb[1], yb[1], \"Green\")\r\n\tc2.ShowInLegend=True\r\n\tc3=SeriesModel(stream.System.Components[2].ID, SeriesType.Scatter, xb[2], yb[2], \"Blue\")\r\n\tc3.ShowInLegend=True\r\n\tchart.Series.Add(c1)\t\r\n\tchart.Series.Add(c2)\t\r\n\tchart.Series.Add(c3)\t\r\n\treturn\r\n\t\r\ndef integrateResidueCurve(chart,stream, x0,y0,z0,dir):\r\n\txl = chart.CreateList()\t\r\n\tyl = chart.CreateList()\t\r\n\tzl = chart.CreateList()\r\n\txl.Add(x0)\r\n\tyl.Add(y0)\r\n\tzl.Add(z0)\r\n\r\n\tx=x0\r\n\ty=y0\r\n\tz=z0\r\n\tflowsheet= Flowsheet(\"RCM\").AddMaterialStreams(S01)\r\n \r\n \tdt0=0.1\r\n\tfor step in range(50):\t \r\n\t stream.Mixed.ComponentMolarflow[0].ValueInSI=x\r\n\t stream.Mixed.ComponentMolarflow[1].ValueInSI=y\r\n\t stream.Mixed.ComponentMolarflow[2].ValueInSI=z\t \r\n\t decomp(flowsheet)\r\n\t K1=stream.KValues[0].ValueInSI\r\n\t K2=stream.KValues[1].ValueInSI\r\n\t K3=stream.KValues[2].ValueInSI\r\n\t dt=dir*dt0\r\n\t dx= x*(1-K1)*dt\r\n\t dy= y*(1-K2)*dt\r\n\t dz= z*(1-K3)*dt\r\n\t x=x+dx\r\n\t y=y+dy\r\n\t z=z+dz\r\n\t x= min(1,max(0,x))\r\n\t y= min(1,max(0,y))\r\n\t z= min(1,max(0,z))\r\n\t #s=x+y+z\t\r\n\t #x=x/s\r\n\t #y=y/s\r\n\t #z=z/s\t \t \r\n\t xl.Add(x)\r\n\t yl.Add(y)\r\n\t zl.Add(z)\r\n\t #print(\"(x, y, z)=\"+str(x)+\", \"+str(y)+\", \"+str(z))\r\n\t ds=abs(dx)+abs(dy)+abs(dz)\r\n\t if(ds>0):\r\n\t  dt0=min(1,0.01/ds)\r\n\t else:\r\n\t  dt0=0.1\r\n\t if ds < 1e-10:\r\n\t  break\r\n\t\r\n\txs = chart.CreateList()\t\r\n\tys = chart.CreateList()\t\r\n\tfor j in range(xl.Count):\r\n\t (a,b) = transform(xl[j],yl[j],zl[j])\r\n\t xs.Add(a)\r\n\t ys.Add(b)\r\n\treturn (xs,ys)\r\n\t\r\n\t\r\ndef ResidueCurvesMap(stream, curves):\r\n\tchart=ChartModel(\"Residue Curve Map [\"+stream.System.Components[0].ID+\"/\"+stream.System.Components[1].ID+\"/\"+stream.System.Components[2].ID+\"]\");\r\n\tchart.YAxisTitle = \"\"\r\n\tchart.XAxisTitle = \"\"\r\n\tchart.AutoScaleX = False\r\n\tchart.AutoScaleY = False\r\n\tchart.YMin=-0.1\r\n\tchart.YMax=0.9\r\n\tchart.XMin=-0.1\r\n\tchart.XMax=1.1\r\n\t_decomp.SuppressLogging=True\r\n\tdrawTernaryChartFrame(chart, stream)\r\n\tdrawTernaryChartGrid(chart)\r\n\tfor i in range(1,curves):\t\t\r\n\t\tx = 1.0 - i/(float)(curves)\r\n\t\ty = 0.5 - x/2.0\r\n\t\tz = 0.5 - x/2.0\r\n\t\t(xl,yl) = integrateResidueCurve(chart, stream, x,y,z,1)\t\t\r\n\t\tcurve = SeriesModel(\"curve1\"+str(i), SeriesType.Line, xl, yl, \"Black\")\t\t\t\r\n\t\tcurve.ShowInLegend=False\r\n\t\tchart.Series.Add(curve)\r\n\t\tprint(\".\")\r\n\t\tx = 1.0 - i/(float)(curves)\r\n\t\ty = 0.5 - x/2.0\r\n\t\tz = 0.5 - x/2.0\r\n\t\t(xl,yl) = integrateResidueCurve(chart, stream, x,y,z,-1)\t\t\r\n\t\tcurve = SeriesModel(\"curve2\"+str(i), SeriesType.Line, xl, yl, \"Black\")\t\r\n\t\tcurve.ShowInLegend=False\r\n\t\tchart.Series.Add(curve)\r\n\t\tprint(\".\")\r\n\tfor i in range(1,curves):\t\t\t\t\r\n\t\ty = 1.0 - i/(float)(curves)\r\n\t\tx = 0.5 - y/2.0\r\n\t\tz = 0.5 - y/2.0\r\n\t\t(xl,yl) = integrateResidueCurve(chart, stream, x,y,z,1)\t\t\r\n\t\tcurve = SeriesModel(\"curve3\"+str(i), SeriesType.Line, xl, yl, \"Black\")\t\r\n\t\tcurve.ShowInLegend=False\r\n\t\tchart.Series.Add(curve)\r\n\t\tprint(\".\")\r\n\t\ty = 1.0 - i/(float)(curves)\r\n\t\tx = 0.5 - y/2.0\r\n\t\tz = 0.5 - y/2.0\r\n\t\t(xl,yl) = integrateResidueCurve(chart, stream, x,y,z,-1)\t\t\r\n\t\tcurve = SeriesModel(\"curve4\"+str(i), SeriesType.Line, xl, yl, \"Black\")\t\r\n\t\tcurve.ShowInLegend=False\r\n\t\tchart.Series.Add(curve)\r\n\t\tprint(\".\")\r\n\tfor i in range(1,curves):\t\t\t\t\r\n\t\tz = 1.0 - i/(float)(curves)\r\n\t\tx = 0.5 - z/2.0\r\n\t\ty = 0.5 - z/2.0\r\n\t\t(xl,yl) = integrateResidueCurve(chart, stream, x,y,z,1)\t\t\r\n\t\tcurve = SeriesModel(\"curve5\"+str(i), SeriesType.Line, xl, yl, \"Black\")\t\r\n\t\tcurve.ShowInLegend=False\r\n\t\tchart.Series.Add(curve)\r\n\t\tprint(\".\")\r\n\t\tz = 1.0 - i/(float)(curves)\r\n\t\tx = 0.5 - z/2.0\r\n\t\ty = 0.5 - z/2.0\r\n\t\t(xl,yl) = integrateResidueCurve(chart, stream, x,y,z,-1)\t\t\r\n\t\tcurve = SeriesModel(\"curve6\"+str(i), SeriesType.Line, xl, yl, \"Black\")\t\r\n\t\tcurve.ShowInLegend=False\r\n\t\tchart.Series.Add(curve)\r\n\t\tprint(\".\")\r\n\t_decomp.SuppressLogging=False\r\n\tshow(chart)\r\n \treturn ",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "TernaryCharts",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "12",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def plotHengstebeck(title, section, xF,xB,xD, rr, LBID,xmin,xmax,ymin,ymax,yEq):\r\n\tclr.AddReference(\"System.Core\")\r\n\timport System\r\n\tclr.ImportExtensions(System.Linq)\r\n\tchart=ChartModel(title);\r\n\tchart.YAxisTitle = \"Vapor Molar Fraction \"+LBID+\" [-]\"\r\n\tchart.XAxisTitle = \"Liquid Molar Fraction \"+LBID+\" [-]\"\r\n\tchart.YMin = ymin\r\n\tchart.YMax = ymax\r\n\tchart.XMin = xmin\r\n\tchart.XMax = xmax\t\t\r\n\tsteps = section.NumberOfTrays\t\r\n\txValues = chart.CreateList()\r\n\ty1Values = chart.CreateList()\t\r\n\ty2Values = chart.CreateList()\r\n\r\n\ty1Series = SeriesModel(\"y\", SeriesType.Line, xValues, y1Values, \"Blue\")\r\n\ty2Series = SeriesModel(\"y*(calc)\", SeriesType.Line, xValues, y2Values, \"OliveDrab\")\t\r\n\ty3Series = SeriesModel(\"x\", SeriesType.Line, xValues, xValues, \"DimGray\")\t\r\n\ty1Series.Thickness=2.0\r\n\ty2Series.Thickness=2.0\r\n\ty3Series.Thickness=2.0\r\n\ty1Series.DashPattern=DashPattern.Dash\r\n\t#chart.Series.Add(y1Series)\r\n\t#chart.Series.Add(y2Series)\r\n\tchart.Series.Add(y3Series)\r\n\t\r\n\t\r\n\txEqValues = chart.CreateList()\r\n\tyEqValues = chart.CreateList()\t\t\r\n\tfor i in range(len(yEq)):\r\n\t x=i/(float)(len(yEq)-1)\r\n\t y=yEq[i]\t \r\n\t xEqValues.Add(x)\r\n\t yEqValues.Add(y)\r\n\t print(str(x)+\", \"+str(y))\r\n\t \r\n\tyEqSeries= SeriesModel(\"y*\", SeriesType.Line, xEqValues, yEqValues, \"OliveDrab\")\r\n\tyEqSeries.ShowMarker=True\t\r\n\tchart.Series.Add(yEqSeries)\r\n\t\r\n\t\r\n\txValues.Add(1)\r\n\ty1Values.Add(1)\r\n\ty2Values.Add(1)\r\n\t\r\n\tyF=xD-rr/(1+rr)*(xD-xF)\r\n\t\r\n\t#Distillate line\r\n\t\r\n\tx = chart.CreateList()\t\t\r\n\ty = chart.CreateList()\t\r\n\tx.Add(xD)\r\n\ty.Add(xD)\r\n\tx.Add(section.GetVariable(\"x[1, \"+LBID+\"]\").ValueInSI)\r\n\ty.Add(xD)\r\n\tdistSeries = SeriesModel(\"D\", SeriesType.Line, x, y, \"Black\")\t\t\r\n\tdistSeries.ShowInLegend=False\r\n\tdistSeries.Thickness=3.0\r\n\tchart.Series.Add(distSeries)\r\n\t\r\n\t\r\n\tfor i in range(steps):\t\t\t\t\r\n\t\txValues.Add(section.GetVariable(\"x[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\ty1Values.Add(section.GetVariable(\"y[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\ty2Values.Add(section.GetVariable(\"yeq[\"+str(i+1)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\t\r\n\t\tx = chart.CreateList()\t\t\r\n\t\ty = chart.CreateList()\t\r\n\t\t\r\n\t\tyq=y1Values.Last()\r\n\t\tif(i<steps-1):\r\n\t\t\ty.Add(section.GetVariable(\"y[\"+str(i+2)+\", \"+LBID+\"]\").ValueInSI)\r\n\t\t\tx.Add(section.GetVariable(\"x[\"+str(i+2)+\", \"+LBID+\"]\").ValueInSI)\t\t\r\n\t\r\n\t\tx.Add(xValues.Last())\r\n\t\tx.Add(xValues.Last())\t\t\r\n\t\tif(xValues.Last()>xF):\r\n\t\t\ty.Add(xD-rr/(1+rr)*(xD-xValues.Last()))\r\n\t\telse:\r\n\t\t\ty.Add(xB+(yF-xB)/(xF-xB)*(xValues.Last()-xB))\r\n\t\ty.Add(y1Values.Last())\r\n\t\tcolor=\"Black\"\r\n\t\t\r\n\t\tif(i==10):\r\n\t\t color=\"Red\"\r\n\t\t \r\n\t\tstageSeries = SeriesModel(\"S\"+str(i+1), SeriesType.Line, x, y, color)\t\t\r\n\t\tstageSeries.ShowInLegend=False\r\n\t\tstageSeries.Thickness=3.0\r\n\t\tchart.Series.Add(stageSeries)\r\n\t\r\n\t\ty.Add(yq)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\txValues.Add(0.0)\r\n\ty1Values.Add(0.0)\r\n\ty2Values.Add(0.0)\r\n\t\r\n\t\r\n\t\r\n\t#Draw Top, Feed and Bot vertical lines\r\n\tfeedLineValuesX = chart.CreateList()\r\n\tfeedLineValuesY = chart.CreateList()\r\n\toperatingLineValuesX = chart.CreateList()\r\n\toperatingLineValuesY = chart.CreateList()\r\n\t\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesX.Add(xF)\r\n\tfeedLineValuesY.Add(0)\r\n\tfeedLineValuesY.Add(yF)\r\n\t\r\n\t#Bottom\r\n\t#xB= section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[BENZOL]\").ValueInSI+section.FindMaterialPort(\"VIn\").Streams[0].GetVariable(\"xV[TOLUOL]\").ValueInSI\r\n\t#xB=section.GetVariable(\"x[\"+str(steps)+\", BENZOL]\").ValueInSI+section.GetVariable(\"x[\"+str(steps)+\", TOLUOL]\").ValueInSI\r\n\t#xD=section.GetVariable(\"y[\"+str(1)+\", BENZOL]\").ValueInSI+section.GetVariable(\"y[\"+str(1)+\", TOLUOL]\").ValueInSI\r\n\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(0)\r\n\t\r\n\toperatingLineValuesX.Add(xB)\t\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\t#Stripping Line\r\n\toperatingLineValuesX.Add(xB)\r\n\toperatingLineValuesY.Add(xB)\r\n\t\r\n\toperatingLineValuesX.Add(xF)\t\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\t\t\r\n\t#Rectifying Line\r\n\t\r\n\toperatingLineValuesX.Add(xF)\r\n\toperatingLineValuesY.Add(xD-rr/(1+rr)*(xD-xF))\r\n\t\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(xD)\t\r\n\t\r\n\t#Top\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesX.Add(xD)\r\n\toperatingLineValuesY.Add(0)\r\n\toperatingLineValuesY.Add(xD)\r\n\t\r\n\tfeedLine = SeriesModel(\"F\", SeriesType.Line, feedLineValuesX, feedLineValuesY, \"DimGray\")\t\r\n\toperatingLine = SeriesModel(\"Op\", SeriesType.Line, operatingLineValuesX, operatingLineValuesY, \"DimGray\")\t\r\n\toperatingLine.ShowInLegend=False\r\n\tfeedLine.ShowInLegend=False\r\n\tchart.Series.Add(feedLine)\r\n\tchart.Series.Add(operatingLine)\r\n\tchart.LegendPosition=LegendPosition.TopLeft\r\n\t\r\n\tshow(chart)\t\r\n\treturn",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "HengstebeckCharts",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  },
                  {
                    "$id": "13",
                    "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                    "SourceCode": "def plotTProfile(section):\r\n\tchart=ChartModel(\"\");\r\n\tchart.YAxisTitle = \"Tray\"\r\n\tchart.XAxisTitle = \"Temperature [Â°C]\"\r\n\tchart.AutoScaleX = True\r\n\tchart.AutoScaleY = True\r\n\tchart.IsReversedYAxis=True\r\n\tsteps = section.NumberOfTrays\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\t#chart.XMin = 0\r\n\t#chart.XMax = 160\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"T[\"+str(i+1)+\"]\").ValueInOutputUnit)\r\n\t\r\n\tySeries = SeriesModel(\"T\", SeriesType.Line, xValues, yValues, \"Black\")\r\n\t\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\tyValues = chart.CreateList()\r\n\txValues = chart.CreateList()\t\r\n\tfor i in range(steps):\t\t\r\n\t\tyValues.Add(i+1)\r\n\t\txValues.Add(section.GetVariable(\"TV[\"+str(i+1)+\"]\").ValueInOutputUnit)\r\n\t\r\n\tySeries = SeriesModel(\"TV\", SeriesType.Line, xValues, yValues, \"OliveDrab\")\t\r\n\tchart.Series.Add(ySeries)\r\n\t\r\n\t\r\n\tshow(chart)\r\n\treturn",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "ColumnCharts",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": false,
                    "IconName": "LanguagePythonText",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "3"
                    }
                  }
                ]
              },
              "IsExpanded": false,
              "IconName": "Folder",
              "IsRenaming": false,
              "Parent": {
                "$ref": "2"
              }
            },
            {
              "$id": "14",
              "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
              "Id": "00000000-0000-0000-0000-000000000000",
              "Name": "ChemSep",
              "Children": {
                "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                "$values": [
                  {
                    "$id": "15",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "PressureSwingDistillation",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "16",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Acetone\"))\r\nsys.AddComponent(Database.FindComponent(\"Methanol\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nreport(sys)\r\n\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Acetone]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Methanol]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\nprintTitle(\"Show existence of azeotrope\")\r\n\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Specify(\"p\", 10, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nprintTitle(\"Show binary VLE\")\r\nXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Specify(\"p\", 10, METRIC.bar)\r\nXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Unspecify(\"p\")\r\nS01.Specify(\"T\", 100, METRIC.C)\r\nPXYChart(S01, sys.Components[0], sys.Components[1],21)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Thermo_AcetoneMethanol",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "15"
                          }
                        },
                        {
                          "$id": "17",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nprintTitle('Set up Thermodynamics')\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Acetone\"))\r\nsys.AddComponent(Database.FindComponent(\"Methanol\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\nreport(sys)\r\n\r\nprintTitle('Low pressure column')\r\nResetSolverOptions()\r\n\r\nFeed = MaterialStream(\"Feed\", sys)\\\r\n\t\t.Specify(\"T\",43, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Acetone]\",270, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Methanol]\", 270, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nRecycle = MaterialStream(\"Recycle\", sys)\\\r\n\t\t.Specify(\"T\",54, METRIC.C)\\\r\n\t\t.Specify(\"p\",10, METRIC.bar)\\\r\n\t\t.Specify(\"n[Acetone]\",10, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Methanol]\", 170, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\t\t\r\n\r\nS01 = MaterialStream(\"S01\", sys)\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\\\r\n\t\t.Init(\"T\", 51, METRIC.C)\\\r\n\t\t.Init(\"p\", 1, METRIC.bar)\\\r\n\t\t.Init(\"n[Acetone]\",50, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[Methanol]\", 50, SI.kmol/SI.h)\\\r\n\t\t\r\nS04 = MaterialStream(\"S04\", sys)\r\nS05 = MaterialStream(\"S05\", sys)\\\r\n\t\t.Init(\"T\", 61, METRIC.C)\\\r\n\t\t.Init(\"p\", 1, METRIC.bar)\\\r\n\t\t.Init(\"n[Acetone]\",2, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[Methanol]\", 100, SI.kmol/SI.h)\\\r\n\r\nMethanol = MaterialStream(\"Methanol\", sys)\r\n\r\nD1 = MaterialStream(\"D1\", sys)\r\n\r\n\r\nC1 = TraySection(\"C1\",sys,52)\\\r\n\t.Connect(\"VIn\", S05)\\\r\n\t.Connect(\"LIn\", S03)\\\r\n\t.Connect(\"VOut\", S01)\\\r\n\t.Connect(\"LOut\", S04)\\\r\n\t.ConnectFeed(Feed,37)\\\r\n\t.ConnectFeed(Recycle,41)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.FixStageEfficiency(1.0)\\\r\n\t.Initialize()\r\n\t\r\nREB1 = Flash(\"REB1\",sys)\\\r\n\t.Connect(\"In\", S04)\\\r\n\t.Connect(\"Vap\", S05)\\\r\n\t.Connect(\"Liq\", Methanol)\\\r\n\t.Specify(\"P\", 1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0.7)\\\r\n\t.Initialize()\r\n\r\nCOND1 = Heater(\"COND1\",sys)\\\r\n\t.Connect(\"In\", S01)\\\r\n\t.Connect(\"Out\", S02)\\\r\n\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0)\\\r\n\t.Initialize()\r\n\r\nRefluxRatio1=2.36\r\nREFSPL1 = Splitter(\"REFSPL1\",sys)\\\r\n\t.Connect(\"In\", S02)\\\r\n\t.Connect(\"Out1\", S03)\\\r\n\t.Connect(\"Out2\", D1)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",RefluxRatio1/(1.0+RefluxRatio1))\\\r\n\t.Initialize()\r\n\r\n#C1.Solve()\r\n#REB1.Solve()\r\n#COND1.Solve()\r\n#REFSPL1.Solve()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t\t\t.AddMaterialStreams(Feed, Recycle, S01,S02,S03,D1,S04,S05, Methanol)\\\r\n\t\t\t.AddUnits(C1, REB1, COND1, REFSPL1)\r\n\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Add High pressure column\")\r\n\r\nS06 = MaterialStream(\"S06\", sys)\r\nS07 = MaterialStream(\"S07\", sys)\r\nS08 = MaterialStream(\"S08\", sys)\\\r\n\t\t.Init(\"T\", 54, METRIC.C)\\\r\n\t\t.Init(\"p\", 10, METRIC.bar)\\\r\n\t\t.Init(\"n[Acetone]\",50, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[Methanol]\", 50, SI.kmol/SI.h)\\\r\n\r\nS09 = MaterialStream(\"S09\", sys)\r\n\r\nS10 = MaterialStream(\"S10\", sys)\\\r\n\t\t.Init(\"T\", 140, METRIC.C)\\\r\n\t\t.Init(\"p\", 10, METRIC.bar)\\\r\n\t\t.Init(\"n[Acetone]\",100, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[Methanol]\", 2, SI.kmol/SI.h)\r\n\t\t\r\nAcetone = MaterialStream(\"Acetone\", sys)\t\t\r\nD2 = MaterialStream(\"D2\", sys)\t\t\r\n\r\nC2 = TraySection(\"C2\",sys,61)\\\r\n\t.Connect(\"VIn\", S10)\\\r\n\t.Connect(\"LIn\", S08)\\\r\n\t.Connect(\"VOut\", S06)\\\r\n\t.Connect(\"LOut\", S09)\\\r\n\t.ConnectFeed(D1,41)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.FixStageEfficiency(1.0)\\\r\n\t.Initialize()\r\n\t\r\nREB2 = Flash(\"REB2\",sys)\\\r\n\t.Connect(\"In\", S09)\\\r\n\t.Connect(\"Vap\", S10)\\\r\n\t.Connect(\"Liq\", Acetone)\\\r\n\t.Specify(\"P\",10, METRIC.bar)\\\r\n\t.Specify(\"VF\",0.7)\\\r\n\t.Initialize()\r\n\r\nCOND2 = Heater(\"COND2\",sys)\\\r\n\t.Connect(\"In\", S06)\\\r\n\t.Connect(\"Out\", S07)\\\r\n\t.Specify(\"P\",10, METRIC.bar)\\\r\n\t.Specify(\"VF\",0)\\\r\n\t.Initialize()\r\n\r\nRefluxRatio2=3.11\r\nREFSPL2 = Splitter(\"REFSPL2\",sys)\\\r\n\t.Connect(\"In\", S07)\\\r\n\t.Connect(\"Out1\", D2)\\\r\n\t.Connect(\"Out2\", S08)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",1-RefluxRatio2/(1.0+RefluxRatio2))\\\r\n\t.Initialize()\r\n\r\nC2.Solve()\r\nREB2.Solve()\r\nCOND2.Solve()\r\nREFSPL2.Solve()\r\n#C2.Solve()\r\n\r\n#COND2.Solve()\r\n#REFSPL2.Solve()\r\n#REB2.Solve()\r\n#C2.Solve()\r\n\r\nflowsheet.AddMaterialStreams(S06,S07,S08,D2,S09,S10,Acetone)\\\r\n\t\t\t.AddUnits(C2, REB2, COND2, REFSPL2)\r\n\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Close Recycle\")\r\nRecycle.Unfix()\r\nVALVE01 = Heater(\"VALVE01\",sys)\\\r\n\t.Connect(\"In\", D2)\\\r\n\t.Connect(\"Out\", Recycle)\\\r\n\t.Specify(\"DP\",9, METRIC.bar)\\\r\n\t.Specify(\"Q\",0, SI.kW)\\\r\n\t.Initialize()\\\r\n\t.Solve()\r\n\t\r\nflowsheet.AddUnits(VALVE01)\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Reach Specifications\")\r\n\r\nREB1.Unspecify(\"VF\")\r\nREB2.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(Methanol.GetVariable(\"x[Methanol]\").IsEqualTo(0.995))\r\nflowsheet.AddDesignSpecification(Acetone.GetVariable(\"x[Acetone]\").IsEqualTo(0.994))\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Print Results\")\r\nprint(\"C1 - Low Pressure\")\r\nreport(COND1.GetVariable(\"Q\"))\r\nreport(REB1.GetVariable(\"Q\"))\r\nprint(\"C2 - High Pressure\")\r\nreport(COND2.GetVariable(\"Q\"))\r\nreport(REB2.GetVariable(\"Q\"))\r\n\r\nreport(flowsheet,8)\r\n\r\n\r\nC1.SetIcon(IconTypes.ColumnSection, 400,260).SetColors(\"Green\",\"White\")\r\nREB1.SetIcon(IconTypes.TwoPhaseFlash, 510,600)\r\nCOND1.SetIcon(IconTypes.Heater, 480,120)\r\nREFSPL1.SetIcon(IconTypes.Splitter, 650,380)\r\nC2.SetIcon(IconTypes.ColumnSection, 890,250).SetColors(\"OrangeRed\",\"White\")\r\nREB2.SetIcon(IconTypes.TwoPhaseFlash, 1020,600)\r\nCOND2.SetIcon(IconTypes.Heater, 990,120)\r\nREFSPL2.SetIcon(IconTypes.Splitter, 1170,120)\r\nVALVE01.SetIcon(IconTypes.Breaker, 1270,20)\r\nFeed.SetIcon(IconTypes.Stream, 110,390)\r\nMethanol.SetIcon(IconTypes.Stream, 800,650)\r\nAcetone.SetIcon(IconTypes.Stream, 1230,650)\r\n\r\n#flowsheet.Name=\"Pressure-Swing Distillation (Luyben)\"\r\n\r\ntext1=TextElement(\"Pressure-Swing Distillation (Luyben)\",24,\"Blue\")\\\r\n\t.SetPosition(10, 20)\\\r\n\t.SetSize(800,80)\\\r\n\t.SetColors(\"White\",\"GhostWhite\")\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(10,730)\\\r\n\t.SetSize(800,400)\r\n\t\r\n\t\r\nflowsheet.AddDocumentation(text1,table1)\r\n\r\n\r\n#show(flowsheet)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "PressureSwingDistillation",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "15"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "18",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "AzeotropicDistillation",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "19",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nDatabase.ListComponents(\"cyclohexane\")\r\nDatabase.ListComponents(\"phenol\")\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Methylcyclohexane\").RenameID(\"MCH\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\").RenameID(\"TOLUOL\"))\r\nsys.AddComponent(Database.FindComponent(\"Phenol\").RenameID(\"PHENOL\"))\r\nDatabase.FillBIPs(sys)\r\nNRTL = sys.GetBinaryParameters(\"NRTL\")\r\nNRTL.SetParam(\"B\",sys.Components[0], sys.Components[1],-43.2404 )\r\nNRTL.SetParam(\"B\",sys.Components[1], sys.Components[0],134.062  )\r\nNRTL.SetParamSymmetric(\"C\",sys.Components[0], sys.Components[1],0.3 )\r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nreport(sys)\r\n\r\nSetSolverOptions(50,1e-6,0.1,True)\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[MCH]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[TOLUOL]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[PHENOL]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\nprintTitle(\"Show existence of azeotrope\")\r\n\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[1],21)\r\nXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[1], sys.Components[2],21)\r\nXYChart(S01, sys.Components[1], sys.Components[2],21)\r\n\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[2],21)\r\nXYChart(S01, sys.Components[0], sys.Components[2],21)\r\n\r\n\r\n#S01.Unspecify(\"p\")\r\n#S01.Specify(\"T\", 100, METRIC.C)\r\n#PXYChart(S01, sys.Components[0], sys.Components[1],21)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Thermo",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "18"
                          }
                        },
                        {
                          "$id": "20",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\nrun(Items[\"Projects|Scripts|TernaryCharts\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTLRP\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Methylcyclohexane\").RenameID(\"MCH\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\").RenameID(\"TOLUOL\"))\r\nsys.AddComponent(Database.FindComponent(\"Phenol\").RenameID(\"PHENOL\"))\r\nDatabase.FillBIPs(sys)\r\nNRTL = sys.GetBinaryParameters(\"NRTL\")\r\nNRTL.SetParam(\"B\",sys.Components[0], sys.Components[1],-43.2404*1.9872 )\r\nNRTL.SetParam(\"B\",sys.Components[1], sys.Components[0],134.062*1.9872  )\r\nNRTL.SetParamSymmetric(\"C\",sys.Components[0], sys.Components[1],0.3 )\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[MCH]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[TOLUOL]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[PHENOL]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\n#report(flowsheet)\r\n\r\nprintTitle(\"Show existence of azeotrope\")\r\n\r\n\r\nResidueCurvesMap(S01, 10)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "RCM Test",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "18"
                          }
                        },
                        {
                          "$id": "21",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nprintTitle('Set upt Thermodynamics')\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Methylcyclohexane\").RenameID(\"MCH\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\").RenameID(\"TOLUOL\"))\r\nsys.AddComponent(Database.FindComponent(\"Phenol\").RenameID(\"PHENOL\"))\r\nDatabase.FillBIPs(sys)\r\nNRTL = sys.GetBinaryParameters(\"NRTL\")\r\nNRTL.SetParam(\"B\",sys.Components[0], sys.Components[1],-43.2404 )\r\nNRTL.SetParam(\"B\",sys.Components[1], sys.Components[0],134.062 )\r\nNRTL.SetParamSymmetric(\"C\",sys.Components[0], sys.Components[1],0.3 )\r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n#report(sys)\r\n\r\nprintTitle('Azeotropic column')\r\n\r\n\r\nFeed = MaterialStream(\"Feed\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[MCH]\",90, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[TOLUOL]\", 90, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[PHENOL]\", 0, SI.kmol/SI.s)\\\r\n\t\t.FlashPT()\r\n\r\nRecycle = MaterialStream(\"Recycle\", sys)\\\r\n\t\t.Specify(\"T\",151, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[MCH]\",0, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[TOLUOL]\", 0.1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[PHENOL]\", 250, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\t\t\r\n\r\nS01 = MaterialStream(\"S01\", sys)\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\\\r\n\t\t.Init(\"T\", 101, METRIC.C)\\\r\n\t\t.Init(\"p\", 1, METRIC.bar)\\\r\n\t\t.Init(\"n[MCH]\",719, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[TOLUOL]\", 6, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[PHENOL]\", 0.1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\t\t\r\nS04 = MaterialStream(\"S04\", sys)\r\nS05 = MaterialStream(\"S05\", sys)\\\r\n\t\t.Init(\"T\", 150, METRIC.C)\\\r\n\t\t.Init(\"p\", 1, METRIC.bar)\\\r\n\t\t.Init(\"n[MCH]\",0, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[TOLUOL]\", 450, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[PHENOL]\", 179, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nMCH = MaterialStream(\"MCH\", sys)\r\nB1 = MaterialStream(\"B1\", sys)\r\n\r\nC1 = TraySection(\"C1\",sys,39)\\\r\n\t.Connect(\"VIn\", S05)\\\r\n\t.Connect(\"LIn\", S03)\\\r\n\t.Connect(\"VOut\", S01)\\\r\n\t.Connect(\"LOut\", S04)\\\r\n\t.ConnectFeed(Feed,25)\\\r\n\t.ConnectFeed(Recycle,10)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.FixStageEfficiency(1.0)\\\r\n\t.Initialize()\r\n\t\r\nREB1 = Flash(\"REB1\",sys)\\\r\n\t.Connect(\"In\", S04)\\\r\n\t.Connect(\"Vap\", S05)\\\r\n\t.Connect(\"Liq\", B1)\\\r\n\t.Specify(\"P\", 1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0.65)\\\r\n\t.Initialize()\r\n\r\nCOND1 = Heater(\"COND1\",sys)\\\r\n\t.Connect(\"In\", S01)\\\r\n\t.Connect(\"Out\", S02)\\\r\n\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0)\\\r\n\t.Initialize()\r\n\r\nRefluxRatio1=4.7\r\nREFSPL1 = Splitter(\"REFSPL1\",sys)\\\r\n\t.Connect(\"In\", S02)\\\r\n\t.Connect(\"Out1\", MCH)\\\r\n\t.Connect(\"Out2\", S03)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",1-RefluxRatio1/(1.0+RefluxRatio1))\\\r\n\t.Initialize()\r\n\r\nC1.Initialize()\r\nREB1.Solve()\r\nCOND1.Solve()\r\nREFSPL1.Solve()\r\n\r\nC1.Initialize()\r\nREB1.Solve()\r\nCOND1.Solve()\r\nREFSPL1.Solve()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t\t\t.AddMaterialStreams(Feed, Recycle, S01,S02,S03,B1,S04,S05, MCH)\\\r\n\t\t\t.AddUnits(C1, REB1, COND1, REFSPL1)\r\n#SetSolverOptions(50,1e-6,False)\r\nSetSolverOptions(50,1e-6,0.2,True)\r\ndecomp(flowsheet)\r\n#SetSolverOptions(50,1e-6,True)\r\n#stop()\r\n\r\nprintTitle(\"Stripping column\")\r\n\r\nS06 = MaterialStream(\"S06\", sys)\r\nS07 = MaterialStream(\"S07\", sys)\r\nS08 = MaterialStream(\"S08\", sys)\\\r\n\t\t.Init(\"T\", 110, METRIC.C)\\\r\n\t\t.Init(\"p\", 1, METRIC.bar)\\\r\n\t\t.Init(\"n[MCH]\",0, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[TOLUOL]\", 400, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[PHENOL]\", 10, SI.kmol/SI.h)\r\n\t\t\r\nS09 = MaterialStream(\"S09\", sys)\r\n\r\nS10 = MaterialStream(\"S10\", sys)\\\r\n\t\t.Init(\"T\", 180, METRIC.C)\\\r\n\t\t.Init(\"p\", 1, METRIC.bar)\\\r\n\t\t.Init(\"n[MCH]\",0, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[TOLUOL]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[PHENOL]\", 300, SI.kmol/SI.h)\r\n\t\t\r\nToluol = MaterialStream(\"Toluol\", sys)\t\t\r\nB2 = MaterialStream(\"B2\", sys)\t\t\r\n\r\nC2 = TraySection(\"C2\",sys,19)\\\r\n\t.Connect(\"VIn\", S10)\\\r\n\t.Connect(\"LIn\", S08)\\\r\n\t.Connect(\"VOut\", S06)\\\r\n\t.Connect(\"LOut\", S09)\\\r\n\t.ConnectFeed(B1,12)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.FixStageEfficiency(1.0)\\\r\n\t.Initialize()\r\n\t\r\nREB2 = Flash(\"REB2\",sys)\\\r\n\t.Connect(\"In\", S09)\\\r\n\t.Connect(\"Vap\", S10)\\\r\n\t.Connect(\"Liq\", B2)\\\r\n\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0.4)\\\r\n\t.Initialize()\r\n\r\nCOND2 = Heater(\"COND2\",sys)\\\r\n\t.Connect(\"In\", S06)\\\r\n\t.Connect(\"Out\", S07)\\\r\n\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0)\\\r\n\t.Initialize()\r\n\r\nRefluxRatio2=2.9\r\nREFSPL2 = Splitter(\"REFSPL2\",sys)\\\r\n\t.Connect(\"In\", S07)\\\r\n\t.Connect(\"Out1\", Toluol)\\\r\n\t.Connect(\"Out2\", S08)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",0.47)\\\r\n\t.Initialize()\r\n\r\n\r\nC2.Solve()\r\nREB2.Solve()\r\nC2.Solve()\r\nCOND2.Solve()\r\nREFSPL2.Solve()\r\n#C2.Solve()\r\n#REB2.Solve()\r\n#C2.Solve()\r\n#COND2.Solve()\r\n#REFSPL2.Solve()\r\n\r\nflowsheet.AddMaterialStreams(S06,S07,S08,B2,S09,S10,Toluol)\\\r\n\t\t\t.AddUnits(C2, REB2, COND2, REFSPL2)\r\n\r\ndecomp(flowsheet)\r\n\r\n\r\n\r\nprintTitle(\"Reach Specifications\")\r\n\r\nREB1.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(MCH.GetVariable(\"x[MCH]\").IsEqualTo(0.99))\r\ndecomp(flowsheet)\r\n\r\n#REFSPL1.GetVariable(\"K\").UnfixAndSetBounds(0.05,0.95)\r\n#flowsheet.AddDesignSpecification(B2.GetVariable(\"x[PHENOL]\").IsEqualTo(0.99))\r\n#decomp(flowsheet)\r\n\r\n\r\nREB2.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(Toluol.GetVariable(\"x[TOLUOL]\").IsEqualTo(0.999))\r\ndecomp(flowsheet)\r\n\r\n#stop()\r\n\r\n\r\nprintTitle(\"Close Recycle\")\r\n\r\n#RefluxRatio1=8\r\n#REFSPL1.Specify(\"K\",RefluxRatio1/(1.0+RefluxRatio1))\r\n#decomp(flowsheet)\r\n\r\nRecycle.Unfix()\r\nMakeup = MaterialStream(\"Makeup\", sys)\\\r\n\t\t.Specify(\"T\",104, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[MCH]\",0, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[TOLUOL]\", 0, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[PHENOL]\", 0.02, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\t\t\r\n\t\t\r\nMIX01 = Mixer(\"MIX01\",sys)\\\r\n\t.Connect(\"In\", B2)\\\r\n\t.Connect(\"In\", Makeup)\\\r\n\t.Connect(\"Out\", Recycle)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Initialize()\\\r\n\t.Solve()\r\n\t\r\nflowsheet.AddMaterialStreams(Makeup)\\\r\n\t\t.AddUnits(MIX01)\r\nrecycleFlowInkmolh=250\t\t\r\nflowsheet.AddDesignSpecification(Recycle.GetVariable(\"n\").IsEqualTo(recycleFlowInkmolh/3.6))\r\nSetSolverOptions(50,1e-6,0.1,True)\r\ndecomp(flowsheet)\r\n\r\n#decomp(flowsheet)\r\n\r\nprintTitle(\"Print Results\")\r\nprint(\"C1 - Low Pressure\")\r\nreport(COND1.GetVariable(\"Q\"))\r\nreport(REB1.GetVariable(\"Q\"))\r\nprint(\"C2 - High Pressure\")\r\nreport(COND2.GetVariable(\"Q\"))\r\nreport(REB2.GetVariable(\"Q\"))\r\n\r\nreport(flowsheet,8)\r\n\r\nC1.SetIcon(IconTypes.ColumnSection, 400,260).SetColors(\"Green\",\"White\")\r\nREB1.SetIcon(IconTypes.TwoPhaseFlash, 510,600)\r\nCOND1.SetIcon(IconTypes.Heater, 480,120)\r\nREFSPL1.SetIcon(IconTypes.Splitter, 610,190)\r\nC2.SetIcon(IconTypes.ColumnSection, 890,250).SetColors(\"OrangeRed\",\"White\")\r\nREB2.SetIcon(IconTypes.TwoPhaseFlash, 1020,600)\r\nCOND2.SetIcon(IconTypes.Heater, 990,120)\r\nREFSPL2.SetIcon(IconTypes.Splitter, 1170,120)\r\nMIX01.SetIcon(IconTypes.Mixer, 270,650)\r\nFeed.SetIcon(IconTypes.Stream, 110,390)\r\nMCH.SetIcon(IconTypes.Stream, 790,110)\r\nToluol.SetIcon(IconTypes.Stream, 1360,40)\r\nMakeup.SetIcon(IconTypes.Stream, 110,530)\r\n\r\n\r\nflowsheet.Name=\"Azeotropic Distillation (ChemSep)\"\r\n\r\ntext1=TextElement(\"Azeotropic Distillation (ChemSep)\",24,\"Blue\")\\\r\n\t.SetPosition(10, 20)\\\r\n\t.SetSize(800,80)\\\r\n\t.SetColors(\"White\",\"GhostWhite\")\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(10,730)\\\r\n\t.SetSize(800,400)\r\n\t\r\n\t\r\nflowsheet.AddDocumentation(text1,table1)\r\n\r\n\r\nshow(flowsheet)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "AzeotropicDistillation",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "18"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "22",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "AcetoneChloroformMethanol",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "23",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\nrun(Items[\"Projects|Scripts|TernaryCharts\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Acetone\"))\r\nsys.AddComponent(Database.FindComponent(\"Methanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Chloroform\"))\r\nDatabase.FillBIPs(sys)\r\nNRTL = sys.GetBinaryParameters(\"NRTL\")\r\nNRTL.SetParam(\"B\",sys.Components[0], sys.Components[1],-43.2404 )\r\nNRTL.SetParam(\"B\",sys.Components[1], sys.Components[0],134.062  )\r\nNRTL.SetParamSymmetric(\"C\",sys.Components[0], sys.Components[1],0.3 )\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Acetone]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Chloroform]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Methanol]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\n\r\n#printTitle(\"RCM at Constant Pressure\")\r\n#ResidueCurvesMap(S01, 10)\r\n#report(flowsheet)\r\n#XYChart(S01, sys.Components[0], sys.Components[1],21)\r\n#XYChart(S01, sys.Components[0], sys.Components[2],21)\r\n#XYChart(S01, sys.Components[1], sys.Components[2],21)\r\n\r\nprintTitle(\"RCM at Constant Temperature\")\r\nS01.Specify(\"VF\",0)\\\r\n\t.Specify(\"T\",300, SI.K)\\\r\n\t.Unspecify(\"p\")\t\r\ndecomp(flowsheet)\r\nResidueCurvesMap(S01, 10)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "RCM",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "22"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "24",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "CumeneProcess",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "25",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\t\r\n\t\t\r\nsys.AddComponent(Database.FindComponent(\"Benzene\").RenameID(\"BENZENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Propylene\").RenameID(\"PROPYLEN\"))\r\nsys.AddComponent(Database.FindComponent(\"Propane\").RenameID(\"PROPANE\"))\r\nsys.AddComponent(Database.FindComponent(\"Cumene\").RenameID(\"CUMOL\"))\r\nsys.AddComponent(Database.FindComponent(\"P-diisopropylbenzene\").RenameID(\"DIPB\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nreport(sys)\r\n\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[BENZENE]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[PROPYLEN]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[PROPANE]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[CUMOL]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[DIPB]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\nprintTitle(\"Show existence of azeotrope\")\r\n\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\n#TXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Specify(\"p\", 10, METRIC.bar)\r\n#TXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nprintTitle(\"Show binary VLE\")\r\nXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nXYChart(S01, sys.Components[0], sys.Components[3],21)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Thermo",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "24"
                          }
                        },
                        {
                          "$id": "26",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|Hex Helper\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ColumnBuilder2\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nprint '*** |==============================================|'\t\r\nprint '*** |                                              |'  \r\nprint '*** |             Cumol Process Example            |'\r\nprint '*** |                                              |'  \r\nprint '*** | Benzene is reacted with Propylene to form    |'\r\nprint '*** | Cumene. Due to an unwanted side reaction     |'\r\nprint '*** | DIPB may form.                               |'\r\nprint '*** |                                              |'\r\nprint '*** | The example is taken from Luyben 2010.       |'\r\nprint '*** |                                              |'\r\nprint '*** |==============================================|'\r\n\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\t\t\t\r\nsys.AddComponent(Database.FindComponent(\"Benzene\").RenameID(\"BENZENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Propylene\").RenameID(\"PROPYLEN\"))\r\nsys.AddComponent(Database.FindComponent(\"Propane\").RenameID(\"PROPANE\"))\r\nsys.AddComponent(Database.FindComponent(\"Cumene\").RenameID(\"CUMOL\"))\r\nsys.AddComponent(Database.FindComponent(\"P-diisopropylbenzene\").RenameID(\"DIPB\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n#report(sys)\r\n\r\nsys.VariableFactory.SetTemperatureLimits(253,850)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MolarFlow, SI.kmol/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.VolumeFlow, SI.cum/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, METRIC.C)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFraction, METRIC.weightpercent)\r\n#report(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\t\t\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\t\t\\\r\n\t\t.Specify(\"p\",25, METRIC.bar)\t\t\\\r\n\t\t.Specify(\"n\",104.2, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[BENZENE]\",1)\t\t\\\r\n\t\t.Specify(\"x[PROPYLEN]\",0)\t\t\\\r\n\t\t.Specify(\"x[PROPANE]\",0)\t\t\\\r\n\t\t.Specify(\"x[CUMOL]\",0)\t\t\t\\\r\n\t\t.Init(\"x[DIPB]\",0)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\n\r\nS03 = MaterialStream(\"S03\", sys)\\\r\n\t\t.Specify(\"T\",26, METRIC.C)\\\r\n\t\t.Specify(\"p\",25, METRIC.bar)\\\r\n\t\t.Specify(\"n\",110, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[BENZENE]\",0.0)\\\r\n\t\t.Init(\"x[PROPYLEN]\",0.95)\\\r\n\t\t.Specify(\"x[PROPANE]\",0.05)\\\r\n\t\t.Specify(\"x[CUMOL]\",0)\\\r\n\t\t.Specify(\"x[DIPB]\",0)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\r\nS04 = MaterialStream(\"S04\", sys)\r\nS05 = MaterialStream(\"S05\", sys)\r\nS06 = MaterialStream(\"S06\", sys)\r\nS07 = MaterialStream(\"S07\", sys)\r\nS08 = MaterialStream(\"S08\", sys)\\\r\n\t\t.Specify(\"T\",427, METRIC.C)\\\r\n\t\t.Specify(\"p\",25, METRIC.bar)\\\r\n\t\t.Specify(\"n\",217.00, SI.kmol/SI.h)\\\r\n\t\t.Init(\"x[BENZENE]\",0.5)\\\r\n\t\t.Specify(\"x[PROPYLEN]\",0.02)\\\r\n\t\t.Specify(\"x[PROPANE]\",0.024)\\\r\n\t\t.Specify(\"x[CUMOL]\",0.45)\\\r\n\t\t.Specify(\"x[DIPB]\",0)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\r\nS09 = MaterialStream(\"S09\", sys)\r\nS10 = MaterialStream(\"S10\", sys)\r\nS11 = MaterialStream(\"S11\", sys)\r\nS12 = MaterialStream(\"S12\", sys)\r\n\r\nS13 = MaterialStream(\"S13\", sys)\t\t\\\r\n\t\t.Specify(\"T\",60, METRIC.C)\t\t\\\r\n\t\t.Specify(\"p\",1.75, METRIC.bar)\t\t\\\r\n\t\t.Specify(\"n\",102.4, SI.kmol/SI.h)\\\r\n\t\t.Init(\"x[BENZENE]\",0.956)\t\t\\\r\n\t\t.Specify(\"x[PROPYLEN]\",0.02)\t\t\\\r\n\t\t.Specify(\"x[PROPANE]\",0.024)\t\t\\\r\n\t\t.Specify(\"x[CUMOL]\",0)\t\t\t\\\r\n\t\t.Specify(\"x[DIPB]\",0)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\r\nS14 = MaterialStream(\"S14\", sys)\r\n\r\nMIX01 = Mixer(\"MIX01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"In\", S13)\\\r\n\t\t.Connect(\"Out\", S02)\\\r\n\t\t.Specify(\"P\", 25, METRIC.bar)\r\n\t\t\r\nMIX01.GetVariable(\"DP\").LowerBound=-1e9\r\nMIX01.Initialize()\r\nMIX01.Solve()\r\n\r\nMIX02 = Mixer(\"MIX02\",sys)\\\r\n\t\t.Connect(\"In\", S02)\\\r\n\t\t.Connect(\"In\", S03)\\\r\n\t\t.Connect(\"Out\", S04)\\\r\n\t\t.Specify(\"DP\",0,METRIC.bar)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\t\r\nHEAT01 = Heater(\"HEAT01\",sys)\\\r\n\t\t.Connect(\"In\", S04) \\\r\n\t\t.Connect(\"Out\", S05) \\\r\n\t\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t\t.Specify(\"T\",209, METRIC.C)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\r\n\r\nHEX01 = ShellAndTubeHeatExchanger(\"HEX01\",sys,1,5)\\\r\n\t\t.Connect(\"ShellIn\", S08)\\\r\n\t\t.Connect(\"ShellOut\", S09)\\\r\n\t\t.Connect(\"TubeIn\", S05)\\\r\n\t\t.Connect(\"TubeOut\", S06)\\\r\n\t\t.Specify(\"k\", 55, SI.W/SI.sqm/SI.K)\\\r\n\t\t.Specify(\"A\", 205, SI.sqm)\\\r\n\t\t.SetFlowPattern(FlowPattern.CounterCurrent)\\\r\n\t\t.Configure()\\\r\n\t\t.Initialize(-121,121, 0,0)\\\r\n\t\t.Solve()\r\n\t\t\r\nHEAT02 = Heater(\"HEAT02\",sys)\\\r\n\t\t.Connect(\"In\", S06) \\\r\n\t\t.Connect(\"Out\", S07) \\\r\n\t\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t\t.Specify(\"T\",360, METRIC.C)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\r\n\r\nHEAT03 = Heater(\"HEAT03\",sys)\\\r\n\t\t.Connect(\"In\", S09)\\\r\n\t\t.Connect(\"Out\", S10)\\\r\n\t\t.Specify(\"P\",1.75, METRIC.bar)\\\r\n\t\t.Specify(\"T\",90, METRIC.C)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\r\n\r\nFLASH01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S10)\\\r\n\t\t.Connect(\"Vap\", S11)\\\r\n\t\t.Connect(\"Liq\", S12)\\\r\n\t\t.Specify(\"DP\", 0, METRIC.mbar)\\\r\n\t\t.Specify(\"T\",90, METRIC.C)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\t\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t\t.AddMaterialStreams(S01, S02, S03, S04,S05, S06,S07, S08, S09,S10,S11,S12, S13)\\\r\n\t\t.AddUnits(MIX01, MIX02, HEAT01, HEX01,HEAT02, HEAT03, FLASH01)\r\n\r\nprintTitle('BASE CASE')\r\nSetSolverOptions(50,1e-6,0.2,False)\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle('CLOSING REACTOR CUT')\r\n\r\nS08.Unfix()\r\n\r\nREAC01 = BlackBoxReactor(\"REAC01\",sys, 2)\\\r\n\t\t.Connect(\"In\", S07)\\\r\n\t\t.Connect(\"Out\", S08)\\\r\n\t\t.AddStochiometry(1, \"PROPYLEN\", -1.0)\\\r\n\t\t.AddStochiometry(1, \"BENZENE\", -1.0)\\\r\n\t\t.AddStochiometry(1, \"CUMOL\", 1.0)\\\r\n\t\t.AddStochiometry(2, \"PROPYLEN\", -1.0)\\\r\n\t\t.AddStochiometry(2, \"CUMOL\", -1.0)\\\r\n\t\t.AddStochiometry(2, \"DIPB\", 1.0)\\\r\n\t\t.Specify(\"T\", 427, METRIC.C)\\\r\n\t\t.Specify(\"P\", 25, METRIC.bar)\r\n\t\t\r\nV=Variable(\"V\",1)\r\nT=REAC01.GetVariable(\"T\")\r\nCPROP=S08.GetVariable(\"x[PROPYLEN]\")\r\nCBENZ=S08.GetVariable(\"x[BENZENE]\")\r\nCCUM=S08.GetVariable(\"x[CUMOL]\")\r\nREAC01.DefineRateEquation(1,   V*1000*2.8e7*Sym.Exp(-104174/(8.31415*T))*CPROP*CBENZ)\\\r\n\t\t.DefineRateEquation(2, V*1000*2.32e9*Sym.Exp(-146742/(8.31415*T))*CPROP*CCUM)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\r\n\t\r\nflowsheet.AddUnit(REAC01)\r\ndecomp(flowsheet)\r\n\r\nprintTitle('ADDING COLUMN 1')\r\n\t\t\r\nS13d= MaterialStream(\"S13d\",sys)\r\nS13d.CopyFrom(S13)\r\n\r\nsubflow = ColumnBuilder2(\"COL1\",sys, S12, S13d, S14, 15,8, 60, 1.75,0.7)\r\nCOL1= \tsubflow.GetUnit(\"COL1_SEC01\")\r\nREFSPLI1= \tsubflow.GetUnit(\"COL1_REFSPLI\")\r\nREB1= \t\tsubflow.GetUnit(\"COL1_REB\")\r\nCOND1= \t\tsubflow.GetUnit(\"COL1_COND\")\r\n\r\nCOL1.Name=\"COL1\"\r\nREFSPLI1.Name=\"REFSPLI1\"\r\nREB1.Name=\"REB1\"\r\nCOND1.Name=\"COND1\"\r\n\r\n\r\nflowsheet.Merge(subflow)\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle('ADDING COLUMN 2')\r\n\t\t\r\nS15= MaterialStream(\"S15\",sys)\r\nS16= MaterialStream(\"S16\",sys)\r\n\r\nsubflow = ColumnBuilder2(\"COL2\",sys, S14, S15, S16, 20,12, 110, 1.0,0.75)\r\nCOL2= \tsubflow.GetUnit(\"COL2_SEC01\")\r\nREFSPLI2= \tsubflow.GetUnit(\"COL2_REFSPLI\")\r\nREB2= \t\tsubflow.GetUnit(\"COL2_REB\")\r\nCOND2= \t\tsubflow.GetUnit(\"COL2_COND\")\r\n\r\nCOL2.Name=\"COL2\"\r\nREFSPLI2.Name=\"REFSPLI2\"\r\nREB2.Name=\"REB2\"\r\nCOND2.Name=\"COND2\"\r\n\r\n\r\nflowsheet.Merge(subflow)\r\ndecomp(flowsheet)\r\n \r\n\r\nprintTitle('CALCULATING REFLUX RATIOS')\r\n\r\nrr1= Variable(\"rr1\", 0.4)\r\nrr2= Variable(\"rr2\", 0.4)\r\nrr1.BindTo((1-REFSPLI1.GetVariable(\"K\"))/Sym.Par(REFSPLI1.GetVariable(\"K\")))\r\nrr2.BindTo((1-REFSPLI2.GetVariable(\"K\"))/Sym.Par(REFSPLI2.GetVariable(\"K\")))\r\nflowsheet.Variables.Add(rr1)\r\nflowsheet.Variables.Add(rr2)\r\n\r\nprintTitle('CLOSING COLUMN CUT')\r\nREFSPLI1.Unspecify(\"K\")\r\nREB1.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(\"SPEC01\",S13d.GetVariable(\"x[BENZENE]\").IsEqualTo(0.95)  )\r\nflowsheet.AddDesignSpecification(\"SPEC02\",(S14.GetVariable(\"x[BENZENE]\")).IsEqualTo(0.001) )\r\ndecomp(flowsheet)\r\n\r\nS13.Unfix()\r\nRECY01 = Heater(\"RECY01\",sys)\\\r\n\t\t.Connect(\"In\", S13d)\\\r\n\t\t.Connect(\"Out\", S13)\\\r\n\t\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t\t.Specify(\"Q\",0, SI.kW)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\t\t\r\nflowsheet.AddUnit(RECY01)\r\nREB2.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(\"SPEC03\",S16.GetVariable(\"x[DIPB]\").IsEqualTo(0.99) )\r\ndecomp(flowsheet)\r\n\r\nV.ValueInSI=1.2\r\nX=Variable(\"X\",0.91,0,1,SI.mol/SI.mol, \"Conversion\")\r\nY=Variable(\"Y\",0.96,0,1,SI.mol/SI.mol, \"Yield\")\r\nflowsheet.Variables.Add(X)\r\nflowsheet.Variables.Add(Y)\r\nflowsheet.AddDesignSpecification(\"SPEC04\",X.IsEqualTo((S07.GetVariable(\"n[PROPYLEN]\")-S08.GetVariable(\"n[PROPYLEN]\"))/S07.GetVariable(\"n[PROPYLEN]\")) )\r\nflowsheet.AddDesignSpecification(\"SPEC05\",Y.IsEqualTo((S08.GetVariable(\"n[CUMOL]\")-S07.GetVariable(\"n[CUMOL]\"))/(S07.GetVariable(\"n[BENZENE]\")-S08.GetVariable(\"n[BENZENE]\"))) )\r\nsolve(flowsheet)\r\n\r\nreport(flowsheet,10)\r\n\r\nreport(rr1)\r\nreport(rr2)\r\nreport(REFSPLI2.GetVariable(\"K\"))\r\nreport(REB1.GetVariable(\"VF\"))\r\nreport(REB2.GetVariable(\"VF\"))\r\nreport(REB1.GetVariable(\"Q\"))\r\nreport(REB2.GetVariable(\"Q\"))\r\nreport(S14.GetVariable(\"x[BENZENE]\"))\r\nreport(S14.GetVariable(\"x[CUMOL]\"))\r\nreport(S15.GetVariable(\"x[CUMOL]\"))\r\nreport(S16.GetVariable(\"x[DIPB]\"))\r\nreport(X)\r\nreport(Y)\r\nreport(V)\r\n\r\nMIX01.SetIcon(IconTypes.Mixer, 180,240)\r\nMIX02.SetIcon(IconTypes.Mixer, 290,430)\r\nHEAT01.SetIcon(IconTypes.Heater, 410,430)\r\nHEX01.SetIcon(IconTypes.HeatExchanger, 530,430)\r\nHEAT02.SetIcon(IconTypes.Heater, 730,280)\r\nHEAT03.SetIcon(IconTypes.Heater, 620,590)\r\nFLASH01.SetIcon(IconTypes.TwoPhaseFlash, 840,590)\r\nREAC01.SetIcon(IconTypes.PFR, 830,280).SetColors(\"OrangeRed\",\"White\")\r\nCOL1.SetIcon(IconTypes.ColumnSection, 980,510)\r\nCOND1.SetIcon(IconTypes.Heater, 1080,370)\r\nREFSPLI1.SetIcon(IconTypes.Splitter, 1200,370)\r\nREB1.SetIcon(IconTypes.TwoPhaseFlash, 1110,880)\r\nCOL2.SetIcon(IconTypes.ColumnSection, 1370,710)\r\nCOND2.SetIcon(IconTypes.Heater, 1480,590)\r\nREFSPLI2.SetIcon(IconTypes.Splitter, 1610,590)\r\nREB2.SetIcon(IconTypes.TwoPhaseFlash, 1550,1060)\r\nRECY01.SetIcon(IconTypes.Breaker, 1280,290)\r\nS01.SetIcon(IconTypes.Stream, 20,240)\r\nS03.SetIcon(IconTypes.Stream, 20,430)\r\nS11.SetIcon(IconTypes.Stream, 1850,430)\r\nS15.SetIcon(IconTypes.Stream, 1850,500)\r\nS16.SetIcon(IconTypes.Stream, 1850,1140)\r\n\r\n\r\nflowsheet.Name=\"Cumene Process (Luyben)\"\r\n\r\ntext1=TextElement(\"Cumene Process (Luyben)\",24,\"Blue\")\\\r\n\t.SetPosition(10, 110)\\\r\n\t.SetSize(800,80)\\\r\n\t.SetColors(\"White\",\"Silver\")\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(10,810)\\\r\n\t.SetSize(800,600)\r\nsheet1=SpreadsheetElement(\"Results\")\\\r\n\t.SetIcon(IconTypes.Spreadsheet, 840,1010)\\\r\n\t.SetSize(400,400)\\\r\n\t.AddVariable(REB1.GetVariable(\"Q\"))\\\r\n\t.AddVariable(COND1.GetVariable(\"Q\"))\\\r\n\t.AddVariable(REB2.GetVariable(\"Q\"))\\\r\n\t.AddVariable(COND2.GetVariable(\"Q\"))\\\r\n\t.AddVariable(rr1)\\\r\n\t.AddVariable(rr2)\\\r\n\t.AddVariable(X)\\\r\n\t.AddVariable(Y)\\\r\n\r\n\r\nflowsheet.AddDocumentation(text1,table1,sheet1)\r\n\r\nshow(flowsheet)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Cumene",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "24"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "27",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Ratebased Distillation",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "28",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|RateBasedUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\t\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"NRTLRP\", \"default\")\\\r\n\t.AddComponent(Database.FindComponent(\"Methanol\").RenameID(\"METHANOL\"))\\\r\n\t.AddComponent(Database.FindComponent(\"Isopropanol\").RenameID(\"ISOPROPA\"))\\\r\n\t.AddComponent(Database.FindComponent(\"Water\").RenameID(\"WASSER\"))\r\nDatabase.FillBIPs(sys)\r\n\r\n#Manually add diffusion coefficients \r\nDVIJ0= DiffusionCoefficients(sys)\\\r\n\t.SetParamSymmetric(\"A\", sys.Components[0], sys.Components[1], 7.68300000E-06)\\\r\n\t.SetParamSymmetric(\"A\", sys.Components[0], sys.Components[2], 1.82900000E-05)\\\r\n\t.SetParamSymmetric(\"A\", sys.Components[1], sys.Components[2],  1.19300000E-05)\r\n\t\r\nsys.BinaryParameters.Add(DVIJ0)   \r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, SI.kg/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MolarFlow, SI.mol/SI.s)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.VolumeFlow, SI.cum/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, METRIC.C)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.mbar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\n\r\nreport(sys)\r\n\r\n#Scaling of the axial discretization. M is the number of repetitions\r\nM=3\r\nN1=3*M\r\nN2=5*M\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t.Specify(\"T\",60, METRIC.C)\\\r\n\t.Specify(\"p\",920, METRIC.mbar)\\\r\n\t.Specify(\"n[METHANOL]\",5.3427, SI.mol/SI.s)\\\r\n\t.Specify(\"n[ISOPROPA]\",2.4285, SI.mol/SI.s)\\\r\n\t.Specify(\"n[WASSER]\",1.9428, SI.mol/SI.s)\\\r\n\t.FlashPT()\r\n\r\nS03 = MaterialStream(\"S03\", sys)\r\nS04 = MaterialStream(\"S04\", sys)\r\nS05 = MaterialStream(\"S05\", sys)\\\r\n\t.Init(\"T\",63,METRIC.C)\\\r\n\t.Init(\"p\",1, METRIC.bar)\\\r\n\t.Init(\"n[METHANOL]\",5.3427, SI.mol/SI.s)\\\r\n\t.Init(\"n[ISOPROPA]\",0.5, SI.mol/SI.s)\\\r\n\t.Init(\"n[WASSER]\",0.2, SI.mol/SI.s)\\\r\n\t.FlashPT()\r\n\t\r\nS06 = MaterialStream(\"S06\", sys)\r\nS07 = MaterialStream(\"S07\", sys)\r\nS08 = MaterialStream(\"S08\", sys)\r\nS09 = MaterialStream(\"S09\", sys)\r\nS10 = MaterialStream(\"S10\", sys)\r\nS11 = MaterialStream(\"S11\", sys)\r\nS12 = MaterialStream(\"S12\", sys)\r\n\r\n\r\nS12.Specify(\"T\",90, METRIC.C)\\\r\n\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t.Specify(\"n[METHANOL]\",8, SI.kmol/SI.h)\\\r\n\t.Specify(\"n[ISOPROPA]\",1, SI.kmol/SI.h)\\\r\n\t.Specify(\"n[WASSER]\",10, SI.kmol/SI.h)\\\r\n\t.FlashPT()\r\n\r\nS07.Init(\"T\",50, METRIC.C)\\\r\n\t.Init(\"p\",1, METRIC.bar)\\\r\n\t.Init(\"n[METHANOL]\",12, SI.kmol/SI.h)\\\r\n\t.Init(\"n[ISOPROPA]\",2, SI.kmol/SI.h)\\\r\n\t.Init(\"n[WASSER]\",8, SI.kmol/SI.h)\\\r\n\t.FlashPT()\r\n\r\nFEEDTRAY = Mixer(\"FEEDTRAY\",sys)\\\r\n\t.Connect(\"In\", S01)\\\r\n\t.Connect(\"In\", S07)\\\r\n\t.Connect(\"Out\", S08)\\\r\n\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t.Initialize()\\\r\n\t.Solve()\r\n\r\nSEC01 = RateBasedSection(\"SEC01\",sys,N1)\\\r\n\t.Connect(\"VIn\", S12)\\\r\n\t.Connect(\"LIn\", S05)\\\r\n\t.Connect(\"VOut\", S03)\\\r\n\t.Connect(\"LOut\", S07)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.SetHeight(0.215*3, SI.m)\\\r\n\t.SetDiameter(1.033, SI.m)\\\r\n\t.SetSpecificArea(250, SI.sqm/SI.cum)\\\r\n\t.SetModel(False,False,False,False)\\\r\n\t.SetInitMode()\\\r\n\t.Initialize()\r\n\r\nCONDENSER = Heater(\"CONDENSER\",sys)\\\r\n\t.Connect(\"In\", S03)\\\r\n\t.Connect(\"Out\", S04)\\\r\n\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t.Specify(\"VF\",0)\\\r\n\t.Initialize()\r\n\t\r\nSPLIT01 = Splitter(\"SPLIT01\",sys)\\\r\n\t.Connect(\"In\", S04)\\\r\n\t.Connect(\"Out1\", S06)\\\r\n\t.Connect(\"Out2\", S05)\\\r\n\t.Specify(\"DP\",0)\\\r\n\t.Specify(\"K\",0.125)\\\r\n\t.Initialize()\r\n\t\t\r\nSEC01.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01, S03,S04,S05,S06,S07,S08)\\\r\n\t.AddUnits(FEEDTRAY,  SEC01,CONDENSER,SPLIT01)\r\n\r\nprintTitle(\"Solve rectification section\")\r\n\r\ndecomp(flowsheet)\r\n\r\nSEC01.SetSolveMode()\r\n#SEC01.Solve()\r\n\r\ndecomp(flowsheet)\r\n\r\n#Stop()\r\n\r\nS12.Unfix()\r\n\r\nSEC02 = RateBasedSection(\"SEC02\",sys,N2)\\\r\n\t.Connect(\"VIn\", S11)\\\r\n\t.Connect(\"LIn\", S08)\\\r\n\t.Connect(\"VOut\", S12)\\\r\n\t.Connect(\"LOut\", S09)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.SetHeight(0.215*5, SI.m)\\\r\n\t.SetDiameter(1.033, SI.m)\\\r\n\t.SetSpecificArea(250, SI.sqm/SI.cum)\\\r\n\t.SetModel(False,False,False,False)\\\r\n\t.SetInitMode()\\\r\n\t.Initialize()\r\n\t\r\nREB= Flash(\"REB\",sys)\\\r\n\t.Connect(\"In\", S09)\\\r\n\t.Connect(\"Vap\",S11)\\\r\n\t.Connect(\"Liq\",S10)\\\r\n\t.Specify(\"VF\", 0.5)\\\r\n\t.Specify(\"P\", 929, METRIC.mbar)\\\r\n\t.Initialize()\r\n\r\nSEC02.Initialize()\r\n\r\nflowsheet\\\r\n\t.AddMaterialStreams(S09,S10,S11,S12)\\\r\n\t.AddUnits(SEC02,REB)\r\n\r\nprintTitle(\"Initialize stripping section\")\r\ndecomp(flowsheet)\r\n\r\nSEC02.SetSolveMode()\r\ndecomp(flowsheet)\r\n#Stop()\r\n\r\nprintTitle(\"Fix Pressure Drop\")\r\nfor t in range(1,N1+1):\t\r\n\tSEC01.Specify(\"DP[\"+str(t)+\"]\",8.0/(N1+N2), METRIC.mbar)\r\nfor t in range(1,N2+1):\t\t\r\n\tSEC02.Specify(\"DP[\"+str(t)+\"]\",8.0/(N1+N2), METRIC.mbar)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Activate Mass Transfer Vapor (Beta=const.)\")\r\nSEC01.SetModel(True,False,False,False)\r\nSEC02.SetModel(True,False,False,False)\r\n\r\nfor t in range(1,N1+1):\t\t\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, ISOPROPA]\").SetValue(1.368998E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, WASSER]\").SetValue(2.440758E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, METHANOL]\").SetValue(1.368998E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, WASSER]\").SetValue( 1.835732E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", WASSER, METHANOL]\").SetValue(2.440758E-02, SI.m/SI.s)\r\n\tSEC01.GetVariable(\"BetaV[\"+str(t)+\", WASSER, ISOPROPA]\").SetValue( 1.835732E-02, SI.m/SI.s)\r\n\r\nfor t in range(1,N2+1):\t\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, ISOPROPA]\").SetValue(1.380624E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", METHANOL, WASSER]\").SetValue(2.461487E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, METHANOL]\").SetValue(1.380624E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", ISOPROPA, WASSER]\").SetValue(1.851322E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", WASSER, METHANOL]\").SetValue(2.461487E-02, SI.m/SI.s)\r\n\tSEC02.GetVariable(\"BetaV[\"+str(t)+\", WASSER, ISOPROPA]\").SetValue(1.851322E-02, SI.m/SI.s)\r\ndecomp(flowsheet)\t\r\n\r\n\r\nprintTitle(\"Increase Reboiler VF to reach bottoms flow\")\r\nREB.Unspecify(\"VF\")\r\nS10.Specify(\"n\",8.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\nS10.Specify(\"n\",7.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\nS10.Specify(\"n\",5.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\nS10.Specify(\"n\",4.012, SI.mol/SI.s)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Enable Beta Calculation\")\r\nSEC01.EnableBetaVCalculation()\r\nSEC02.EnableBetaVCalculation()\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Define Reflux ratio aux variable\")\r\nrr1= Variable(\"rr1\", 0.4)\r\nrr1.Description=\"Reflux ratio\"\r\nrr1.BindTo((1-SPLIT01.GetVariable(\"K\"))/Sym.Par(1-(1-SPLIT01.GetVariable(\"K\"))))\r\n\r\n\r\nprintTitle(\"Create Flowsheet Documentation and Reports\")\r\ntext1=TextElement(\"Ratebased Distillation Example\",24,\"Blue\")\\\r\n\t.SetPosition(800, 60)\\\r\n\t.SetSize(400,80)\\\r\n\t.SetColors(\"White\",\"GhostWhite\")\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(800,200)\\\r\n\t.SetSize(1200,600)\t\r\ntable1.PrintMolarVariables=True\r\n\t\r\nflowsheet.AddDocumentation(text1,table1)\r\n\r\n\r\nreport(rr1)\r\nreport(CONDENSER.GetVariable(\"Q\")) \r\nreport(REB.GetVariable(\"Q\")) \r\nprint(\"\")\r\nprintRateBasedSection(SEC01)\r\nprintRateBasedSection(SEC02)\r\n\r\nprintRateBasedSectionHydro(SEC01)\r\nprintRateBasedSectionHydro(SEC02)\r\nprintRateBasedSectionBeta(SEC02)\r\n\r\nFEEDTRAY.SetIcon(IconTypes.Mixer, 310,460)\r\nSEC01.SetIcon(IconTypes.RateBasedSection, 410,190)\r\nCONDENSER.SetIcon(IconTypes.Heater, 460,30)\r\nSPLIT01.SetIcon(IconTypes.Splitter, 600,100)\r\nS01.SetIcon(IconTypes.Stream, 100,460)\r\nS06.SetIcon(IconTypes.Stream, 730,30)\r\nS08.SetIcon(IconTypes.Stream, 680,600)\r\nS12.SetIcon(IconTypes.Stream, 100,600)\r\nSEC02.SetIcon(IconTypes.RateBasedSection, 410,610)\r\nREB.SetIcon(IconTypes.TwoPhaseFlash, 530,840)\r\nS10.SetIcon(IconTypes.Stream, 630,940)\r\n\r\nshow(flowsheet)\r\n\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "MethanolIsopropanolWater",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "27"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "29",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "BTX",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "30",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\n\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nDatabase.ListComponents(\"Ani\")\r\n#Database.ListComponents(\"Tolu\")\r\n#Database.ListComponents(\"xyle\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Benzene\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\"))\r\nsys.AddComponent(Database.FindComponent(\"P-xylene\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Benzene]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Toluene]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[P-xylene]\",0, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.35)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\n#TXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Unspecify(\"p\")\r\nS01.Specify(\"T\", 100, METRIC.C)\r\nPXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\n\r\n#HTChart(S01, sys.Components[0], 0, 400,21)\r\n#HTChart(S01, sys.Components[1], 0, 400,21)\r\n#HTChart(S01, sys.Components[2], 0, 400,21)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "BTX System",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "29"
                          }
                        },
                        {
                          "$id": "31",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"StyrolProzess\",\"IDEAL\", \"default\")\r\n#sys= ThermodynamicSystem(\"StyrolProzess\",\"SRK\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Benzene\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\"))\r\nsys.AddComponent(Database.FindComponent(\"P-xylene\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n#report(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",120, METRIC.C)\\\r\n\t\t.Specify(\"p\",400, SI.kPa)\\\r\n\t\t.Specify(\"n[Toluene]\", 0.997*152.6,SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Benzene]\", 0.003*152.6,SI.kmol/SI.h)\\\r\n\t\t.FixMolarFlows()\\\r\n\t\t.FlashPT()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01)\r\n\t\r\nreport(flowsheet, True)\r\n\r\ndecomp(flowsheet)\r\n\r\n\r\nreport(flowsheet, True)\r\n\r\nS01.Specify(\"T\",220, METRIC.C)\t\r\ndecomp(flowsheet)\t\r\n\r\n#mod=solve(flowsheet)\r\n#snap= Snapshot(\"test\",mod)\r\n#show(snap)\r\nreport(flowsheet, True)\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "New Script",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "29"
                          }
                        },
                        {
                          "$id": "32",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|Hex Helper\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ColumnCharts\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\nsys.AddComponent(Database.FindComponent(\"Benzene\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\"))\r\nsys.AddComponent(Database.FindComponent(\"P-xylene\"))\r\nDatabase.FillBIPs(sys)\r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, SI.kg/SI.h)\r\n\r\n#report(sys)\r\n\r\n_decomp.SuppressLogging=False\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Benzene]\",30, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Toluene]\",30, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[P-xylene]\",30, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\",sys) #VOUT\r\nS03 = MaterialStream(\"S03\",sys)\r\nS04 = MaterialStream(\"S04\",sys)\r\nS05 = MaterialStream(\"S05\",sys) #LIN\r\n\r\nS06 = MaterialStream(\"S06\",sys) #LOUT\r\nS07 = MaterialStream(\"S07\",sys)\r\nS08 = MaterialStream(\"S08\",sys)\r\nS09 = MaterialStream(\"S09\",sys)\r\nS11 = MaterialStream(\"S11\",sys)\r\nS12 = MaterialStream(\"S12\",sys) #VIN\r\n\r\nT1 = TraySection(\"T1\",sys,21)\\\r\n\t.Connect(\"VIn\", S12)\\\r\n\t.Connect(\"LIn\", S05)\\\r\n\t.Connect(\"VOut\", S02)\\\r\n\t.Connect(\"LOut\", S06)\\\r\n\t.ConnectFeed(S01,11)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.FixStageEfficiency(1.0)\\\r\n\t.Initialize()\r\n\r\nMX1 = Mixer(\"MX1\",sys)\\\r\n\t.Connect(\"In\", S06)\\\r\n\t.Connect(\"In\", S11)\\\r\n\t.Connect(\"Out\", S07)\\\r\n\t.Specify(\"DP\", 0, METRIC.bar)\\\r\n\t.Initialize()\r\n\r\nSP2 = Splitter(\"SP2\",sys)\\\r\n\t.Connect(\"In\", S07)\\\r\n\t.Connect(\"Out1\", S09)\\\r\n\t.Connect(\"Out2\", S08)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",0.8)\\\r\n\t.Initialize()\t\t\r\n\t\t\r\nE2V1 = Flash(\"E2V1\",sys)\\\r\n\t.Connect(\"In\", S09)\\\r\n\t.Connect(\"Vap\", S12)\\\r\n\t.Connect(\"Liq\", S11)\\\r\n\t.Specify(\"P\", 1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0.2)\\\r\n\t.Initialize()\r\n\r\nE1 = Heater(\"E1\",sys)\\\r\n\t.Connect(\"In\", S02)\\\r\n\t.Connect(\"Out\", S03)\\\r\n\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0)\\\r\n\t.Initialize()\r\n\r\nSP1 = Splitter(\"SP1\",sys)\\\r\n\t.Connect(\"In\", S03)\\\r\n\t.Connect(\"Out1\", S04)\\\r\n\t.Connect(\"Out2\", S05)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",0.6)\\\r\n\t.Initialize()\r\n\r\n\r\nT1.Initialize()\r\nE1.Solve()\r\nSP1.Solve()\r\nMX1.Solve()\r\nSP2.Solve()\r\nE2V1.Solve()\r\n\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01,S02,S03,S04,S05,S06,S07,S08,S09,S11,S12)\\\r\n\t.AddUnits(T1,E1,SP1,MX1,SP2,E2V1)\r\n\r\n\r\ndecomp(flowsheet)\r\n\r\n\r\n\r\n#report(flowsheet)\r\n\r\nSP1.Unspecify(\"K\")\r\nSP2.Unspecify(\"K\")\r\nflowsheet.AddDesignSpecification(\"SPEC01\",S04.GetVariable(\"x[Benzene]\").IsEqualTo(0.99) )\r\nflowsheet.AddDesignSpecification(\"SPEC02\",S08.GetVariable(\"x[Benzene]\").IsEqualTo(0.01) )\r\ndecomp(flowsheet)\r\n#report(flowsheet)\r\n\r\n\r\nflowsheet.ReplaceDesignSpecification(\"SPEC01\",S04.GetVariable(\"w[Benzene]\").IsEqualTo(0.999) )\r\nflowsheet.ReplaceDesignSpecification(\"SPEC02\",S08.GetVariable(\"w[Benzene]\").IsEqualTo(0.001) )\r\ndecomp(flowsheet)\r\n#report(flowsheet)\r\nprintSection(T1,True)\r\n\r\nprintTitle(\"Scanning Flexible Trays\")\r\nNrecti=Variable(\"Nrecti\",10)\r\nT1.EfficiencyType=TrayEfficiencyType.ExtendedMurphree\r\n\r\nfor i in range(11,20):\r\n\tT1.Unspecify(\"eps[\"+str(i)+\"]\")\r\n\tflowsheet.AddDesignSpecification(\"SPEC\"+str(i),T1.GetVariable(\"eps[\"+str(i)+\"]\").IsEqualTo(Sym.Tanh(2*(i-Nrecti))*0.5+0.5) )\r\ndecomp(flowsheet)\r\nprintSection(T1,True)\r\n\r\n_decomp.SuppressLogging=True\r\nfor i in range(61):\r\n\tNrecti.FixValue(10+i/10.0)\r\n\tdecomp(flowsheet)\r\n\tprint(str(i)+\";\"+str(Nrecti.ValueInSI).replace('.',',')+\";\"+str(-E1.GetVariable(\"Q\").ValueInOutputUnit).replace('.',',') +\";\"+str(E2V1.GetVariable(\"Q\").ValueInOutputUnit).replace('.',',')) \r\n\t#printSection(T1,True)\r\n\t\r\n\r\n\r\n#plotTProfile(T1)\r\n\r\nT1.SetIcon(IconTypes.ColumnSection, 170,180)\r\nE1.SetIcon(IconTypes.Heater, 270,100)\r\nSP1.SetIcon(IconTypes.Splitter, 410,100)\r\nMX1.SetIcon(IconTypes.Mixer, 360,600)\r\nSP2.SetIcon(IconTypes.Splitter, 460,600)\r\nE2V1.SetIcon(IconTypes.TwoPhaseFlash, 290,520)\r\nS01.SetIcon(IconTypes.Stream, 20,310)\r\nS04.SetIcon(IconTypes.Stream, 510,10)\r\nS08.SetIcon(IconTypes.Stream, 600,660)\r\n\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(580,10)\\\r\n\t.SetSize(700,450)\r\n\t\r\nflowsheet.AddDocumentation(table1)\r\n\r\n#show(flowsheet)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "BTXColumn",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "29"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "33",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Hydrocarbons",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "34",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\nrun(Items[\"Projects|Scripts|Hex Helper\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ColumnBuilder3\"].Data)\t\r\n\r\nprintTitle('Set upt Thermodynamics')\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"SRK\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Methane\").RenameID(\"C1\"))\r\nsys.AddComponent(Database.FindComponent(\"Ethane\").RenameID(\"C2\"))\r\nsys.AddComponent(Database.FindComponent(\"Propane\").RenameID(\"C3\"))\r\nsys.AddComponent(Database.FindComponent(\"N-butane\").RenameID(\"C4\"))\r\nsys.AddComponent(Database.FindComponent(\"N-pentane\").RenameID(\"C5\"))\r\nsys.AddComponent(Database.FindComponent(\"N-hexane\").RenameID(\"C6\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n#report(sys)\r\n\r\nprintTitle('Hydrocarbon column')\r\n\r\n\r\nFEED = MaterialStream(\"FEED\", sys)\\\r\n\t\t.Specify(\"T\",90, METRIC.C)\\\r\n\t\t.Specify(\"p\",22, METRIC.bar)\\\r\n\t\t.Specify(\"n\",200, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[C1]\",0.25)\\\r\n\t\t.Specify(\"x[C2]\", 0.12)\\\r\n\t\t.Specify(\"x[C3]\",0.25)\\\r\n\t\t.Specify(\"x[C4]\",0.13)\\\r\n\t\t.Specify(\"x[C5]\", 0.1)\\\r\n\t\t.Init(\"x[C6]\", 0.15)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\nOVHD = MaterialStream(\"OVHD\", sys)\r\nBTMS = MaterialStream(\"BTMS\", sys)\r\n\r\nSetSolverOptions(50,1e-6,0.25,False)\r\n\r\nsubflow = ColumnBuilder3(\"COL1\",sys, FEED, OVHD, BTMS, 15,8, 22, 1.0,0.4)\r\nCOL1= \tsubflow.GetUnit(\"COL1_SECTION\")\r\nREFSPLI1= \tsubflow.GetUnit(\"COL1_REFLUXSPLIT\")\r\nREB1= \t\tsubflow.GetUnit(\"COL1_REBOILER\")\r\nCOND1= \t\tsubflow.GetUnit(\"COL1_CONDENSER\")\r\n\r\nCOL1.Name=\"COL1\"\r\nREFSPLI1.Name=\"REFSPLI1\"\r\nREB1.Name=\"REB1\"\r\nCOND1.Name=\"COND1\"\r\n\r\nSetSolverOptions(50,1e-6,0.1,True)\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t\t\t.AddMaterialStreams(FEED)\r\n\t\t\t\t\t\r\nflowsheet.Merge(subflow)\r\ndecomp(flowsheet)\r\n\r\nsolve(flowsheet)\r\nreport(flowsheet)\r\nprintSection(COL1,True)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "C1-C6 Col",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "33"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "35",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Cyclohexan",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "36",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|Hex Helper\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ColumnBuilder2\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\nrun(Items[\"Projects|Scripts|ColumnBuilder3\"].Data)\t\r\nsys= ThermodynamicSystem(\"Test2\",\"SRK\", \"default\")\r\n#sys= ThermodynamicSystem(\"Test2\",\"Ideal\", \"default\")\r\nsys.VariableFactory.SetTemperatureLimits(10,700)\r\nsys.AddComponent(Database.FindComponent(\"Hydrogen\"))\r\nsys.AddComponent(Database.FindComponent(\"Nitrogen\"))\r\nsys.AddComponent(Database.FindComponent(\"Benzene\"))\r\nsys.AddComponent(Database.FindComponent(\"Methane\"))\r\nsys.AddComponent(Database.FindComponent(\"Cyclohexane\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n#report(sys)\r\n\r\nprintTitle(\"Feed mixing and preheater\")\r\n\r\nH2IN = MaterialStream(\"H2IN\", sys)\\\r\n\t\t.Specify(\"T\",50, METRIC.C)\\\r\n\t\t.Specify(\"p\",25, METRIC.bar)\\\r\n\t\t.Specify(\"n\",330, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[Hydrogen]\",0.975)\\\r\n\t\t.Specify(\"x[Nitrogen]\",0.005)\\\r\n\t\t.Specify(\"x[Benzene]\",0)\\\r\n\t\t.Specify(\"x[Methane]\",0.02)\\\r\n\t\t.Init(\"x[Cyclohexane]\",0)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\r\nBZIN = MaterialStream(\"BZIN\", sys)\\\r\n\t\t.Specify(\"T\",40, METRIC.C)\\\r\n\t\t.Specify(\"p\",25, METRIC.bar)\\\r\n\t\t.Specify(\"n\",100, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[Hydrogen]\",0)\\\r\n\t\t.Specify(\"x[Nitrogen]\",0)\\\r\n\t\t.Specify(\"x[Benzene]\",1)\\\r\n\t\t.Specify(\"x[Methane]\",0)\\\r\n\t\t.Init(\"x[Cyclohexane]\",0)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\t\t\r\n\t\t\r\nH2RCY = MaterialStream(\"H2RCY\", sys)\\\r\n\t\t.Specify(\"T\",50, METRIC.C)\\\r\n\t\t.Specify(\"p\",25, METRIC.bar)\\\r\n\t\t.Specify(\"n\",200, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[Hydrogen]\",0.975)\\\r\n\t\t.Specify(\"x[Nitrogen]\",0.005)\\\r\n\t\t.Specify(\"x[Benzene]\",0)\\\r\n\t\t.Specify(\"x[Methane]\",0.02)\\\r\n\t\t.Init(\"x[Cyclohexane]\",0)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\r\nCHRCY = MaterialStream(\"CHRCY\", sys)\\\r\n\t\t.Specify(\"T\",50, METRIC.C)\\\r\n\t\t.Specify(\"p\",25, METRIC.bar)\\\r\n\t\t.Specify(\"n\",10, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[Hydrogen]\",0)\\\r\n\t\t.Specify(\"x[Nitrogen]\",0)\\\r\n\t\t.Specify(\"x[Benzene]\",0.5)\\\r\n\t\t.Specify(\"x[Methane]\",0)\\\r\n\t\t.Init(\"x[Cyclohexane]\",0.5)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\t\t\r\nRXIN = MaterialStream(\"RXIN\", sys)\r\nRXIN2 = MaterialStream(\"RXIN2\", sys)\r\nRXOUT = MaterialStream(\"RXOUT\", sys)\r\nMIXER = Mixer(\"MIXER\",sys)\\\r\n\t\t.Connect(\"In\", H2IN)\\\r\n\t\t.Connect(\"In\", H2RCY)\\\r\n\t\t.Connect(\"In\", BZIN)\\\r\n\t\t.Connect(\"In\", CHRCY)\\\r\n\t\t.Connect(\"Out\", RXIN)\\\r\n\t\t.Specify(\"P\",25, METRIC.bar)\\\r\n\t\t.Initialize()\r\n\r\nPREHEAT = Heater(\"PREHEAT\",sys)\\\r\n\t\t.Connect(\"In\", RXIN)\\\r\n\t\t.Connect(\"Out\", RXIN2)\\\r\n\t\t.Specify(\"P\",23, METRIC.bar)\\\r\n\t\t.Specify(\"T\",150, METRIC.C)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\r\nSetSolverOptions(50,1e-6,0.1,True)\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(H2IN, H2RCY, BZIN, CHRCY, RXIN, RXIN2)\r\nflowsheet.AddUnits(MIXER, PREHEAT)\r\n\r\ndecomp(flowsheet)\r\n#stop()\r\n\r\n\r\n#report(flowsheet,True)\r\nstop()\r\n\r\n\r\nprintTitle(\"Add reactor\")\r\n\r\n\r\nREAC01 = BlackBoxReactor(\"REAC01\",sys, 1)\\\r\n\t\t.Connect(\"In\", RXIN2)\\\r\n\t\t.Connect(\"Out\", RXOUT)\\\r\n\t\t.AddStochiometry(1, \"Hydrogen\", -3.0)\\\r\n\t\t.AddStochiometry(1, \"Benzene\", -1.0)\\\r\n\t\t.AddStochiometry(1, \"Cyclohexane\", 1.0)\\\r\n\t\t.Specify(\"T\", 200, METRIC.C)\\\r\n\t\t.Specify(\"P\", 24, METRIC.bar)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\r\nflowsheet.AddMaterialStreams(RXOUT)\r\nflowsheet.AddUnits(REAC01)\r\n\r\nflowsheet.AddDesignSpecification( ((RXIN2.GetVariable(\"n[Benzene]\")-RXOUT.GetVariable(\"n[Benzene]\"))/RXIN2.GetVariable(\"n[Benzene]\") ).IsEqualTo(0.998))\r\ndecomp(flowsheet)\r\n\r\n\r\n\r\n\r\nprintTitle(\"Add product cooler\")\r\n\r\nSEPFD = MaterialStream(\"SEPFD\", sys)\r\nRXCOOL = Heater(\"RXCOOL\",sys)\\\r\n\t\t.Connect(\"In\", RXOUT)\\\r\n\t\t.Connect(\"Out\", SEPFD)\\\r\n\t\t.Specify(\"DP\",0.5, METRIC.bar)\\\r\n\t\t.Specify(\"T\",50, METRIC.C)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\t\r\nflowsheet.AddMaterialStreams(SEPFD)\r\nflowsheet.AddUnits(RXCOOL)\t\t\r\n#decomp(flowsheet)\r\n\r\nprintTitle(\"Add flash\")\r\n\r\nVAP = MaterialStream(\"VAP\", sys)\r\nLIQ = MaterialStream(\"LIQ\", sys)\r\n\r\nHPSEP = Flash(\"HPSEP\",sys)\\\r\n\t\t.Connect(\"In\", SEPFD)\\\r\n\t\t.Connect(\"Vap\", VAP)\\\r\n\t\t.Connect(\"Liq\", LIQ)\\\r\n\t\t.Specify(\"P\", 23.5, METRIC.bar)\\\r\n\t\t.Specify(\"T\",50, METRIC.C)\\\r\n\t\t.Initialize()\r\n\t\t\r\nflowsheet.AddMaterialStreams(VAP,LIQ)\r\nflowsheet.AddUnits(HPSEP)\t\t\r\ndecomp(flowsheet)\r\n\r\nHPSEP.Unspecify(\"T\").Specify(\"Q\",0,SI.kW)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Add vapor recycle split\")\r\n\r\n\r\nPURGE = MaterialStream(\"PURGE\", sys)\r\nH2RCY.Unfix()\r\nVFLOW = Splitter(\"VFLOW\",sys)\\\r\n\t\t.Connect(\"In\", VAP)\\\r\n\t\t.Connect(\"Out1\", H2RCY)\\\r\n\t\t.Connect(\"Out2\", PURGE)\\\r\n\t\t.Specify(\"P\", 25, METRIC.bar)\\\r\n\t\t.Specify(\"K\",0.92)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\t\r\nflowsheet.AddMaterialStreams(PURGE)\r\nflowsheet.AddUnits(VFLOW)\t\t\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Add liquid recycle split\")\r\n\r\nCOLFD = MaterialStream(\"COLFD\", sys)\r\nCHRCY.Unfix()\r\nLFLOW = Splitter(\"LFLOW\",sys)\\\r\n\t\t.Connect(\"In\", LIQ)\\\r\n\t\t.Connect(\"Out1\", COLFD)\\\r\n\t\t.Connect(\"Out2\", CHRCY)\\\r\n\t\t.Specify(\"P\", 25, METRIC.bar)\\\r\n\t\t.Specify(\"K\",0.7)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\t\r\nflowsheet.AddMaterialStreams(COLFD)\r\nflowsheet.AddUnits(LFLOW)\t\t\r\ndecomp(flowsheet)\t\r\n\r\nprintTitle(\"Add column\")\r\nSetSolverOptions(50,1e-6,0.25,True)\r\n#SetSolverOptions(50,1e-6,0.1,False)\r\n\r\nVOUT = MaterialStream(\"VOUT\", sys)\r\nLIN = MaterialStream(\"LIN\", sys)\\\r\n\t\t.Init(\"T\",9, METRIC.C)\\\r\n\t\t.Init(\"p\",15, METRIC.bar)\\\r\n\t\t.Init(\"n\",5, SI.kmol/SI.h)\\\r\n\t\t.Init(\"x[Hydrogen]\",0.01)\\\r\n\t\t.Init(\"x[Nitrogen]\",0.01)\\\r\n\t\t.Init(\"x[Benzene]\",0.56)\\\r\n\t\t.Init(\"x[Methane]\",0.01)\\\r\n\t\t.Init(\"x[Cyclohexane]\",0.4)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\t\t\r\n\t\t\r\nLOUT = MaterialStream(\"LOUT\", sys)\r\nVIN = MaterialStream(\"VIN\", sys)\\\r\n\t\t.Init(\"T\",208, METRIC.C)\\\r\n\t\t.Init(\"p\",15, METRIC.bar)\\\r\n\t\t.Init(\"n\",20, SI.kmol/SI.h)\\\r\n\t\t.Init(\"x[Hydrogen]\",0.02)\\\r\n\t\t.Init(\"x[Nitrogen]\",0.02)\\\r\n\t\t.Init(\"x[Benzene]\",0.1)\\\r\n\t\t.Init(\"x[Methane]\",0)\\\r\n\t\t.Init(\"x[Cyclohexane]\",0.95)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPT()\r\n\t\r\nBOT = MaterialStream(\"BOT\", sys)\r\nPURGE2 = MaterialStream(\"PURGE2\", sys)\r\n\t\t\r\n#COL1 = TraySection(\"COL1\",sys,10)\\\r\n#\t.Connect(\"VIn\", VIN)\\\r\n#\t.Connect(\"LIn\", LIN)\\\r\n#\t.Connect(\"VOut\", VOUT)\\\r\n#\t.Connect(\"LOut\", LOUT)\\\r\n#\t.MakeAdiabatic()\\\r\n#\t.MakeIsobaric()\\\r\n#\t.FixStageEfficiency(1.0)\\\r\n#\t.ConnectFeed(COLFD,7,PhaseState.Liquid)\\\r\n#\t.Initialize()\\\r\n\t\r\nCOL1 = FeedStage(\"COL1\",sys)\\\r\n\t.Connect(\"In\",COLFD)\\\r\n\t.Connect(\"VIn\", VIN)\\\r\n\t.Connect(\"LIn\", LIN)\\\r\n\t.Connect(\"VOut\", VOUT)\\\r\n\t.Connect(\"LOut\", LOUT)\\\r\n\t.Specify(\"P\",15, METRIC.bar)\\\r\n\t.Specify(\"Q\",0,SI.kW)\\\r\n\t.Initialize()\\\r\n\r\nREB = Flash(\"REB\",sys)\\\r\n\t.Connect(\"In\", LOUT)\\\r\n\t.Connect(\"Vap\", VIN)\\\r\n\t.Connect(\"Liq\", BOT)\\\r\n\t.Specify(\"P\",15, METRIC.bar)\\\r\n\t.Specify(\"VF\",0.75)\\\r\n\t.Initialize()\\\r\n\r\n\r\nCOND = Flash(\"COND\",sys)\\\r\n\t.Connect(\"In\", VOUT)\\\r\n\t.Connect(\"Vap\", PURGE2)\\\r\n\t.Connect(\"Liq\", LIN)\\\r\n\t.Specify(\"P\",15, METRIC.bar)\\\r\n\t.Specify(\"T\",30, METRIC.C)\\\r\n\t.Initialize()\\\r\n\r\n\r\n\r\nSetSolverOptions(10,1e-6,0.25,True)\r\n\r\nflowsheet.AddMaterialStreams(BOT, LOUT,VOUT,LIN,VIN,PURGE2)\r\nflowsheet.AddUnits(COL1,REB,COND)\t\r\ndecomp(flowsheet)\t\r\n\r\n#COL1.FixStageEfficiency(0.01)\r\n#report(flowsheet,6)\r\n\r\n\r\n\r\n#REB.Unspecify(\"VF\")\r\n#flowsheet.AddDesignSpecification( BOT.GetVariable(\"x[Cyclohexane]\").IsEqualTo(0.99)) \r\n\r\n#COND.Unspecify(\"VF\")\r\n#flowsheet.AddDesignSpecification( PURGE2.GetVariable(\"n\").IsEqualTo(3/3.6))\r\n\r\n#solve(flowsheet)\r\n\r\n#stop()\r\n\r\n\r\n#COND.Unspecify(\"VF\")\r\n#flowsheet.AddDesignSpecification( PURGE2.GetVariable(\"n\").IsEqualTo(3/3.6))\r\n#solve(flowsheet)\t\r\n\r\n#stop()\r\n#report(flowsheet,6)\r\n\r\nMIXER.SetIcon(IconTypes.Mixer, 340,300)\r\nPREHEAT.SetIcon(IconTypes.Heater, 470,400)\r\nREAC01.SetIcon(IconTypes.PFR, 600,400)\r\nRXCOOL.SetIcon(IconTypes.Heater, 810,400)\r\nHPSEP.SetIcon(IconTypes.TwoPhaseFlash, 950,400)\r\nVFLOW.SetIcon(IconTypes.Splitter, 1040,170)\r\nLFLOW.SetIcon(IconTypes.Splitter, 1070,580)\r\nCOL1.SetIcon(IconTypes.ColumnSection, 1250,370)\r\nREB.SetIcon(IconTypes.TwoPhaseFlash, 1440,750)\r\nCOND.SetIcon(IconTypes.TwoPhaseFlash, 1470,290)\r\nH2IN.SetIcon(IconTypes.Stream, 80,300)\r\nBZIN.SetIcon(IconTypes.Stream, 80,490)\r\nPURGE.SetIcon(IconTypes.Stream, 1240,220)\r\nBOT.SetIcon(IconTypes.Stream, 1760,830)\r\nPURGE2.SetIcon(IconTypes.Stream, 1590,190)\r\n\r\n\r\n#show(flowsheet)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Flowsheet",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "35"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "37",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "MeOHWater",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "38",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\nrun(Items[\"Projects|Scripts|Hex Helper\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ColumnBuilder3\"].Data)\t\r\n\r\nprintTitle('Set upt Thermodynamics')\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Methanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\"))\r\n\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n#report(sys)\r\n\r\nprintTitle('MeOH Water column')\r\n\r\n#.Specify(\"T\",25, METRIC.C)\\\r\n\r\nFEED = MaterialStream(\"FEED\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1.3, METRIC.bar)\\\r\n\t\t.Specify(\"n\",2534, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"x[Methanol]\",0.632)\\\r\n\t\t.Init(\"x[Water]\", 0.368)\\\r\n\t\t.InitMolarFlowFromFractions()\\\r\n\t\t.FlashPZ()\r\nOVHD = MaterialStream(\"OVHD\", sys)\r\nBTMS = MaterialStream(\"BTMS\", sys)\r\n\r\nsubflow = ColumnBuilder3(\"COL1\",sys, FEED, OVHD, BTMS, 38,19, 1.3, 0.5,0.5)\r\nCOL1= \tsubflow.GetUnit(\"COL1_SECTION\")\r\nREFSPLI1= \tsubflow.GetUnit(\"COL1_REFLUXSPLIT\")\r\nREB1= \t\tsubflow.GetUnit(\"COL1_REBOILER\")\r\nCOND1= \t\tsubflow.GetUnit(\"COL1_CONDENSER\")\r\n\r\nCOL1.Name=\"COL1\"\r\nREFSPLI1.Name=\"REFSPLI1\"\r\nREB1.Name=\"REB1\"\r\nCOND1.Name=\"COND1\"\r\n\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t\t\t.AddMaterialStreams(FEED)\r\n\t\t\t\r\n\t\t\r\nflowsheet.Merge(subflow)\r\ndecomp(flowsheet)\r\n\r\n\r\n\r\nprintTitle('Design Specs')\r\nREFSPLI1.Unspecify(\"K\")\r\nflowsheet.AddDesignSpecification(\"SPEC01\",OVHD.GetVariable(\"w[Methanol]\").IsEqualTo(0.9995)  )\r\nREB1.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(\"SPEC02\",(BTMS.GetVariable(\"w[Water]\")).IsEqualTo(0.999) )\r\ndecomp(flowsheet)\r\n\r\n\r\nreport(flowsheet)\r\nprintSection(COL1,True)\r\nreport(REFSPLI1.GetVariable(\"K\"))\r\nreport(REB1.GetVariable(\"VF\"))\r\n\r\nrr1= Variable(\"rr1\", 0.4)\r\nrr1.BindTo((REFSPLI1.GetVariable(\"K\"))/(1-Sym.Par(REFSPLI1.GetVariable(\"K\"))))\r\nreport(rr1)\r\n\r\nCOL1.SetIcon(IconTypes.ColumnSection, 510,140)\r\nCOND1.SetIcon(IconTypes.Heater, 600,30)\r\nREFSPLI1.SetIcon(IconTypes.Splitter, 690,120)\r\nREB1.SetIcon(IconTypes.TwoPhaseFlash, 640,490)\r\nFEED.SetIcon(IconTypes.Stream, 240,270)\r\nOVHD.SetIcon(IconTypes.Stream, 890,170)\r\nBTMS.SetIcon(IconTypes.Stream, 800,530)\r\n\r\n\r\ntext1=TextElement(\"Methanol Column\",24,\"Blue\")\\\r\n\t.SetPosition(780,20)\\\r\n\t.SetSize(800,80)\\\r\n\t.SetColors(\"White\",\"GhostWhite\")\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(910,270)\\\r\n\t.SetSize(800,400)\r\nsheet1=SpreadsheetElement(\"Results\")\\\r\n\t.SetIcon(IconTypes.Spreadsheet,  40,410)\\\r\n\t.SetSize(400,250)\\\r\n\t.AddVariable(REB1.GetVariable(\"Q\"))\\\r\n\t.AddVariable(COND1.GetVariable(\"Q\"))\\\r\n\t.AddVariable(rr1)\r\n\r\n\r\n\r\nflowsheet.AddDocumentation(text1,table1,sheet1)\r\n#plotSection(COL1)\r\n#plotSectionConcLiquid(COL1)\r\n\r\n#show(flowsheet)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "SingleColumn",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "37"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "39",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "EtOH Water",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "40",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "#sys= CreateThermo(Items[\"Projects|Thermodynamics|EtOHUNIQUAC\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"UNIQUAC\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Ethanol\").RenameID(\"ETHANOL\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\").RenameID(\"WASSER\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, SI.kg/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MolarFlow, SI.kmol/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.VolumeFlow, SI.cum/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, METRIC.C)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.mbar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[ETHANOL]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[WASSER]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\n\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.35)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\n\r\nsys.EquilibriumMethod.Activity= ActivityMethod.Ideal\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\nsys.EquilibriumMethod.Activity= ActivityMethod.UNIQUAC\r\nmod=solve(flowsheet)\r\nreport(flowsheet)\r\nsnap= Snapshot(\"test\",mod)\r\nshow(snap)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Flash",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "39"
                          }
                        },
                        {
                          "$id": "41",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\n\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Ethanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Ethanol]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Water]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.5)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Unspecify(\"p\")\r\nS01.Specify(\"T\", 100, METRIC.C)\r\nPXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "NRTL Plots",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "39"
                          }
                        },
                        {
                          "$id": "42",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\n\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"UNIQUAC\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Ethanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Ethanol]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Water]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.5)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\nS01.Unspecify(\"p\")\r\nS01.Specify(\"T\", 100, METRIC.C)\r\nPXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Uniquac Plots",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "39"
                          }
                        },
                        {
                          "$id": "43",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "# Python Scripting Language Input File\r\nrun(Items[\"Projects|Scripts|HengstebeckCharts\"].Data)\t\r\nrun(Items[\"Projects|Scripts|ColumnCharts\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"NRTL\", \"default\")\r\nsys.AddComponent(Database.FindComponent(\"Ethanol\").RenameID(\"ETHANOL\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\").RenameID(\"WASSER\"))\r\nDatabase.FillBIPs(sys)\r\n#report(sys)\r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, SI.kg/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MolarFlow, SI.kmol/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.VolumeFlow, SI.cum/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, METRIC.C)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.mbar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\n\r\n\r\n\r\nFEED = MaterialStream(\"FEED\", sys)\\\r\n\t.Specify(\"T\",60, METRIC.C)\\\r\n\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t.Specify(\"n[ETHANOL]\",50, SI.kmol/SI.h)\\\r\n\t.Specify(\"n[WASSER]\",50, SI.kmol/SI.h)\\\r\n\t.FlashPT()\\\r\n\t.Unspecify(\"T\")\\\r\n\t.Specify(\"VF\",0.0)\r\nVIN = MaterialStream(\"VIN\", sys)\\\r\n\t.Init(\"T\",170, METRIC.C)\\\r\n\t.Init(\"p\",1, METRIC.bar)\\\r\n\t.Init(\"n[ETHANOL]\",80, SI.kmol/SI.h)\\\r\n\t.Init(\"n[WASSER]\",1, SI.kmol/SI.h)\r\n\r\nLIN = MaterialStream(\"LIN\", sys)\\\r\n\t.Init(\"T\",60, METRIC.C)\\\r\n\t.Init(\"p\",1, METRIC.bar)\\\r\n\t.Init(\"n[ETHANOL]\",1, SI.kmol/SI.h)\\\r\n\t.Init(\"n[WASSER]\",80, SI.kmol/SI.h)\r\n\r\nVOUT = MaterialStream(\"VOUT\", sys)\r\nLOUT = MaterialStream(\"LOUT\", sys)\r\nBOT = MaterialStream(\"BOT\", sys)\r\nBOTREF = MaterialStream(\"BOTREF\", sys)\r\nTOP = MaterialStream(\"TOP\", sys)\r\nCON = MaterialStream(\"CON\", sys)\r\n\r\n\r\nNST=12\r\n\r\nSEC01 = TraySection(\"SEC01\",sys,NST)\\\r\n\t.Connect(\"VIn\", VIN)\\\r\n\t.Connect(\"LIn\", LIN)\\\r\n\t.Connect(\"VOut\", VOUT)\\\r\n\t.Connect(\"LOut\", LOUT)\\\r\n\t.ConnectFeed(FEED,8)\\\r\n\t.MakeAdiabatic()\\\r\n\t.MakeIsobaric()\\\r\n\t.FixStageEfficiency(1.0)\\\r\n\t.Initialize()\r\n\r\nREBSPLI = Splitter(\"REBSPLI\",sys)\\\r\n\t.Connect(\"In\", LOUT)\\\r\n\t.Connect(\"Out1\", BOTREF)\\\r\n\t.Connect(\"Out2\", BOT)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",0.6)\\\r\n\t.Initialize()\r\n\r\nREB = Heater(\"REB\",sys)\\\r\n\t.Connect(\"In\", BOTREF)\\\r\n\t.Connect(\"Out\", VIN)\\\r\n\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t.Specify(\"VF\",0.99)\\\r\n\t.Initialize()\r\n\r\nCOND = Heater(\"COND\",sys)\\\r\n\t.Connect(\"In\", VOUT)\\\r\n\t.Connect(\"Out\", CON)\\\r\n\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t.Specify(\"T\",60, METRIC.C)\\\r\n\t.Initialize()\r\n\r\nREFSPLI = Splitter(\"REFSPLI\",sys)\\\r\n\t.Connect(\"In\", CON)\\\r\n\t.Connect(\"Out1\", TOP)\\\r\n\t.Connect(\"Out2\", LIN)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",0.8)\\\r\n\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(FEED,VOUT, CON,LIN, TOP, LOUT,BOTREF, VIN, BOT)\\\r\n\t.AddUnits(SEC01, COND, REFSPLI, REBSPLI,REB)\r\n\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Add design specification\")\r\nflowsheet.AddDesignSpecification(TOP.GetVariable(\"x[ETHANOL]\").IsEqualTo(0.75))\r\nflowsheet.AddDesignSpecification(BOT.GetVariable(\"x[WASSER]\").IsEqualTo(0.99))\r\nREBSPLI.Unspecify(\"K\")\r\nREFSPLI.Unspecify(\"K\")\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Switch to extended Murphree efficiency\")\r\nSEC01.EfficiencyType=TrayEfficiencyType.ExtendedMurphree\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Perform sensitivity analysis\")\r\n\r\nN=4\r\nrr=Variable(\"rr\",1)\r\nrr.BindTo( (1-REFSPLI.GetVariable(\"K\"))/(1-(1-REFSPLI.GetVariable(\"K\"))))\r\nxLBD=TOP.GetVariable(\"x[ETHANOL]\")\r\nxLBB=BOT.GetVariable(\"x[ETHANOL]\")\r\n\r\n#rrval=rr.Eval(Evaluator())\r\n#plotHengstebeck(\"Î·={:1.2f}\".format(1.0), SEC01, 0.5,xLBB.ValueInSI,xLBD.ValueInSI,rrval,\"ETHANOL\",0,1,0,1 )\r\n\r\nprintTitle(\"Calculate Equilibrium Curve Data\")\r\n\r\nyEq=[]\r\n\r\nstream= MaterialStream(\"EQ\",sys)\r\nflowsheet2= Flowsheet(\"PhaseEnvelope\").AddMaterialStreams(stream)\r\nstream.Specify(\"VF\",0.0)\r\nstream.Specify(\"p\",1.0, METRIC.bar)\r\nstream.Specify(\"n[ETHANOL]\", 0,  SI.mol/SI.s)\r\nstream.Specify(\"n[WASSER]\", 1,  SI.mol/SI.s)\r\nstream.FlashPZ()\r\nN2=41\r\nfor i in range(N2):\r\n\tx1=i*1.0/float(N2-1)\r\n\tx2=1.0-x1\r\n\tstream.Specify(\"n[ETHANOL]\", x1,  SI.mol/SI.s)\r\n\tstream.Specify(\"n[WASSER]\", x2,  SI.mol/SI.s)\t\r\n\tdecomp(flowsheet2)\r\n\tyEq.append(stream.GetVariable(\"xV[ETHANOL]\").ValueInOutputUnit)  \t\r\n \t\t\r\n#stop()\r\n\r\nfor i in range(0,N):\r\n eps=1.0-i/(float(N-1)) \r\n SEC01.Specify(\"eps[11]\",eps)\r\n decomp(flowsheet) \r\n report(SEC01.GetVariable(\"eps[11]\"))\r\n report(VOUT.GetVariable(\"VF\"))\r\n report(VOUT.GetVariable(\"T\"))\r\n report(rr) \r\n rrval=rr.Eval(Evaluator()) \r\n #plotTProfile(SEC01)\r\n #plotMcCabe2(\"N=\"+str(NST)+\", Î·=\"+str(eps)+', rr='+ '{:1.2f}'.format(rrval), SEC01, 0.5,xLBB.ValueInSI,xLBD.ValueInSI,rrval,\"ETHANOL\" )\r\n #plotHengstebeck(\"Î·={:1.2f}\".format(eps), SEC01, 0.5,xLBB.ValueInSI,xLBD.ValueInSI,rrval,\"ETHANOL\",0,0.5,0,0.6 )\r\n plotHengstebeck(\"(\"+str(i+1)+\") Î·={:1.2f}\".format(eps)+\", rr=\"+ \"{:1.3f}\".format(rrval), SEC01, 0.5,xLBB.ValueInSI,xLBD.ValueInSI,rrval,\"ETHANOL\",0,1,0,1,yEq )\r\n \r\n\r\n\r\nreport(flowsheet)\r\nplotTProfile(SEC01)\r\n\r\n#SEC01.SetIcon(IconTypes.ColumnSection, 520,220)\r\n#COND.SetIcon(IconTypes.Heater, 610,80)\r\n#REFSPLI.SetIcon(IconTypes.Splitter, 750,80)\r\n#REBSPLI.SetIcon(IconTypes.Splitter, 640,600)\r\n#REB.SetIcon(IconTypes.Heater, 760,530)\r\n#FEED.SetIcon(IconTypes.Stream, 190,350)\r\n#TOP.SetIcon(IconTypes.Stream, 1030,20)\r\n#BOT.SetIcon(IconTypes.Stream, 1040,660)\r\n#show(flowsheet)\r\n#plotSection(SEC01)\r\n#printSection(SEC01)\r\n#plotSectionConcLiquid(SEC01)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "DistillationAndAbsorption",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "39"
                          }
                        },
                        {
                          "$id": "44",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "sys= ThermodynamicSystem(\"Test1\",\"Ideal\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Ethanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Isopropanol\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Ethanol]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Isopropanol]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Water]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nSPLIT01 = Flash(\"FLASH01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Vap\", S02)\\\r\n\t\t.Connect(\"Liq\", S03)\\\r\n\t\t.Specify(\"P\",1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.35)\\\r\n\t\t.Initialize()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01,S02,S03)\r\nflowsheet.AddUnit(SPLIT01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Test1",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "39"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "45",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "MBTE",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "46",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\nrun(Items[\"Projects|Scripts|TernaryCharts\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Isobutene\"))\r\nsys.AddComponent(Database.FindComponent(\"Methanol\"))\r\nsys.AddComponent(Database.FindComponent(\"N-butane\"))\r\nDatabase.FillBIPs(sys)\r\nNRTL = sys.GetBinaryParameters(\"NRTL\")\r\nNRTL.SetParam(\"B\",sys.Components[0], sys.Components[1],-43.2404 )\r\nNRTL.SetParam(\"B\",sys.Components[1], sys.Components[0],134.062  )\r\nNRTL.SetParamSymmetric(\"C\",sys.Components[0], sys.Components[1],0.3 )\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nreport(sys)\r\n\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Isobutene]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Methanol]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[N-butane]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\n\r\n#printTitle(\"RCM at Constant Pressure\")\r\n#ResidueCurvesMap(S01, 10)\r\n#report(flowsheet)\r\n#XYChart(S01, sys.Components[0], sys.Components[1],21)\r\n#XYChart(S01, sys.Components[0], sys.Components[2],21)\r\n#XYChart(S01, sys.Components[1], sys.Components[2],21)\r\n\r\nprintTitle(\"RCM at Constant Temperature\")\r\nS01.Specify(\"VF\",0)\\\r\n\t.Specify(\"T\",300, SI.K)\\\r\n\t.Unspecify(\"p\")\t\r\ndecomp(flowsheet)\r\nResidueCurvesMap(S01, 5)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "RCM",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "45"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "47",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "EOS Testing",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "48",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"SRK\", \"default\")\r\nsys.AddComponent(Database.FindComponent(\"Ethane\"))\r\nsys.AddComponent(Database.FindComponent(\"N-heptane\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, SI.K)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",20, METRIC.bar)\\\r\n\t\t.Specify(\"n[Ethane]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[N-heptane]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\n\r\nPhaseEnvelope(S01, 0.001, 65, 60)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "C2C7",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "47"
                          }
                        },
                        {
                          "$id": "49",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "def drawPVTIdeal(chart,T,comp): \r\n\tx = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\t\r\n\tp0=10\r\n\tp1=120\r\n\tsteps=150\r\n\tdp=(p1-p0)/(float(steps))\t\t\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tfor i in range(steps):\r\n\t\tp=p0+i*dp \t\t\t\r\n\t\ty.Add(p)\r\n\t\tv= R*TK/(p*1e5)\t\t\r\n\t\tprint(\"v=\"+str(v)+\", P=\"+str(p))\r\n\t\tx.Add(v)\r\n\tySeries = SeriesModel(\"Ideal (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\treturn\r\n\r\ndef VOLSRK(T,P, A,B):\r\n\tPI=3.1415926\r\n\tR=8.3144621\r\n\tVV=1e-3\r\n\tVL=1e-4\r\n\tPSTR= -(P*pow(B,2.0)+R*T*B-A)/3.0/P - pow(R*T/3.0/P,2.0)\r\n\tQSTR= pow(-R*T/3.0/P,3.0) - R*T*(P*pow(B,2.0)+R*T*B-A)/6.0/pow(P,2.0)-A*B/2.0/P\r\n\tDISKR=pow(QSTR,2.0)+pow(PSTR,3.0)\r\n\trhoc=0.1634/B\r\n\t\r\n\t#print(PSTR)\r\n\t#print(QSTR)\r\n\t#print(DISKR)\r\n\tif(DISKR<0):\t\t\r\n\t\tRSTR=Math.Sign(QSTR)*Math.Sqrt(abs(PSTR))\r\n\t\tCOSPHI=QSTR/pow(RSTR,3.0)\r\n\t\tPHI=Math.Acos(COSPHI)\r\n\t\tX1=-2.0*RSTR*Math.Cos(PHI/3.0)\r\n\t\tX2=2.0*RSTR*Math.Cos((PI-PHI)/3.0)\r\n\t\tX3=2.0*RSTR*Math.Cos((PI+PHI)/3.0)\r\n\t\tVV=Math.Max(X1, Math.Max(X2, X3))+R*T/3.0/P\r\n\t\tVL=Math.Min(X1, Math.Min(X2, X3))+R*T/3.0/P\r\n\tif(DISKR>=0):\r\n\t\tH1=-QSTR+Math.Sqrt(DISKR)\r\n\t\tH2=-QSTR-Math.Sqrt(DISKR)\t\t\r\n\t\tH3=Math.Sign(H1)\r\n\t\tH4=Math.Sign(H2)\r\n\t\tV=H3*pow(abs(H1),1.0/3.0) + H4*pow(abs(H2),1.0/3.0)\r\n\t\t\r\n\t\tVL=V+R*T/3.0/P\r\n\t\tVV=V+R*T/3.0/P\r\n\t\t\r\n\t\t#if (VL > 1.0/rhoc):\r\n\t\t# VL= 1.0/rhoc\r\n\t\t#if (VV < 1.0/rhoc):\r\n\t\t# VV= 1.0/rhoc\r\n\treturn (VL,VV)\r\n\t\r\ndef drawPVTSRK2Rho(chart,T,comp):\r\n\t\r\n\tx = chart.CreateList()\r\n\tx2 = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\tp0=1\r\n\tp1=120\r\n\tsteps=200\r\n\tdp=(p1-p0)/(float(steps))\t\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tTC=comp.GetConstant(ConstantProperties.CriticalTemperature).ValueInSI\r\n\tPC=comp.GetConstant(ConstantProperties.CriticalPressure).ValueInSI\r\n\t\r\n\tac=0.239\r\n\t\r\n\ta= 0.42748*pow(R,2)*pow(TC,2)/PC\r\n\tb= 0.08644*R*TC/PC\r\n\tTR=TK/TC\r\n\t#print (\"TC=\"+str(TC)+\" K\")\r\n\t#print (\"PC=\"+str(PC)+\" Pa\")\r\n\t#print (\"TR=\"+str(TR)+\" K\")\r\n\t#print (\"a=\"+str(a)+\" \")\r\n\t#print (\"b=\"+str(b)+\" \")\r\n\t\r\n\taT=a*pow( 1+(0.48 + 1.574*ac - 0.176*pow(ac,2))*(1-Math.Sqrt(TR)) ,2)\r\n\t\r\n\tfor i in range(steps+1):\r\n\t\tp=p0+i*dp \r\n\t\tpPa=p*1e5\r\n\t\ty.Add(p)\t\t\r\n\t\t(vl,vv)= VOLSRK(TK,pPa,aT,b)\r\n\t\tx.Add(1.0/(vl*1000))\r\n\t\tx2.Add(1.0/(vv*1000))\r\n\tySeries = SeriesModel(\"SRKL (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\ty2Series = SeriesModel(\"SRKV (T=\"+str(TK)+\" K)\", SeriesType.Line, x2, y, \"Auto\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\tchart.Series.Add(y2Series)\t\t\r\n\treturn \r\n\t\r\ndef drawPVTSRK2v(chart,T,comp):\r\n\t\r\n\tx = chart.CreateList()\r\n\tx2 = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\tp0=1\r\n\tp1=120\r\n\tsteps=200\r\n\tdp=(p1-p0)/(float(steps))\t\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tTC=comp.GetConstant(ConstantProperties.CriticalTemperature).ValueInSI\r\n\tPC=comp.GetConstant(ConstantProperties.CriticalPressure).ValueInSI\r\n\t\r\n\tac=0.239\r\n\t\r\n\ta= 0.42748*pow(R,2)*pow(TC,2)/PC\r\n\tb= 0.08644*R*TC/PC\r\n\tTR=TK/TC\r\n\tprint (\"TC=\"+str(TC)+\" K\")\r\n\tprint (\"PC=\"+str(PC)+\" Pa\")\r\n\tprint (\"TR=\"+str(TR)+\" K\")\r\n\tprint (\"a=\"+str(a)+\" \")\r\n\tprint (\"b=\"+str(b)+\" \")\r\n\t\r\n\taT=a*pow( 1+(0.48 + 1.574*ac - 0.176*pow(ac,2))*(1-Math.Sqrt(TR)) ,2)\r\n\t\r\n\tfor i in range(steps+1):\r\n\t\tp=p0+i*dp \r\n\t\tpPa=p*1e5\r\n\t\ty.Add(p)\t\t\r\n\t\t(vl,vv)= VOLSRK(TK,pPa,aT,b)\r\n\t\tx.Add(vl*1000)\r\n\t\tx2.Add(vv*1000)\r\n\tySeries = SeriesModel(\"SRKL (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Red\")\t\r\n\ty2Series = SeriesModel(\"SRKV (T=\"+str(TK)+\" K)\", SeriesType.Line, x2, y, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\tchart.Series.Add(y2Series)\t\t\r\n\treturn \t\r\n\t\r\n\r\ndef drawPVTSRK(chart,T,comp):\r\n\t\r\n\tx = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\tv0=4e-5\r\n\tv1=0.0008\t\r\n\tsteps=100\r\n\tdV=(v1-v0)/float(steps)\r\n\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tTC=comp.GetConstant(ConstantProperties.CriticalTemperature).ValueInSI\r\n\tPC=comp.GetConstant(ConstantProperties.CriticalPressure).ValueInSI\r\n\t\r\n\tac=0.239\r\n\t\r\n\ta= 0.42748*pow(R,2)*pow(TC,2)/PC\r\n\tb= 0.08644*R*TC/PC\r\n\tTR=TK/TC\r\n\tprint (\"TC=\"+str(TC)+\" K\")\r\n\tprint (\"PC=\"+str(PC)+\" Pa\")\r\n\tprint (\"TR=\"+str(TR)+\" K\")\r\n\tprint (\"a=\"+str(a)+\" \")\r\n\tprint (\"b=\"+str(b)+\" \")\r\n\t\r\n\taT=a*pow( 1+(0.48 + 1.574*ac - 0.176*pow(ac,2))*(1-Math.Sqrt(TR)) ,2)\r\n\t\r\n\tfor i in range(steps):\r\n\t\tv=v0+i*dV \t\t\r\n\t\tx.Add(v*1000)\r\n\t\tp= R*TK/(v-b) - aT/(v*(v+b))\r\n\t\t#print(\"v=\"+str(v)+\", P=\"+str(p))\r\n\t\ty.Add(p/1e5)\r\n\tySeries = SeriesModel(\"SRK (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\treturn \r\n\t\r\n\t\r\n\t\r\n\t\r\ndef drawPVTFlash(chart,T,flowsheet,stream):\r\n\t\r\n\ty = chart.CreateList()\r\n\tx = chart.CreateList()\r\n\txL = chart.CreateList()\r\n\txV = chart.CreateList()\r\n\tp0=10\r\n\tp1=70\r\n\tsteps=15\r\n\tdp=(p1-p0)/(float(steps))\t\t\r\n\tTK=T\r\n\tstream.Specify(\"T\",T, SI.K)\r\n\tfor i in range(steps+1):\r\n\t\tp=p0+i*dp \t\t\r\n\t\ty.Add(p)\r\n\t\tstream.Specify(\"p\",p, METRIC.bar)\r\n\t\tdecomp(flowsheet)\r\n\t\treport(stream.GetVariable(\"rhom\"))\r\n\t\treport(stream.GetVariable(\"T\"))\r\n\t\treport(stream.GetVariable(\"p\"))\r\n\t\treport(stream.GetVariable(\"VF\"))\r\n\t\tprint(stream.GetVariable(\"rhoL\").ValueInOutputUnit)\r\n\t\tprint(stream.GetVariable(\"rhoV\").ValueInOutputUnit)\r\n\t\tx.Add(stream.GetVariable(\"rhom\").ValueInOutputUnit)\r\n\t\t#xL.Add(1.0/stream.GetVariable(\"rhoL\").ValueInOutputUnit)\r\n\t\t#xV.Add(1.0/stream.GetVariable(\"rhoV\").ValueInOutputUnit)\r\n\t\t\r\n\tmSeries = SeriesModel(\"FLASH (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\tlSeries = SeriesModel(\"FLASH (T=\"+str(TK)+\" K)\", SeriesType.Line, xL, y, \"Auto\")\t\r\n\tvSeries = SeriesModel(\"FLASH (T=\"+str(TK)+\" K)\", SeriesType.Line, xV, y, \"Auto\")\t\r\n\tchart.Series.Add(mSeries)\t\t\r\n\tchart.Series.Add(lSeries)\t\t\r\n\tchart.Series.Add(vSeries)\t\t\r\n\treturn\t\r\n\r\n\t\r\nrun(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"SRK\", \"default\")\r\nsys.AddComponent(Database.FindComponent(\"Ethane\"))\r\nsys.AddComponent(Database.FindComponent(\"Carbon dioxide\").RenameID(\"CO2\"))\r\nsys.AddComponent(Database.FindComponent(\"N-heptane\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, SI.K)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\n#report(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, SI.kg/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MolarFlow, SI.mol/SI.s)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.VolumeFlow, SI.cum/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, METRIC.C)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\n\r\nT=288.15\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t.Specify(\"p\",10, METRIC.bar)\\\r\n\t.Specify(\"T\",T, SI.K)\\\r\n\t.Specify(\"n[Ethane]\",0, SI.mol/SI.s)\\\r\n\t.Specify(\"n[CO2]\",1, SI.mol/SI.s)\\\r\n\t.Specify(\"n[N-heptane]\",0, SI.mol/SI.s)\\\r\n\t.FlashPT()\t\r\n\t\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01)\r\n\r\ndecomp(flowsheet)\r\n\r\nreport(flowsheet)\r\n\r\nc=1\r\n\r\nchart=ChartModel(\"PVT of \"+sys.Components[c].ID);\r\nchart.XAxisTitle = \"Molar Density [mol/mÂ³]\"\r\nchart.YAxisTitle = \"Pressure [bar]\"\r\nchart.AutoScaleX = True\r\nchart.AutoScaleY = False\r\n\r\nchart.YMax=140\r\nchart.YMin=0\r\n\r\nchart.XMin=0\r\nchart.XMax=2.5\r\n\r\n\r\n#drawPVTSRK(chart, T, sys.Components[c])\t\r\n#drawPVTSRK(chart, 304.19, sys.Components[c])\t\r\n#drawPVTSRK(chart, 293.15, sys.Components[c])\t\t\r\n#drawPVTSRK(chart, 288.15, sys.Components[c])\t\t\t\r\n#drawPVTSRK(chart, T, sys.Components[c])\t\t\r\ndrawPVTSRK2Rho(chart, T, sys.Components[c])\t\t\r\n\r\n#drawPVTIdeal(chart, T, sys.Components[c])\t\r\ndrawPVTFlash(chart, T, flowsheet, S01)\t\t\r\n\r\n#drawPVTSRK(chart, 283.15, sys.Components[c])\t\t\r\n#drawPVTSRK(chart, 273.15, sys.Components[c])\t\t\r\n\r\nshow(chart)\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "New Script",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "47"
                          }
                        },
                        {
                          "$id": "50",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "def drawPVTIdeal(chart,T,comp): \r\n\tx = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\t\r\n\tp0=10\r\n\tp1=120\r\n\tsteps=150\r\n\tdp=(p1-p0)/(float(steps))\t\t\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tfor i in range(steps):\r\n\t\tp=p0+i*dp \t\t\t\r\n\t\ty.Add(p)\r\n\t\tv= R*TK/(p*1e5)\t\t\r\n\t\tprint(\"v=\"+str(v)+\", P=\"+str(p))\r\n\t\tx.Add(v)\r\n\tySeries = SeriesModel(\"Ideal (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\treturn\r\n\r\ndef VOLSRK(T,P, A,B):\r\n\tPI=3.1415926\r\n\tR=8.3144621\r\n\tVV=1e-3\r\n\tVL=1e-4\r\n\tPSTR= -(P*pow(B,2.0)+R*T*B-A)/3.0/P - pow(R*T/3.0/P,2.0)\r\n\tQSTR= pow(-R*T/3.0/P,3.0) - R*T*(P*pow(B,2.0)+R*T*B-A)/6.0/pow(P,2.0)-A*B/2.0/P\r\n\tDISKR=pow(QSTR,2.0)+pow(PSTR,3.0)\r\n\trhoc=0.1634/B\r\n\t\r\n\t#print(PSTR)\r\n\t#print(QSTR)\r\n\t#print(DISKR)\r\n\tif(DISKR<0):\t\t\r\n\t\tRSTR=Math.Sign(QSTR)*Math.Sqrt(abs(PSTR))\r\n\t\tCOSPHI=QSTR/pow(RSTR,3.0)\r\n\t\tPHI=Math.Acos(COSPHI)\r\n\t\tX1=-2.0*RSTR*Math.Cos(PHI/3.0)\r\n\t\tX2=2.0*RSTR*Math.Cos((PI-PHI)/3.0)\r\n\t\tX3=2.0*RSTR*Math.Cos((PI+PHI)/3.0)\r\n\t\tVV=Math.Max(X1, Math.Max(X2, X3))+R*T/3.0/P\r\n\t\tVL=Math.Min(X1, Math.Min(X2, X3))+R*T/3.0/P\r\n\tif(DISKR>=0):\r\n\t\tH1=-QSTR+Math.Sqrt(DISKR)\r\n\t\tH2=-QSTR-Math.Sqrt(DISKR)\t\t\r\n\t\tH3=Math.Sign(H1)\r\n\t\tH4=Math.Sign(H2)\r\n\t\tV=H3*pow(abs(H1),1.0/3.0) + H4*pow(abs(H2),1.0/3.0)\r\n\t\t\r\n\t\tVL=V+R*T/3.0/P\r\n\t\tVV=V+R*T/3.0/P\r\n\t\t\r\n\t\tif (VL > 1.0/rhoc):\r\n\t\t VL= 1.0/rhoc\r\n\t\tif (VV < 1.0/rhoc):\r\n\t\t VV= 1.0/rhoc\r\n\treturn (VL,VV)\r\n\t\r\ndef drawPVTSRK2Rho(chart,T,comp):\r\n\t\r\n\tx = chart.CreateList()\r\n\tx2 = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\tp0=1\r\n\tp1=120\r\n\tsteps=200\r\n\tdp=(p1-p0)/(float(steps))\t\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tTC=comp.GetConstant(ConstantProperties.CriticalTemperature).ValueInSI\r\n\tPC=comp.GetConstant(ConstantProperties.CriticalPressure).ValueInSI\r\n\t\r\n\tac=0.239\r\n\t\r\n\ta= 0.42748*pow(R,2)*pow(TC,2)/PC\r\n\tb= 0.08644*R*TC/PC\r\n\tTR=TK/TC\r\n\t#print (\"TC=\"+str(TC)+\" K\")\r\n\t#print (\"PC=\"+str(PC)+\" Pa\")\r\n\t#print (\"TR=\"+str(TR)+\" K\")\r\n\t#print (\"a=\"+str(a)+\" \")\r\n\t#print (\"b=\"+str(b)+\" \")\r\n\t\r\n\taT=a*pow( 1+(0.48 + 1.574*ac - 0.176*pow(ac,2))*(1-Math.Sqrt(TR)) ,2)\r\n\t\r\n\tfor i in range(steps+1):\r\n\t\tp=p0+i*dp \r\n\t\tpPa=p*1e5\r\n\t\ty.Add(p)\t\t\r\n\t\t(vl,vv)= VOLSRK(TK,pPa,aT,b)\r\n\t\tx.Add(1.0/vl)\r\n\t\tx2.Add(1.0/vv)\r\n\tySeries = SeriesModel(\"SRKL (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\ty2Series = SeriesModel(\"SRKV (T=\"+str(TK)+\" K)\", SeriesType.Line, x2, y, \"Auto\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\tchart.Series.Add(y2Series)\t\t\r\n\treturn \r\n\t\r\ndef drawPVTSRK2v(chart,T,comp):\r\n\t\r\n\tx = chart.CreateList()\r\n\tx2 = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\tp0=1\r\n\tp1=120\r\n\tsteps=200\r\n\tdp=(p1-p0)/(float(steps))\t\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tTC=comp.GetConstant(ConstantProperties.CriticalTemperature).ValueInSI\r\n\tPC=comp.GetConstant(ConstantProperties.CriticalPressure).ValueInSI\r\n\t\r\n\tac=0.239\r\n\t\r\n\ta= 0.42748*pow(R,2)*pow(TC,2)/PC\r\n\tb= 0.08644*R*TC/PC\r\n\tTR=TK/TC\r\n\tprint (\"TC=\"+str(TC)+\" K\")\r\n\tprint (\"PC=\"+str(PC)+\" Pa\")\r\n\tprint (\"TR=\"+str(TR)+\" K\")\r\n\tprint (\"a=\"+str(a)+\" \")\r\n\tprint (\"b=\"+str(b)+\" \")\r\n\t\r\n\taT=a*pow( 1+(0.48 + 1.574*ac - 0.176*pow(ac,2))*(1-Math.Sqrt(TR)) ,2)\r\n\t\r\n\tfor i in range(steps+1):\r\n\t\tp=p0+i*dp \r\n\t\tpPa=p*1e5\r\n\t\ty.Add(p)\t\t\r\n\t\t(vl,vv)= VOLSRK(TK,pPa,aT,b)\r\n\t\tx.Add(1.0/(vl*1000))\r\n\t\tx2.Add(1.0/(vv*1000))\r\n\tySeries = SeriesModel(\"SRKL (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Red\")\t\r\n\ty2Series = SeriesModel(\"SRKV (T=\"+str(TK)+\" K)\", SeriesType.Line, x2, y, \"Red\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\tchart.Series.Add(y2Series)\t\t\r\n\treturn \t\r\n\t\r\n\r\ndef drawPVTSRK(chart,T,comp):\r\n\t\r\n\tx = chart.CreateList()\r\n\ty = chart.CreateList()\r\n\tv0=4e-5\r\n\tv1=0.0008\t\r\n\tsteps=100\r\n\tdV=(v1-v0)/float(steps)\r\n\t\r\n\tR=8.3144621\r\n\tTK=T\r\n\tTC=comp.GetConstant(ConstantProperties.CriticalTemperature).ValueInSI\r\n\tPC=comp.GetConstant(ConstantProperties.CriticalPressure).ValueInSI\r\n\t\r\n\tac=0.239\r\n\t\r\n\ta= 0.42748*pow(R,2)*pow(TC,2)/PC\r\n\tb= 0.08644*R*TC/PC\r\n\tTR=TK/TC\r\n\tprint (\"TC=\"+str(TC)+\" K\")\r\n\tprint (\"PC=\"+str(PC)+\" Pa\")\r\n\tprint (\"TR=\"+str(TR)+\" K\")\r\n\tprint (\"a=\"+str(a)+\" \")\r\n\tprint (\"b=\"+str(b)+\" \")\r\n\t\r\n\taT=a*pow( 1+(0.48 + 1.574*ac - 0.176*pow(ac,2))*(1-Math.Sqrt(TR)) ,2)\r\n\t\r\n\tfor i in range(steps):\r\n\t\tv=v0+i*dV \t\t\r\n\t\tx.Add(v*1000)\r\n\t\tp= R*TK/(v-b) - aT/(v*(v+b))\r\n\t\t#print(\"v=\"+str(v)+\", P=\"+str(p))\r\n\t\ty.Add(p/1e5)\r\n\tySeries = SeriesModel(\"SRK (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\tchart.Series.Add(ySeries)\t\t\r\n\treturn \r\n\t\r\n\t\r\n\t\r\n\t\r\ndef drawPVTFlash(chart,T,flowsheet,stream):\r\n\t\r\n\ty = chart.CreateList()\r\n\tx = chart.CreateList()\r\n\txL = chart.CreateList()\r\n\txV = chart.CreateList()\r\n\tp0=1\r\n\tp1=40\r\n\tsteps=15\r\n\tdp=(p1-p0)/(float(steps))\t\t\r\n\tTK=T\r\n\tstream.Specify(\"T\",T, SI.K)\r\n\tfor i in range(steps+1):\r\n\t\tp=p0+i*dp \t\t\r\n\t\ty.Add(p)\r\n\t\tstream.Specify(\"p\",p, METRIC.bar)\r\n\t\tdecomp(flowsheet)\r\n\t\treport(stream.GetVariable(\"rhom\"))\r\n\t\treport(stream.GetVariable(\"T\"))\r\n\t\treport(stream.GetVariable(\"p\"))\r\n\t\treport(stream.GetVariable(\"VF\"))\r\n\t\t#print(stream.GetVariable(\"rhoL\").ValueInOutputUnit)\r\n\t\t#print(stream.GetVariable(\"rhoV\").ValueInOutputUnit)\r\n\t\tx.Add(stream.GetVariable(\"rhom\").ValueInOutputUnit)\r\n\t\t#xL.Add(1.0/stream.GetVariable(\"rhol\").ValueInOutputUnit)\r\n\t\t#xV.Add(1.0/stream.GetVariable(\"rhov\").ValueInOutputUnit)\r\n\t\t\r\n\tmSeries = SeriesModel(\"FLASH (T=\"+str(TK)+\" K)\", SeriesType.Line, x, y, \"Auto\")\t\r\n\tlSeries = SeriesModel(\"FLASH (T=\"+str(TK)+\" K)\", SeriesType.Line, xL, y, \"Auto\")\t\r\n\tvSeries = SeriesModel(\"FLASH (T=\"+str(TK)+\" K)\", SeriesType.Line, xV, y, \"Auto\")\t\r\n\tchart.Series.Add(mSeries)\t\t\r\n\t#chart.Series.Add(lSeries)\t\t\r\n\t#chart.Series.Add(vSeries)\t\t\r\n\treturn\t\r\n\r\n\t\r\nrun(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"SRK\", \"default\")\r\nsys.AddComponent(Database.FindComponent(\"Ethane\"))\r\nsys.AddComponent(Database.FindComponent(\"Carbon dioxide\").RenameID(\"CO2\"))\r\nsys.AddComponent(Database.FindComponent(\"N-heptane\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, SI.K)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\n#report(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, SI.kg/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MolarFlow, SI.mol/SI.s)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.VolumeFlow, SI.cum/SI.h)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, METRIC.C)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\n\r\nT=400\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t.Specify(\"p\",10, METRIC.bar)\\\r\n\t.Specify(\"T\",T, SI.K)\\\r\n\t.Specify(\"n[Ethane]\",1, SI.mol/SI.s)\\\r\n\t.Specify(\"n[CO2]\",0, SI.mol/SI.s)\\\r\n\t.Specify(\"n[N-heptane]\",1, SI.mol/SI.s)\\\r\n\t.FlashPT()\t\r\n\t\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01)\r\n\r\ndecomp(flowsheet)\r\n\r\nreport(flowsheet)\r\n\r\nc=0\r\n\r\nchart=ChartModel(\"PVT of \"+sys.Components[c].ID);\r\nchart.XAxisTitle = \"Density [mol/mÂ³]\"\r\nchart.YAxisTitle = \"Pressure [bar]\"\r\nchart.AutoScaleX = False\r\nchart.AutoScaleY = False\r\n\r\nchart.YMax=140\r\nchart.YMin=0\r\n\r\nchart.XMin=0\r\nchart.XMax=2.5\r\n\r\n\r\n#drawPVTSRK(chart, T, sys.Components[c])\t\r\n#drawPVTSRK(chart, 304.19, sys.Components[c])\t\r\n#drawPVTSRK(chart, 293.15, sys.Components[c])\t\t\r\n#drawPVTSRK(chart, 288.15, sys.Components[c])\t\t\t\r\n#drawPVTSRK(chart, T, sys.Components[c])\t\t\r\ndrawPVTSRK2v(chart, T, sys.Components[c])\t\t\r\n\r\n#drawPVTIdeal(chart, T, sys.Components[c])\t\r\ndrawPVTFlash(chart, T, flowsheet, S01)\t\t\r\n\r\n#drawPVTSRK(chart, 283.15, sys.Components[c])\t\t\r\n#drawPVTSRK(chart, 273.15, sys.Components[c])\t\t\r\n\r\nshow(chart)\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "P vs Rho",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "47"
                          }
                        },
                        {
                          "$id": "51",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"Test1\",\"SRK\", \"default\")\r\nsys.AddComponent(Database.FindComponent(\"Ethane\"))\r\nsys.AddComponent(Database.FindComponent(\"Propane\"))\r\nsys.AddComponent(Database.FindComponent(\"N-butane\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Temperature, SI.K)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\n\r\nreport(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",20, METRIC.bar)\\\r\n\t\t.Specify(\"n[Ethane]\",0.4, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Propane]\",0.4, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[N-butane]\",0.2, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\n\r\nPhaseEnvelope(S01, 9, 55, 30)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "C2C3C4",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "47"
                          }
                        },
                        {
                          "$id": "52",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\n\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTLRP\", \"default\")\r\n\r\nDatabase.ListComponents(\"Ani\")\r\n#Database.ListComponents(\"Tolu\")\r\n#Database.ListComponents(\"xyle\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Acetone\"))\r\nsys.AddComponent(Database.FindComponent(\"Water\"))\r\nsys.AddComponent(Database.FindComponent(\"Aniline\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\r\nreport(sys)\r\n\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[Acetone]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Water]\",1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[Aniline]\",1, SI.kmol/SI.h)\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\r\nflowsheet.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\n\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 1, METRIC.bar)\r\nTXYChart(S01, sys.Components[1], sys.Components[2],21)\r\n\r\nS01.Unspecify(\"p\")\r\nS01.Specify(\"T\", 100, METRIC.C)\r\nPXYChart(S01, sys.Components[1], sys.Components[2],21)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "New Script",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "47"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "53",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Styrene",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "54",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"StyrolProzess\",\"IDEAL\", \"default\")\r\n#sys= ThermodynamicSystem(\"StyrolProzess\",\"SRK\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Water\").RenameID(\"WATER\"))\r\nsys.AddComponent(Database.FindComponent(\"Styrene\").RenameID(\"STYRENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Ethylbenzene\").RenameID(\"ETHYLBNZ\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\").RenameID(\"TOLUENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Ethylene\").RenameID(\"ETHYLENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Methane\").RenameID(\"METHANE\"))\r\nsys.AddComponent(Database.FindComponent(\"Benzene\").RenameID(\"BENZENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Hydrogen\").RenameID(\"H2\"))\r\nsys.AddComponent(Database.FindComponent(\"Carbon dioxide\").RenameID(\"CO2\"))\r\nsys.AddComponent(Database.FindComponent(\"Carbon monoxide\").RenameID(\"CO\"))\r\nsys.AddComponent(Database.FindComponent(\"Nitrogen\").RenameID(\"N2\"))\r\nsys.AddComponent(Database.FindComponent(\"Oxygen\").RenameID(\"O2\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n#report(sys)\r\nshow(sys)\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"VF\",1)\\\r\n\t\t.Specify(\"p\",4, METRIC.bar)\\\r\n\t\t.Specify(\"n[WATER]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FixMolarFlows()\\\r\n\t\t.FlashPZ()\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01)\r\ndecomp(flowsheet)\r\nreport(flowsheet)\r\n\r\nS01.Specify(\"T\",220, METRIC.C)\\\r\n\t.Unspecify(\"VF\")\r\ndecomp(flowsheet)\t\t\t\r\nreport(flowsheet)\r\n\r\n\r\n\r\n\r\n#HTChart(S01, sys.Components[2], 50,220,20)\r\n\r\n\r\nprintTitle(\"Show existence of azeotrope\")\r\nS01.Unspecify(\"T\")\r\nS01.Specify(\"p\", 0.1, METRIC.bar)\r\nTXYChart(S01, sys.Components[2], sys.Components[1],11)\r\n\r\nS01.Specify(\"p\", 0.5, METRIC.bar)\r\nTXYChart(S01, sys.Components[2], sys.Components[1],11)\r\n\r\nS01.Specify(\"p\", 1.2, METRIC.bar)\r\nTXYChart(S01, sys.Components[3], sys.Components[2],11)\r\n\r\n\r\n\r\n\r\n#S01.Specify(\"p\", 10, METRIC.bar)\r\n#TXYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\n#S01.Specify(\"p\", 1, METRIC.bar)\r\n#printTitle(\"Show binary VLE\")\r\n#XYChart(S01, sys.Components[0], sys.Components[1],21)\r\n\r\n#S01.Specify(\"p\", 1, METRIC.bar)\r\n#XYChart(S01, sys.Components[0], sys.Components[3],21)",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "ThermoTest",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "53"
                          }
                        },
                        {
                          "$id": "55",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nsys= ThermodynamicSystem(\"StyrolProzess\",\"IDEAL\", \"default\")\r\n#sys= ThermodynamicSystem(\"StyrolProzess\",\"SRK\", \"default\")\r\n\r\nsys.AddComponent(Database.FindComponent(\"Water\").RenameID(\"WATER\"))\r\nsys.AddComponent(Database.FindComponent(\"Styrene\").RenameID(\"STYRENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Ethylbenzene\").RenameID(\"ETHYLBNZ\"))\r\nsys.AddComponent(Database.FindComponent(\"Toluene\").RenameID(\"TOLUENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Ethylene\").RenameID(\"ETHYLENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Methane\").RenameID(\"METHANE\"))\r\nsys.AddComponent(Database.FindComponent(\"Benzene\").RenameID(\"BENZENE\"))\r\nsys.AddComponent(Database.FindComponent(\"Hydrogen\").RenameID(\"H2\"))\r\nsys.AddComponent(Database.FindComponent(\"Carbon dioxide\").RenameID(\"CO2\"))\r\nsys.AddComponent(Database.FindComponent(\"Carbon monoxide\").RenameID(\"CO\"))\r\nsys.AddComponent(Database.FindComponent(\"Nitrogen\").RenameID(\"N2\"))\r\nsys.AddComponent(Database.FindComponent(\"Oxygen\").RenameID(\"O2\"))\r\nDatabase.FillBIPs(sys)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.kW)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n#report(sys)\r\nsys.VariableFactory.SetTemperatureLimits(100, 1200)\r\n\r\nSetSolverOptions(50,1e-6,1.0,False)\r\n\r\nprintTitle(\"Ethylbenzene feed\")\r\n\r\nS01 = MaterialStream(\"S01\", sys)\\\r\n\t\t.Specify(\"T\",220,METRIC.C)\\\r\n\t\t.Specify(\"p\",400, SI.kPa)\\\r\n\t\t.Specify(\"n[ETHYLBNZ]\", 0.997*152.6,SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[BENZENE]\", 0.003*152.6,SI.kmol/SI.h)\\\r\n\t\t.FixMolarFlows()\\\r\n\t\t.FlashPZ()\r\n\r\nS02 = MaterialStream(\"S02\", sys)\\\r\n\t\t.Specify(\"T\",148, METRIC.C)\\\r\n\t\t.Specify(\"p\",300, SI.kPa)\\\r\n\t\t.Specify(\"n[ETHYLBNZ]\", 0.9773*74.6, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[STYRENE]\", 0.0127*74.6, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[BENZENE]\", 0.010*74.6, SI.kmol/SI.h)\\\r\n\t\t.FixMolarFlows()\\\r\n\t\t.FlashPT()\r\n\t\t\r\nS03 = MaterialStream(\"S03\", sys)\r\n\r\nMIX01 = Mixer(\"MIX01\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"In\", S02)\\\r\n\t\t.Connect(\"Out\", S03)\\\r\n\t\t.Specify(\"DP\",0,METRIC.bar)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\t\t\r\n\t\t\r\n\r\n\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(S01,S02,S03)\\\r\n\t.AddUnits(MIX01)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"LP Steam Feed and Distribution\")\r\nS04 = MaterialStream(\"S04\", sys)\\\r\n\t\t.Specify(\"T\",200, METRIC.C)\\\r\n\t\t.Specify(\"p\",400, SI.kPa)\\\r\n\t\t.Specify(\"n[WATER]\", 3400, SI.kmol/SI.h)\\\r\n\t\t.FixMolarFlows()\\\r\n\t\t.FlashPT()\r\n\t\t\r\nS05 = MaterialStream(\"S05\", sys)\t\t\r\nS06 = MaterialStream(\"S06\", sys)\r\n\r\nSPL01 = Splitter(\"SPL01\",sys)\\\r\n\t.Connect(\"In\", S04)\\\r\n\t.Connect(\"Out1\", S05)\\\r\n\t.Connect(\"Out2\", S06)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"K\",0.18)\\\r\n\t.Initialize()\t\r\n\r\nflowsheet.AddMaterialStreams(S04,S05,S06)\\\r\n\t.AddUnits(SPL01)\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Steam Superheater E1 and steam injection\")\r\n\r\nS07 = MaterialStream(\"S07\", sys)\r\nS08 = MaterialStream(\"S08\", sys)\r\nS09 = MaterialStream(\"S09\", sys)\r\n\r\nE1 = Heater(\"E1\",sys)\\\r\n\t\t.Connect(\"In\", S06) \\\r\n\t\t.Connect(\"Out\", S07) \\\r\n\t\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t\t.Specify(\"T\",777, METRIC.C)\\\r\n\t\t.Initialize()\r\n\t\t\r\n\t\t\r\nMIX02 = Mixer(\"MIX02\",sys)\\\r\n\t\t.Connect(\"In\", S03)\\\r\n\t\t.Connect(\"In\", S05)\\\r\n\t\t.Connect(\"Out\", S08)\\\r\n\t\t.Specify(\"DP\",0,METRIC.bar)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\t\t\r\n\r\nE2 = Heater(\"E2\",sys)\\\r\n\t\t.Connect(\"In\", S08) \\\r\n\t\t.Connect(\"Out\", S09) \\\r\n\t\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t\t.Specify(\"T\",487, METRIC.C)\\\r\n\t\t.Initialize()\r\n\t\t\r\n\t\t\r\n#SetSolverOptions(50,1e-6,0.1,True)\r\nflowsheet.AddMaterialStreams(S07,S08,S09)\\\r\n\t.AddUnits(E1,MIX02,E2)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Mixing after heat exchanger E2\")\r\nS10 = MaterialStream(\"S10\", sys)\r\nMIX03 = Mixer(\"MIX03\",sys)\\\r\n\t\t.Connect(\"In\", S09)\\\r\n\t\t.Connect(\"In\", S07)\\\r\n\t\t.Connect(\"Out\", S10)\\\r\n\t\t.Specify(\"DP\",0.3,METRIC.bar)\\\r\n\t\t.Initialize()\r\n\t\t\r\nflowsheet.AddMaterialStreams(S10)\\\r\n\t.AddUnits(MIX03)\r\ndecomp(flowsheet)\r\n\t\t\r\n\r\nreport(flowsheet, True)\r\n\r\nMIX01.SetIcon(IconTypes.Mixer, 230,180)\r\nSPL01.SetIcon(IconTypes.Splitter, 390,390)\r\nE1.SetIcon(IconTypes.Heater, 530,460)\r\nMIX02.SetIcon(IconTypes.Mixer, 340,180)\r\nE2.SetIcon(IconTypes.Heater, 600,180)\r\nMIX03.SetIcon(IconTypes.Mixer, 750,180)\r\nS01.SetIcon(IconTypes.Stream, 90,180)\r\nS02.SetIcon(IconTypes.Stream, 90,290)\r\nS04.SetIcon(IconTypes.Stream, 90,390)\r\nS10.SetIcon(IconTypes.Stream, 960,180)\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Styrene",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "53"
                          }
                        }
                      ]
                    },
                    "IsExpanded": false,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  },
                  {
                    "$id": "56",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "FormicAcid",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "57",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "run(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\nrun(Items[\"Projects|Scripts|ColumnBuilder3\"].Data)\r\n\r\nprintTitle('Set up Thermodynamics')\r\n\r\nsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\nsys.AddComponent(Database.FindComponent(\"Water\").RenameID(\"H2O\"))\r\nsys.AddComponent(Database.FindComponent(\"Methanol\").RenameID(\"MeOH\"))\r\nsys.AddComponent(Database.FindComponent(\"Methyl formate\").RenameID(\"MeF\"))\r\nsys.AddComponent(Database.FindComponent(\"Formic acid\").RenameID(\"FA\"))\r\nDatabase.FillBIPs(sys)\r\n\r\nWilsonParams= WILSON(sys)\\\r\n\t.SetParamPair(\"A\", sys.Components[0], sys.Components[3], 1.2245,0.1355 )\\\r\n\t.SetParamPair(\"A\", sys.Components[0], sys.Components[2], 1.1959,-1.2795)\\\r\n\t.SetParamPair(\"A\", sys.Components[0], sys.Components[1], -0.3890,-0.6636)\\\r\n\t.SetParamPair(\"A\", sys.Components[3], sys.Components[2], -3.5252,  16.7511 )\\\r\n\t.SetParamPair(\"A\", sys.Components[3], sys.Components[2], -0.1862,-0.1108)\\\r\n\t.SetParamPair(\"A\", sys.Components[2], sys.Components[1],  -0.1629 ,  0.8773)\\\r\n\t.SetParamPair(\"B\", sys.Components[0], sys.Components[3],   -448.7780,129.4014 )\\\r\n\t.SetParamPair(\"B\", sys.Components[0], sys.Components[2], -763.9540,\t-208.9556 )\\\r\n\t.SetParamPair(\"B\", sys.Components[0], sys.Components[1],  178.9149,\t-69.3276 )\\\r\n\t.SetParamPair(\"B\", sys.Components[3], sys.Components[2],  1727.6606, -7597.0177 )\\\r\n\t.SetParamPair(\"B\", sys.Components[3], sys.Components[1],   0.1075, -0.1201)\\\r\n\t.SetParamPair(\"B\", sys.Components[2], sys.Components[1], -165.4921,-501.1913)\r\n\t\r\nsys.BinaryParameters.Add(WilsonParams)   \r\n\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\nsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n#report(sys)\r\n#show(sys)\r\n#stop()\r\nSetSolverOptions(20,1e-6,0.1,True)\r\nprintTitle('Reaction and Flash')\r\nResetSolverOptions()\r\n\r\n\r\nFEED = MaterialStream(\"FEED\", sys)\\\r\n\t\t.Specify(\"T\",25, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[H2O]\",137.808, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeOH]\", 0, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeF]\", 110.156, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[FA]\", 0, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\r\n\r\nC2TOPB = MaterialStream(\"C2TOPB\", sys)\\\r\n\t\t.Specify(\"T\",46, METRIC.C)\\\r\n\t\t.Specify(\"p\",1.7, METRIC.bar)\\\r\n\t\t.Specify(\"n[H2O]\",0, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeOH]\", 1, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeF]\", 84, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[FA]\", 0, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\nC3TOPB = MaterialStream(\"C3TOPB\", sys)\\\r\n\t\t.Specify(\"T\",141, METRIC.C)\\\r\n\t\t.Specify(\"p\",4, METRIC.bar)\\\r\n\t\t.Specify(\"n[H2O]\",131, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeOH]\", 2, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeF]\", 0, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[FA]\", 1, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\t\t\r\nFVAPOUR = MaterialStream(\"FVAPOUR\", sys)\\\r\n\t\t.Specify(\"T\",60, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[H2O]\",11, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeOH]\", 29, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeF]\", 107, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[FA]\", 4.6, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\t\t\r\nRIN = MaterialStream(\"RIN\", sys)\r\n\r\nMIX01 = Mixer(\"MIX01\",sys)\\\r\n\t\t.Connect(\"In\", FEED)\\\r\n\t\t.Connect(\"In\", FVAPOUR)\\\r\n\t\t.Connect(\"In\", C2TOPB)\\\r\n\t\t.Connect(\"In\", C3TOPB)\\\r\n\t\t.Connect(\"Out\", RIN)\\\r\n\t\t.Specify(\"DP\", 0, METRIC.bar)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\t\r\nROUT = MaterialStream(\"ROUT\", sys)\r\n\t\t\r\nRXN = BlackBoxReactor(\"RXN\",sys, 1)\\\r\n\t\t.Connect(\"In\", RIN)\\\r\n\t\t.Connect(\"Out\", ROUT)\\\r\n\t\t.AddStochiometry(1, \"MeF\", -1.0)\\\r\n\t\t.AddStochiometry(1, \"H2O\", -1.0)\\\r\n\t\t.AddStochiometry(1, \"MeOH\", 1.0)\\\r\n\t\t.AddStochiometry(1, \"FA\", 1.0)\\\r\n\t\t.Specify(\"T\", 110, METRIC.C)\\\r\n\t\t.Specify(\"P\", 10, METRIC.bar)\r\n\t\t\r\nV=Variable(\"V\",50)\r\nTQ=Variable(\"TQ\",477.832)\r\nT=RXN.GetVariable(\"T\")\r\nZ=Sym.Binding(\"Z\",1/T-1/TQ)\r\nR=8.31415 #J/mol/K\r\nkq=0.026 #kg/mol/min\r\nkqs=0.12 #kg^2/mol^2/min\r\nEA=88.2e3 # J/mol\r\nEAs=66.4e3 #J/mol\r\nK=0.17\r\nk=kq*Sym.Exp(-EA*Z/R)\r\n\r\nCMeF=Sym.Binding(\"CMEF\",ROUT.GetVariable(\"n[MeF]\")/ROUT.GetVariable(\"m\"))\r\nCH2O=Sym.Binding(\"CH2O\", ROUT.GetVariable(\"n[H2O]\")/ROUT.GetVariable(\"m\"))\r\nCMeOH=Sym.Binding(\"CMeOH\", ROUT.GetVariable(\"n[MeOH]\")/ROUT.GetVariable(\"m\"))\r\nCFA=Sym.Binding(\"CFA\", ROUT.GetVariable(\"n[FA]\")/ROUT.GetVariable(\"m\"))\r\n\r\nRXN.GetVariable(\"R[1]\").LowerBound=-1e6\r\nRXN.DefineRateEquation(1, 110/3.6 )\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\t\t\r\nflowsheet= Flowsheet(\"Flow\")\\\r\n\t.AddMaterialStreams(FEED,C2TOPB, C3TOPB, FVAPOUR, RIN, ROUT)\\\r\n\t.AddUnits(MIX01, RXN)\r\ndecomp(flowsheet)\r\nRXN.DefineRateEquation(1, V*k*(1+kqs/kq*CFA*Sym.Exp(-EA*(EAs/EA-1)*Z/R) )*(CMeF*CH2O-CFA*CMeOH/K)*60 )\r\n\r\ndecomp(flowsheet)\r\n\r\nFVAPOUR.Unfix()\r\nFLIQUID = MaterialStream(\"FLIQUID\", sys)\r\n\r\nFLASH = Flash(\"FLASH\",sys)\\\r\n\t\t.Connect(\"In\", ROUT)\\\r\n\t\t.Connect(\"Vap\", FVAPOUR)\\\r\n\t\t.Connect(\"Liq\", FLIQUID)\\\r\n\t\t.Specify(\"P\", 1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.23)\\\r\n\t\t.Initialize()\r\n\t\t\t\t\t\t\r\nflowsheet.AddMaterialStreams( FLIQUID)\\\r\n\t\t.AddUnits(FLASH)\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Add C1\")\r\n\r\nC1TOP= MaterialStream(\"C1TOP\",sys)\r\nC1BOT= MaterialStream(\"C1BOT\",sys)\r\n\r\nsubflow = ColumnBuilder3(\"C1\",sys, FLIQUID, C1TOP, C1BOT, 11,6, 0.5,0.70,0.559)\r\nflowsheet.Merge(subflow)\r\ndecomp(flowsheet)\r\n\r\nC1=subflow.GetUnit(\"C1\")\r\nC1CON=subflow.GetUnit(\"C1CON\")\r\nC1SPL=subflow.GetUnit(\"C1SPL\")\r\nC1REB=subflow.GetUnit(\"C1REB\")\r\n\r\nprintTitle(\"Solve Design Specs C1\")\r\nC1REB.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(C1BOT.GetVariable(\"x[MeOH]\").IsEqualTo(0.01))\r\nC1SPL.Unspecify(\"K\")\r\nflowsheet.AddDesignSpecification(C1TOP.GetVariable(\"x[H2O]\").IsEqualTo(0.02))\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Add C2\")\r\nC2TOP= MaterialStream(\"C2TOP\",sys)\r\nC2BOT= MaterialStream(\"C2BOT\",sys)\r\n\r\nsubflow = ColumnBuilder3(\"C2\",sys, C1TOP, C2TOP, C2BOT, 50,25, 1.7,1.7,0.65)\r\nflowsheet.Merge(subflow)\r\n#decomp(flowsheet)\r\n\r\nC2=subflow.GetUnit(\"C2\")\r\nC2CON=subflow.GetUnit(\"C2CON\")\r\nC2SPL=subflow.GetUnit(\"C2SPL\")\r\nC2REB=subflow.GetUnit(\"C2REB\")\r\n\r\n\r\nprintTitle(\"Solve Design Specs C2\")\r\nC2REB.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(C2BOT.GetVariable(\"x[MeF]\").IsEqualTo(0.01))\r\nC2SPL.Unspecify(\"K\")\r\nflowsheet.AddDesignSpecification(C2TOP.GetVariable(\"x[MeOH]\").IsEqualTo(0.02))\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Add Mixer\")\r\nC4BOT = MaterialStream(\"C4BOT\", sys)\\\r\n\t\t.Specify(\"T\",99, METRIC.C)\\\r\n\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t.Specify(\"n[H2O]\",329.22, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeOH]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[MeF]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t.Specify(\"n[FA]\", 533.673, SI.kmol/SI.h)\\\r\n\t\t.FlashPT()\r\n\t\t\r\nMIX2OUT = MaterialStream(\"MIX2OUT\", sys)\t\r\n\t\t\r\nMIX02 = Mixer(\"MIX02\",sys)\\\r\n\t\t.Connect(\"In\", C1BOT)\\\r\n\t\t.Connect(\"In\", C4BOT)\\\r\n\t\t.Connect(\"Out\", MIX2OUT)\\\r\n\t\t.Specify(\"DP\", 0, METRIC.bar)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\r\nflowsheet.AddMaterialStreams(C4BOT,MIX2OUT)\\\r\n\t.AddUnits(MIX02)\r\n#decomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Add C3\")\r\n\r\nC3TOP= MaterialStream(\"C3TOP\",sys)\\\r\n\t\t.Init(\"T\",133, METRIC.C)\\\r\n\t\t.Init(\"p\",4, METRIC.bar)\\\r\n\t\t.Init(\"n[H2O]\",100, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[MeOH]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[MeF]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[FA]\", 4, SI.kmol/SI.h)\r\n\r\nC3BOT= MaterialStream(\"C3BOT\",sys)\\\r\n\t\t.Init(\"T\",143, METRIC.C)\\\r\n\t\t.Init(\"p\",4, METRIC.bar)\\\r\n\t\t.Init(\"n[H2O]\",300, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[MeOH]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[MeF]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t.Init(\"n[FA]\", 600, SI.kmol/SI.h)\r\n\r\nsubflow = ColumnBuilder3(\"C3\",sys, MIX2OUT, C3TOP, C3BOT, 50,25, 4.0, 2.0,0.72)\r\nflowsheet.Merge(subflow)\r\n#decomp(flowsheet)\r\n\r\nC3=subflow.GetUnit(\"C3\")\r\nC3CON=subflow.GetUnit(\"C3CON\")\r\nC3SPL=subflow.GetUnit(\"C3SPL\")\r\nC3REB=subflow.GetUnit(\"C3REB\")\r\n\r\nprintTitle(\"Solve Design Specs C3\")\r\nC3SPL.Unspecify(\"K\")\r\nC3REB.Unspecify(\"VF\")\r\nflowsheet.AddDesignSpecification(C3TOP.GetVariable(\"x[FA]\").IsEqualTo(0.01))\r\nflowsheet.AddDesignSpecification(C3BOT.GetVariable(\"x[H2O]\").IsEqualTo(0.35))\r\ndecomp(flowsheet)\r\n\r\n\r\nprintTitle(\"Add C4\")\r\nC4TOP= MaterialStream(\"C4TOP\",sys)\r\nC4BOT.Unfix()\r\nsubflow = ColumnBuilder3(\"C4\",sys, C3BOT, C4TOP, C4BOT, 26,16,1.0,2.0,0.6)\r\n\r\nsubflow.RemoveMaterialStream(C4BOT)\r\nflowsheet.Merge(subflow)\r\n#decomp(flowsheet)\r\n\r\nC4=subflow.GetUnit(\"C4\")\r\nC4CON=subflow.GetUnit(\"C4CON\")\r\nC4SPL=subflow.GetUnit(\"C4SPL\")\r\nC4REB=subflow.GetUnit(\"C4REB\")\r\n\r\nprintTitle(\"Solve Design Specs C4\")\r\nC4SPL.Unspecify(\"K\")\r\nflowsheet.AddDesignSpecification(C4TOP.GetVariable(\"x[FA]\").IsEqualTo(0.85))\r\ndecomp(flowsheet)\r\n\r\nprintTitle(\"Close All Loops\")\r\n\r\nFLASH.Unspecify(\"VF\")\r\nFLASH.Specify(\"T\",55, METRIC.C)\r\nFEED.Unspecify(\"n[H2O]\")\r\nflowsheet.AddDesignSpecification(RIN.GetVariable(\"n[H2O]\").IsEqualTo(RIN.GetVariable(\"n[MeF]\")))\r\n\r\nC3TOPB.Unfix()\r\nRECY2 = Heater(\"RECY2\",sys)\\\r\n\t.Connect(\"In\", C3TOP)\\\r\n\t.Connect(\"Out\", C3TOPB)\\\r\n\t.Specify(\"DP\",0, METRIC.mbar)\\\r\n\t.Specify(\"Q\",0, SI.kW)\\\r\n\t.Initialize()\\\r\n\t.Solve()\r\n\r\nflowsheet.AddUnits( RECY2)\r\ndecomp(flowsheet)\r\n\r\nC2TOPB.Unfix()\r\nRECY1 = Heater(\"RECY1\",sys)\\\r\n\t.Connect(\"In\", C2TOP)\\\r\n\t.Connect(\"Out\", C2TOPB)\\\r\n\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t.Specify(\"Q\",0, SI.kW)\\\r\n\t.Initialize()\\\r\n\t.Solve()\r\n\t\r\nflowsheet.AddUnits(RECY1)\r\ndecomp(flowsheet)\r\n\r\nMIX01.SetIcon(IconTypes.Mixer, 330,440)\r\nRXN.SetIcon(IconTypes.PFR, 480,540)\r\nFLASH.SetIcon(IconTypes.TwoPhaseFlash, 680,540)\r\nC1.SetIcon(IconTypes.ColumnSection, 930,490)\r\nC1CON.SetIcon(IconTypes.Heater, 1020,390)\r\nC1SPL.SetIcon(IconTypes.Splitter, 1150,390)\r\nC1REB.SetIcon(IconTypes.TwoPhaseFlash, 1020,830)\r\nC2.SetIcon(IconTypes.ColumnSection, 1380,380).SetColors(\"DodgerBlue\",\"White\")\r\nC2CON.SetIcon(IconTypes.Heater, 1470,260)\r\nC2SPL.SetIcon(IconTypes.Splitter, 1600,260)\r\nC2REB.SetIcon(IconTypes.TwoPhaseFlash, 1480,720)\r\nMIX02.SetIcon(IconTypes.Mixer, 1330,890)\r\nC3.SetIcon(IconTypes.ColumnSection, 1660,760).SetColors(\"Green\",\"White\")\r\nC3CON.SetIcon(IconTypes.Heater, 1800,650)\r\nC3SPL.SetIcon(IconTypes.Splitter, 1970,650)\r\nC3REB.SetIcon(IconTypes.TwoPhaseFlash, 1750,1090)\r\nC4.SetIcon(IconTypes.ColumnSection, 1870,1040).SetColors(\"OrangeRed\",\"White\")\r\nC4CON.SetIcon(IconTypes.Heater, 1970,940)\r\nC4SPL.SetIcon(IconTypes.Splitter, 2120,940)\r\nC4REB.SetIcon(IconTypes.TwoPhaseFlash, 1970,1380)\r\nRECY1.SetIcon(IconTypes.Breaker, 1750,180)\r\nRECY2.SetIcon(IconTypes.Breaker, 2100,550)\r\nFEED.SetIcon(IconTypes.Stream, 130,440)\r\nC3TOPB.SetIcon(IconTypes.Stream, 130,310)\r\nC2BOT.SetIcon(IconTypes.Stream, 1590,780)\r\nC3TOP.SetIcon(IconTypes.Stream, 80,310)\r\nC4TOP.SetIcon(IconTypes.Stream, 2290,850)\r\n\r\n\r\n\r\nflowsheet.Name=\"Kemira-Leonard Process\"\r\n\r\ntext1=TextElement(\"Kemira-Leonard Process\",36,\"White\")\\\r\n\t.SetPosition(10, 110)\\\r\n\t.SetSize(1200,80)\\\r\n\t.SetColors(\"White\",\"Blue\")\r\ntable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t.SetPosition(10,810)\\\r\n\t.SetSize(800,600)\r\nsheet1=SpreadsheetElement(\"Results\")\\\r\n\t.SetIcon(IconTypes.Spreadsheet, 830,1010)\\\r\n\t.SetSize(400,400)\\\r\n\t.AddVariable(C1REB.GetVariable(\"Q\"))\\\r\n\t.AddVariable(C1CON.GetVariable(\"Q\"))\\\r\n\t.AddVariable(C2REB.GetVariable(\"Q\"))\\\r\n\t.AddVariable(C2CON.GetVariable(\"Q\"))\\\r\n\t.AddVariable(C3REB.GetVariable(\"Q\"))\\\r\n\t.AddVariable(C3CON.GetVariable(\"Q\"))\\\r\n\t.AddVariable(C4REB.GetVariable(\"Q\"))\\\r\n\t.AddVariable(C4CON.GetVariable(\"Q\"))\\\r\n\t\r\nflowsheet.AddDocumentation(text1,table1,sheet1)\r\nshow(flowsheet)\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "KemiraLeonard",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": false,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "56"
                          }
                        }
                      ]
                    },
                    "IsExpanded": true,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "14"
                    }
                  }
                ]
              },
              "IsExpanded": true,
              "IconName": "Folder",
              "IsRenaming": false,
              "Parent": {
                "$ref": "2"
              }
            },
            {
              "$id": "58",
              "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
              "Id": "00000000-0000-0000-0000-000000000000",
              "Name": "CaseStudies",
              "Children": {
                "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                "$values": [
                  {
                    "$id": "59",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "FormicAcid",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "60",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "# Python Scripting Language Input File\r\nrun(Items[\"Projects|CaseStudies|FormicAcid|Instance\"].Data)\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\nGetInstance(True)\r\n\r\n#GetInstance(37,4,11,41,20,1,8,0.99,0.99)\r\n#GetInstance(37,4,11,41,20,2,11,0.98,0.98)\r\n#GetInstance(32,4,11,35,20,2,11,0.99,0.99)\r\n\r\n#N1A,N1B,N1C,N2A,N2B, P1,P2, xMethanol,xAcetone\r\n\r\nstop()\r\n\r\ndef startEALog(filename):\r\n\twith open(filename+\".csv\", \"w+\") as myfile:    \t\r\n\t\tmyfile.write(\"GEN;FITNESS;CONVERGED;N1A;N1B;N1C;N2B;N2B;P1;P2;COMMAND\\n\")\r\n\t\t\r\ndef writeEALog(filename,msg):\r\n\tprint(msg)\r\n\twith open(filename+\".csv\", \"a+\") as myfile:\r\n\t\tmyfile.write(msg+\"\\n\")\r\n\r\ndef ObjectiveFunction(c,ea):\r\n\t#print(c.ToString())\r\n\tfc=c.ToFloatingPoints()\r\n\t#print(\"N1A=\"+str(fc[0])+\", \"+\"N1B=\"+str(fc[1])+\", \"+\"N1C=\"+str(fc[2])+\", N2B=\"+str(fc[3])+\", \"+\"N2B=\"+str(fc[4])+\", \"+\"P1=\"+str(fc[5])+\", \"+\"P2=\"+str(fc[6]))\r\n\t#print(\"N1=\"+str(fc[0]+fc[1]+fc[2])+\", \"+\"N2=\"+str(fc[3]+fc[4]))\r\n\t#print(\"GetInstance(\"+str(fc[0])+\", \"+str(fc[1])+\", \"+str(fc[2])+\", \"+str(fc[3])+\", \"+str(fc[4])+\", \"+str(fc[5])+\", \"+str(fc[6])+\",0.99,0.99,True)\")\r\n\tflowsheet=GetInstance(fc[0],fc[1],fc[2],fc[3],fc[4],fc[5],fc[6],0.99,0.99,False)\r\n\tCOND1=flowsheet.GetUnit(\"COND1\")\r\n\tREB1=flowsheet.GetUnit(\"REB1\")\r\n\tCOND2=flowsheet.GetUnit(\"COND2\")\r\n\tREB2=flowsheet.GetUnit(\"REB2\")\r\n\tsteamCost=38.600E-2*8000*(abs(REB1.GetVariable(\"Q\").ValueInOutputUnit)+abs(REB2.GetVariable(\"Q\").ValueInOutputUnit))\r\n\tcoolingWaterCost=6.695E-3*8000*(abs(COND1.GetVariable(\"Q\").ValueInOutputUnit)+abs(COND2.GetVariable(\"Q\").ValueInOutputUnit))\r\n\tenergyCost=steamCost+coolingWaterCost\r\n\tinvestCost=545000*pow((0.5*(fc[0]+fc[1]+fc[2])+3)/50,0.55)+ 445000*pow((0.5*(fc[3]+fc[4])+3)/50,0.55)\r\n\tfitness= 200-( energyCost + investCost/10)/1000\r\n\t#print(\"Energy:\"+str(energyCost))\r\n\t#print(\"Invest:\"+str(investCost))\t\t   \r\n\t\t\t   \r\n\t#print \"Fitness=\"+str(fitness)\r\n\twriteEALog(\"mylog2\", str(ea.CurrentGeneration)+\";\"+str(fitness).replace('.',',')+\";\"+ str(_newton.IsConverged)+\";\"+ \";\".join(str(v).replace('.',',') for v in fc)+\";GetInstance(\"+\",\".join(str(v) for v in fc)+\",0.99,0.99,True)\")\r\n\t#print (\"\")\r\n\treturn fitness\r\n\t\r\ndef Callback(ga):\r\n\tprint(str(ga.GenerationsNumber) + \" \" + str(ga.BestChromosome.Fitness))\r\n\treturn\r\n\r\n_decomp.SuppressLogging=True\r\n_newton.SuppressLogging=True\r\nSetSolverOptions(50,1e-6,0.1,False)\r\nstartEALog(\"mylog2\")\r\n\r\nea= GeneticSharpSolver()\\\r\n\t.SetGenerationInfo(10,10)\\\r\n\t.SetMaximumGenerations(3)\\\r\n\t.SetObjectiveFunction(ObjectiveFunction)\\\r\n\t.SetGenerationCallback(Callback)\\\r\n\t.AddIntegerDecision(\"N1A\", 7,30)\\\r\n\t.AddIntegerDecision(\"N1B\", 2,5)\\\r\n\t.AddIntegerDecision(\"N1C\", 7,30)\\\r\n\t.AddIntegerDecision(\"N2A\", 7,30)\\\r\n\t.AddIntegerDecision(\"N2B\", 7,30)\\\r\n\t.AddDoubleDecision(\"P1\", 1,2.5)\\\r\n\t.AddDoubleDecision(\"P2\", 7,12)\\\r\n\t.Run()",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Optimization",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "59"
                          }
                        },
                        {
                          "$id": "61",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "def GetInstance(showResults):\r\n\trun(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\n\trun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\trun(Items[\"Projects|Scripts|ColumnBuilder3\"].Data)\r\n\t\r\n\tprintTitle('Set up Thermodynamics')\r\n\t\r\n\tsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\tsys.AddComponent(Database.FindComponent(\"Water\").RenameID(\"H2O\"))\r\n\tsys.AddComponent(Database.FindComponent(\"Methanol\").RenameID(\"MeOH\"))\r\n\tsys.AddComponent(Database.FindComponent(\"Methyl formate\").RenameID(\"MeF\"))\r\n\tsys.AddComponent(Database.FindComponent(\"Formic acid\").RenameID(\"FA\"))\r\n\tDatabase.FillBIPs(sys)\r\n\t\r\n\tWilsonParams= WILSON(sys)\\\r\n\t\t.SetParamPair(\"A\", sys.Components[0], sys.Components[3], 1.2245,0.1355 )\\\r\n\t\t.SetParamPair(\"A\", sys.Components[0], sys.Components[2], 1.1959,-1.2795)\\\r\n\t\t.SetParamPair(\"A\", sys.Components[0], sys.Components[1], -0.3890,-0.6636)\\\r\n\t\t.SetParamPair(\"A\", sys.Components[3], sys.Components[2], -3.5252,  16.7511 )\\\r\n\t\t.SetParamPair(\"A\", sys.Components[3], sys.Components[2], -0.1862,-0.1108)\\\r\n\t\t.SetParamPair(\"A\", sys.Components[2], sys.Components[1],  -0.1629 ,  0.8773)\\\r\n\t\t.SetParamPair(\"B\", sys.Components[0], sys.Components[3],   -448.7780,129.4014 )\\\r\n\t\t.SetParamPair(\"B\", sys.Components[0], sys.Components[2], -763.9540,\t-208.9556 )\\\r\n\t\t.SetParamPair(\"B\", sys.Components[0], sys.Components[1],  178.9149,\t-69.3276 )\\\r\n\t\t.SetParamPair(\"B\", sys.Components[3], sys.Components[2],  1727.6606, -7597.0177 )\\\r\n\t\t.SetParamPair(\"B\", sys.Components[3], sys.Components[1],   0.1075, -0.1201)\\\r\n\t\t.SetParamPair(\"B\", sys.Components[2], sys.Components[1], -165.4921,-501.1913)\r\n\t\t\r\n\tsys.BinaryParameters.Add(WilsonParams)   \r\n\t\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n\t#report(sys)\r\n\t#show(sys)\r\n\t#stop()\r\n\tSetSolverOptions(20,1e-6,0.1,True)\r\n\tprintTitle('Reaction and Flash')\r\n\tResetSolverOptions()\r\n\t\r\n\tROUT = MaterialStream(\"ROUT\", sys)\\\r\n\t\t\t.Specify(\"T\",110, METRIC.C)\\\r\n\t\t\t.Specify(\"p\",10, METRIC.bar)\\\r\n\t\t\t.Specify(\"n[H2O]\",192.916, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[MeOH]\", 141.050, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[MeF]\", 192.916, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[FA]\", 120.556, SI.kmol/SI.h)\\\r\n\t\t\t.FlashPT()\r\n\t\r\n\tFVAPOUR = MaterialStream(\"FVAPOUR\", sys)\r\n\tFLIQUID = MaterialStream(\"FLIQUID\", sys)\r\n\t\r\n\tFLASH = Flash(\"FLASH\",sys)\\\r\n\t\t\t.Connect(\"In\", ROUT)\\\r\n\t\t\t.Connect(\"Vap\", FVAPOUR)\\\r\n\t\t\t.Connect(\"Liq\", FLIQUID)\\\r\n\t\t\t.Specify(\"P\", 1, METRIC.bar)\\\r\n\t\t\t.Specify(\"T\",63, METRIC.C)\\\r\n\t\t\t.Initialize()\r\n\t\t\t\t\t\t\t\r\n\tflowsheet= Flowsheet(\"Flow\")\\\r\n\t\t.AddMaterialStreams(ROUT,FVAPOUR, FLIQUID)\\\r\n\t\t.AddUnits(FLASH)\r\n\tdecomp(flowsheet)\r\n\t\r\n\t\r\n\tprintTitle(\"Add C1\")\r\n\t\r\n\tC1TOP= MaterialStream(\"C1TOP\",sys)\r\n\tC1BOT= MaterialStream(\"C1BOT\",sys)\r\n\t\r\n\tsubflow = ColumnBuilder3(\"C1\",sys, FLIQUID, C1TOP, C1BOT, 11,6, 0.5,0.70,0.559)\r\n\tflowsheet.Merge(subflow)\r\n\tdecomp(flowsheet)\r\n\t\r\n\tC1=subflow.GetUnit(\"C1\")\r\n\tC1CON=subflow.GetUnit(\"C1CON\")\r\n\tC1SPL=subflow.GetUnit(\"C1SPL\")\r\n\tC1REB=subflow.GetUnit(\"C1REB\")\r\n\t\r\n\tprintTitle(\"Solve Design Specs C1\")\r\n\tC1REB.Unspecify(\"VF\")\r\n\tflowsheet.AddDesignSpecification(C1BOT.GetVariable(\"x[MeOH]\").IsEqualTo(0.01))\r\n\tdecomp(flowsheet)\r\n\t\r\n\t\r\n\tprintTitle(\"Add C2\")\r\n\tC2TOP= MaterialStream(\"C2TOP\",sys)\r\n\tC2BOT= MaterialStream(\"C2BOT\",sys)\r\n\t\r\n\tsubflow = ColumnBuilder3(\"C2\",sys, C1TOP, C2TOP, C2BOT, 40,20, 1.7,1.7,0.65)\r\n\tflowsheet.Merge(subflow)\r\n\tdecomp(flowsheet)\r\n\t\r\n\tC2=subflow.GetUnit(\"C2\")\r\n\tC2CON=subflow.GetUnit(\"C2CON\")\r\n\tC2SPL=subflow.GetUnit(\"C2SPL\")\r\n\tC2REB=subflow.GetUnit(\"C2REB\")\r\n\t\r\n\t\r\n\tprintTitle(\"Solve Design Specs C2\")\r\n\tC2REB.Unspecify(\"VF\")\r\n\tflowsheet.AddDesignSpecification(C2BOT.GetVariable(\"x[MeF]\").IsEqualTo(0.01))\r\n\tdecomp(flowsheet)\r\n\t\r\n\t\r\n\tprintTitle(\"Add Mixer\")\r\n\tC4BOT = MaterialStream(\"C4BOT\", sys)\\\r\n\t\t\t.Specify(\"T\",99, METRIC.C)\\\r\n\t\t\t.Specify(\"p\",1, METRIC.bar)\\\r\n\t\t\t.Specify(\"n[H2O]\",329.22, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[MeOH]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[MeF]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[FA]\", 533.673, SI.kmol/SI.h)\\\r\n\t\t\t.FlashPT()\r\n\t\t\t\r\n\tMIX2OUT = MaterialStream(\"MIX2OUT\", sys)\t\r\n\t\t\t\r\n\tMIX02 = Mixer(\"MIX02\",sys)\\\r\n\t\t\t.Connect(\"In\", C1BOT)\\\r\n\t\t\t.Connect(\"In\", C4BOT)\\\r\n\t\t\t.Connect(\"Out\", MIX2OUT)\\\r\n\t\t\t.Specify(\"DP\", 0, METRIC.bar)\\\r\n\t\t\t.Initialize()\\\r\n\t\t\t.Solve()\r\n\t\r\n\tflowsheet.AddMaterialStreams(C4BOT,MIX2OUT)\\\r\n\t\t.AddUnits(MIX02)\r\n\tdecomp(flowsheet)\r\n\t\r\n\t\r\n\tprintTitle(\"Add C3\")\r\n\t\r\n\tC3TOP= MaterialStream(\"C3TOP\",sys)\\\r\n\t\t\t.Init(\"T\",133, METRIC.C)\\\r\n\t\t\t.Init(\"p\",4, METRIC.bar)\\\r\n\t\t\t.Init(\"n[H2O]\",100, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[MeOH]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[MeF]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[FA]\", 4, SI.kmol/SI.h)\r\n\t\r\n\tC3BOT= MaterialStream(\"C3BOT\",sys)\\\r\n\t\t\t.Init(\"T\",143, METRIC.C)\\\r\n\t\t\t.Init(\"p\",4, METRIC.bar)\\\r\n\t\t\t.Init(\"n[H2O]\",300, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[MeOH]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[MeF]\", 0.001, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[FA]\", 600, SI.kmol/SI.h)\r\n\t\r\n\tsubflow = ColumnBuilder3(\"C3\",sys, MIX2OUT, C3TOP, C3BOT, 40,29, 4.0, 2.0,0.72)\r\n\tflowsheet.Merge(subflow)\r\n\tdecomp(flowsheet)\r\n\t\r\n\tC3=subflow.GetUnit(\"C3\")\r\n\tC3CON=subflow.GetUnit(\"C3CON\")\r\n\tC3SPL=subflow.GetUnit(\"C3SPL\")\r\n\tC3REB=subflow.GetUnit(\"C3REB\")\r\n\t\r\n\tprintTitle(\"Solve Design Specs C3\")\r\n\tC3SPL.Unspecify(\"K\")\r\n\tC3REB.Unspecify(\"VF\")\r\n\tflowsheet.AddDesignSpecification(C3TOP.GetVariable(\"x[FA]\").IsEqualTo(0.01))\r\n\tflowsheet.AddDesignSpecification(C3BOT.GetVariable(\"x[H2O]\").IsEqualTo(0.36))\r\n\tdecomp(flowsheet)\r\n\t\r\n\t\r\n\tprintTitle(\"Add C4\")\r\n\tC4TOP= MaterialStream(\"C4TOP\",sys)\r\n\tC4BOT.Unfix()\r\n\tsubflow = ColumnBuilder3(\"C4\",sys, C3BOT, C4TOP, C4BOT, 26,16,1.0,2.0,0.6)\r\n\t\r\n\tsubflow.RemoveMaterialStream(C4BOT)\r\n\tflowsheet.Merge(subflow)\r\n\tdecomp(flowsheet)\r\n\t\r\n\tC4=subflow.GetUnit(\"C4\")\r\n\tC4CON=subflow.GetUnit(\"C4CON\")\r\n\tC4SPL=subflow.GetUnit(\"C4SPL\")\r\n\tC4REB=subflow.GetUnit(\"C4REB\")\r\n\t\r\n\tprintTitle(\"Solve Design Specs C4\")\r\n\tC4SPL.Unspecify(\"K\")\r\n\tflowsheet.AddDesignSpecification(C4TOP.GetVariable(\"x[FA]\").IsEqualTo(0.8))\r\n\tdecomp(flowsheet)\r\n\t\r\n\tif(showResults):\r\n\t\tFLASH.SetIcon(IconTypes.TwoPhaseFlash, 730,540)\r\n\t\tC1.SetIcon(IconTypes.ColumnSection, 930,490)\r\n\t\tC1CON.SetIcon(IconTypes.Heater, 1020,390)\r\n\t\tC1SPL.SetIcon(IconTypes.Splitter, 1150,390)\r\n\t\tC1REB.SetIcon(IconTypes.TwoPhaseFlash, 1020,830)\r\n\t\tC2.SetIcon(IconTypes.ColumnSection, 1380,380)\r\n\t\tC2CON.SetIcon(IconTypes.Heater, 1470,260)\r\n\t\tC2SPL.SetIcon(IconTypes.Splitter, 1600,260)\r\n\t\tC2REB.SetIcon(IconTypes.TwoPhaseFlash, 1480,720)\r\n\t\tMIX02.SetIcon(IconTypes.Mixer, 1330,890)\r\n\t\tC3.SetIcon(IconTypes.ColumnSection, 1660,760)\r\n\t\tC3CON.SetIcon(IconTypes.Heater, 1800,650)\r\n\t\tC3SPL.SetIcon(IconTypes.Splitter, 1970,650)\r\n\t\tC3REB.SetIcon(IconTypes.TwoPhaseFlash, 1750,1090)\r\n\t\tC4.SetIcon(IconTypes.ColumnSection, 1870,1040)\r\n\t\tC4CON.SetIcon(IconTypes.Heater, 1970,940)\r\n\t\tC4SPL.SetIcon(IconTypes.Splitter, 2120,940)\r\n\t\tC4REB.SetIcon(IconTypes.TwoPhaseFlash, 1970,1380)\r\n\t\tROUT.SetIcon(IconTypes.Stream, 540,540)\r\n\t\tFVAPOUR.SetIcon(IconTypes.Stream, 820,380)\r\n\t\tC2TOP.SetIcon(IconTypes.Stream, 2290,180)\r\n\t\tC2BOT.SetIcon(IconTypes.Stream, 1590,780)\r\n\t\tC3TOP.SetIcon(IconTypes.Stream, 2290,540)\r\n\t\tC4TOP.SetIcon(IconTypes.Stream, 2290,850)\r\n\t\t\r\n\t\tflowsheet.Name=\"Kemira-Leonard Process\"\r\n\t\t\r\n\t\ttext1=TextElement(\"Kemira-Leonard Process\",36,\"White\")\\\r\n\t\t\t.SetPosition(10, 110)\\\r\n\t\t\t.SetSize(1200,80)\\\r\n\t\t\t.SetColors(\"White\",\"Blue\")\r\n\t\ttable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t\t\t.SetPosition(10,810)\\\r\n\t\t\t.SetSize(800,600)\r\n\t\tsheet1=SpreadsheetElement(\"Results\")\\\r\n\t\t\t.SetIcon(IconTypes.Spreadsheet, 830,1010)\\\r\n\t\t\t.SetSize(400,400)\\\r\n\t\t\t.AddVariable(C1REB.GetVariable(\"Q\"))\\\r\n\t\t\t.AddVariable(C1CON.GetVariable(\"Q\"))\\\r\n\t\t\t.AddVariable(C2REB.GetVariable(\"Q\"))\\\r\n\t\t\t.AddVariable(C2CON.GetVariable(\"Q\"))\\\r\n\t\t\t.AddVariable(C3REB.GetVariable(\"Q\"))\\\r\n\t\t\t.AddVariable(C3CON.GetVariable(\"Q\"))\\\r\n\t\t\t.AddVariable(C4REB.GetVariable(\"Q\"))\\\r\n\t\t\t.AddVariable(C4CON.GetVariable(\"Q\"))\t\t\t\r\n\t\tflowsheet.AddDocumentation(text1,table1,sheet1)\r\n\t\tshow(flowsheet)\r\n\treturn flowsheet\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Instance",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "59"
                          }
                        }
                      ]
                    },
                    "IsExpanded": true,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "58"
                    }
                  },
                  {
                    "$id": "62",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "AcetoneMethanol",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": [
                        {
                          "$id": "63",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "def GetInstance(N1A,N1B,N1C,N2A,N2B, P1,P2, xMethanol,xAcetone, showResults):\r\n\trun(Items[\"Projects|Scripts|ThermoUtilityFunctions\"].Data)\t\r\n\trun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\t\r\n\t#printTitle('Set up Thermodynamics')\r\n\t\r\n\tsys= ThermodynamicSystem(\"Test2\",\"NRTL\", \"default\")\r\n\t\r\n\tsys.AddComponent(Database.FindComponent(\"Acetone\"))\r\n\tsys.AddComponent(Database.FindComponent(\"Methanol\"))\r\n\tDatabase.FillBIPs(sys)\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.SpecificMolarEnthalpy, SI.kJ/SI.mol)\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.HeatFlow, SI.MW)\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.Pressure, METRIC.bar)\r\n\tsys.VariableFactory.SetOutputDimension(PhysicalDimension.MassFlow, METRIC.ton/SI.h)\r\n\t#report(sys)\r\n\t\r\n\t#printTitle('Low pressure column')\r\n\tResetSolverOptions()\r\n\t\r\n\tFeed = MaterialStream(\"Feed\", sys)\\\r\n\t\t\t.Specify(\"T\",43, METRIC.C)\\\r\n\t\t\t.Specify(\"p\",P1, METRIC.bar)\\\r\n\t\t\t.Specify(\"n[Acetone]\",270, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[Methanol]\", 270, SI.kmol/SI.h)\\\r\n\t\t\t.FlashPT()\r\n\t\r\n\tRecycle = MaterialStream(\"Recycle\", sys)\\\r\n\t\t\t.Specify(\"T\",54, METRIC.C)\\\r\n\t\t\t.Specify(\"p\",P2, METRIC.bar)\\\r\n\t\t\t.Specify(\"n[Acetone]\",10, SI.kmol/SI.h)\\\r\n\t\t\t.Specify(\"n[Methanol]\", 170, SI.kmol/SI.h)\\\r\n\t\t\t.FlashPZ()\t\t\r\n\t\r\n\tS01 = MaterialStream(\"S01\", sys)\r\n\tS02 = MaterialStream(\"S02\", sys)\r\n\tS03 = MaterialStream(\"S03\", sys)\\\r\n\t\t\t.Init(\"T\", 51, METRIC.C)\\\r\n\t\t\t.Init(\"p\", P1, METRIC.bar)\\\r\n\t\t\t.Init(\"n[Acetone]\",50, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[Methanol]\", 50, SI.kmol/SI.h)\\\r\n\t\t\t\r\n\tS04 = MaterialStream(\"S04\", sys)\r\n\tS05 = MaterialStream(\"S05\", sys)\\\r\n\t\t\t.Init(\"T\", 61, METRIC.C)\\\r\n\t\t\t.Init(\"p\", P1, METRIC.bar)\\\r\n\t\t\t.Init(\"n[Acetone]\",2, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[Methanol]\", 100, SI.kmol/SI.h)\\\r\n\t\r\n\tMethanol = MaterialStream(\"Methanol\", sys)\r\n\t\r\n\tD1 = MaterialStream(\"D1\", sys)\r\n\t\r\n\t\r\n\tC1 = TraySection(\"C1\",sys,N1A+N1B+N1C)\\\r\n\t\t.Connect(\"VIn\", S05)\\\r\n\t\t.Connect(\"LIn\", S03)\\\r\n\t\t.Connect(\"VOut\", S01)\\\r\n\t\t.Connect(\"LOut\", S04)\\\r\n\t\t.ConnectFeed(Feed,N1A)\\\r\n\t\t.ConnectFeed(Recycle,N1A+N1B)\\\r\n\t\t.MakeAdiabatic()\\\r\n\t\t.MakeIsobaric()\\\r\n\t\t.FixStageEfficiency(1.0)\\\r\n\t\t.Initialize()\r\n\t\t\r\n\tREB1 = Flash(\"REB1\",sys)\\\r\n\t\t.Connect(\"In\", S04)\\\r\n\t\t.Connect(\"Vap\", S05)\\\r\n\t\t.Connect(\"Liq\", Methanol)\\\r\n\t\t.Specify(\"P\", P1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.7)\\\r\n\t\t.Initialize()\r\n\t\r\n\tCOND1 = Heater(\"COND1\",sys)\\\r\n\t\t.Connect(\"In\", S01)\\\r\n\t\t.Connect(\"Out\", S02)\\\r\n\t\t.Specify(\"P\",P1, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Initialize()\r\n\t\r\n\tRefluxRatio1=2.36\r\n\tREFSPL1 = Splitter(\"REFSPL1\",sys)\\\r\n\t\t.Connect(\"In\", S02)\\\r\n\t\t.Connect(\"Out1\", S03)\\\r\n\t\t.Connect(\"Out2\", D1)\\\r\n\t\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t\t.Specify(\"K\",RefluxRatio1/(1.0+RefluxRatio1))\\\r\n\t\t.Initialize()\r\n\t\r\n\tflowsheet= Flowsheet(\"Flow\")\\\r\n\t\t\t\t.AddMaterialStreams(Feed, Recycle, S01,S02,S03,D1,S04,S05, Methanol)\\\r\n\t\t\t\t.AddUnits(C1, REB1, COND1, REFSPL1)\r\n\t\r\n\tdecomp(flowsheet)\r\n\t#StopOnError()\r\n\t\t\r\n\t#printTitle(\"Add High pressure column\")\r\n\t\r\n\tS06 = MaterialStream(\"S06\", sys)\r\n\tS07 = MaterialStream(\"S07\", sys)\r\n\tS08 = MaterialStream(\"S08\", sys)\\\r\n\t\t\t.Init(\"T\", 54, METRIC.C)\\\r\n\t\t\t.Init(\"p\", P2, METRIC.bar)\\\r\n\t\t\t.Init(\"n[Acetone]\",50, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[Methanol]\", 50, SI.kmol/SI.h)\\\r\n\t\r\n\tS09 = MaterialStream(\"S09\", sys)\r\n\t\r\n\tS10 = MaterialStream(\"S10\", sys)\\\r\n\t\t\t.Init(\"T\", 140, METRIC.C)\\\r\n\t\t\t.Init(\"p\", P2, METRIC.bar)\\\r\n\t\t\t.Init(\"n[Acetone]\",100, SI.kmol/SI.h)\\\r\n\t\t\t.Init(\"n[Methanol]\", 2, SI.kmol/SI.h)\r\n\t\t\t\r\n\tAcetone = MaterialStream(\"Acetone\", sys)\t\t\r\n\tD2 = MaterialStream(\"D2\", sys)\t\t\r\n\t\r\n\tC2 = TraySection(\"C2\",sys,N2A+N2B)\\\r\n\t\t.Connect(\"VIn\", S10)\\\r\n\t\t.Connect(\"LIn\", S08)\\\r\n\t\t.Connect(\"VOut\", S06)\\\r\n\t\t.Connect(\"LOut\", S09)\\\r\n\t\t.ConnectFeed(D1,N2A)\\\r\n\t\t.MakeAdiabatic()\\\r\n\t\t.MakeIsobaric()\\\r\n\t\t.FixStageEfficiency(1.0)\\\r\n\t\t.Initialize()\r\n\t\t\r\n\tREB2 = Flash(\"REB2\",sys)\\\r\n\t\t.Connect(\"In\", S09)\\\r\n\t\t.Connect(\"Vap\", S10)\\\r\n\t\t.Connect(\"Liq\", Acetone)\\\r\n\t\t.Specify(\"P\",P2, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0.70)\\\r\n\t\t.Initialize()\r\n\t\r\n\tCOND2 = Heater(\"COND2\",sys)\\\r\n\t\t.Connect(\"In\", S06)\\\r\n\t\t.Connect(\"Out\", S07)\\\r\n\t\t.Specify(\"P\",P2, METRIC.bar)\\\r\n\t\t.Specify(\"VF\",0)\\\r\n\t\t.Initialize()\r\n\t\r\n\tRefluxRatio2=3.11\r\n\tREFSPL2 = Splitter(\"REFSPL2\",sys)\\\r\n\t\t.Connect(\"In\", S07)\\\r\n\t\t.Connect(\"Out1\", D2)\\\r\n\t\t.Connect(\"Out2\", S08)\\\r\n\t\t.Specify(\"DP\",0, METRIC.bar)\\\r\n\t\t.Specify(\"K\",1-RefluxRatio2/(1.0+RefluxRatio2))\\\r\n\t\t.Initialize()\r\n\t\r\n\tC2.Solve()\r\n\tREB2.Solve()\r\n\tCOND2.Solve()\r\n\tREFSPL2.Solve()\r\n\r\n\tflowsheet.AddMaterialStreams(S06,S07,S08,D2,S09,S10,Acetone)\\\r\n\t\t\t\t.AddUnits(C2, REB2, COND2, REFSPL2)\r\n\t\r\n\tdecomp(flowsheet)\r\n\t#StopOnError()\t\r\n\t#printTitle(\"Close Recycle\")\r\n\tRecycle.Unfix()\r\n\tVALVE01 = Heater(\"VALVE01\",sys)\\\r\n\t\t.Connect(\"In\", D2)\\\r\n\t\t.Connect(\"Out\", Recycle)\\\r\n\t\t.Specify(\"DP\",P2-P1, METRIC.bar)\\\r\n\t\t.Specify(\"Q\",0, SI.kW)\\\r\n\t\t.Initialize()\\\r\n\t\t.Solve()\r\n\t\t\r\n\tflowsheet.AddUnits(VALVE01)\r\n\t#decomp(flowsheet)\r\n\t\r\n\t\r\n\t#printTitle(\"Reach Specifications\")\r\n\t\r\n\tREB1.Unspecify(\"VF\")\r\n\tREB2.Unspecify(\"VF\")\r\n\tflowsheet.AddDesignSpecification(Methanol.GetVariable(\"x[Methanol]\").IsEqualTo(xMethanol))\r\n\tflowsheet.AddDesignSpecification(Acetone.GetVariable(\"x[Acetone]\").IsEqualTo(xAcetone))\r\n\tDisableLinesearch()\r\n\tsolve(flowsheet)\r\n\tEnableLinesearch()\r\n\r\n\tif(showResults):\r\n\t\tprintTitle(\"Print Results\")\t\r\n\t\tprint(\"C1 - Low Pressure\")\r\n\t\tprint(\"N1A = \" +str(N1A))\r\n\t\tprint(\"N1B = \" +str(N1B))\r\n\t\tprint(\"N1C = \" +str(N1C))\r\n\t\tprint(\"P1  = \" +str(P1))\r\n\t\treport(COND1.GetVariable(\"Q\"))\r\n\t\treport(COND1.GetVariable(\"T\"))\r\n\t\treport(REB1.GetVariable(\"Q\"))\r\n\t\treport(REB1.GetVariable(\"T\"))\r\n\t\tprint(\"\")\r\n\t\tprint(\"C2 - High Pressure\")\r\n\t\tprint(\"N2A = \" +str(N2A))\r\n\t\tprint(\"N2B = \" +str(N2B))\r\n\t\tprint(\"P2  = \" +str(P2))\r\n\t\treport(COND2.GetVariable(\"Q\"))\r\n\t\treport(COND2.GetVariable(\"T\"))\r\n\t\treport(REB2.GetVariable(\"Q\"))\t\r\n\t\treport(REB2.GetVariable(\"T\"))\r\n\t\tprint(\"\")\r\n\t\tprint(\"Products\")\r\n\t\treport(Methanol.GetVariable(\"m\"))\t\r\n\t\treport(Methanol.GetVariable(\"x[Methanol]\"))\t\r\n\t\treport(Acetone.GetVariable(\"m\"))\r\n\t\treport(Acetone.GetVariable(\"x[Acetone]\"))\r\n\t\r\n\t\treport(flowsheet,8)\t\r\n\t\r\n\t\tC1.SetIcon(IconTypes.ColumnSection, 400,260).SetColors(\"Green\",\"White\")\r\n\t\tREB1.SetIcon(IconTypes.TwoPhaseFlash, 510,600)\r\n\t\tCOND1.SetIcon(IconTypes.Heater, 480,120)\r\n\t\tREFSPL1.SetIcon(IconTypes.Splitter, 650,380)\r\n\t\tC2.SetIcon(IconTypes.ColumnSection, 890,250).SetColors(\"OrangeRed\",\"White\")\r\n\t\tREB2.SetIcon(IconTypes.TwoPhaseFlash, 1020,600)\r\n\t\tCOND2.SetIcon(IconTypes.Heater, 990,120)\r\n\t\tREFSPL2.SetIcon(IconTypes.Splitter, 1170,120)\r\n\t\tVALVE01.SetIcon(IconTypes.Breaker, 1270,20)\r\n\t\tFeed.SetIcon(IconTypes.Stream, 110,390)\r\n\t\tMethanol.SetIcon(IconTypes.Stream, 800,650)\r\n\t\tAcetone.SetIcon(IconTypes.Stream, 1230,650)\r\n\t\t\t\t\r\n\t\ttext1=TextElement(\"Pressure-Swing Distillation (Luyben)\",24,\"Blue\")\\\r\n\t\t\t.SetPosition(10, 20)\\\r\n\t\t\t.SetSize(800,80)\\\r\n\t\t\t.SetColors(\"White\",\"GhostWhite\")\r\n\t\ttable1=StreamTableElement(\"Overview\", flowsheet.MaterialStreams.ToArray())\\\r\n\t\t\t.SetPosition(10,730)\\\r\n\t\t\t.SetSize(800,400)\r\n\t\tflowsheet.AddDocumentation(text1,table1)\r\n\t\tshow(flowsheet)\r\n\t\t\r\n\treturn flowsheet\r\n\r\n",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Instance",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "62"
                          }
                        },
                        {
                          "$id": "64",
                          "$type": "OpenFMSL.Contracts.Entities.Script, OpenFMSL.Contracts",
                          "SourceCode": "# Python Scripting Language Input File\r\nrun(Items[\"Projects|CaseStudies|AcetoneMethanol|Instance\"].Data)\r\nrun(Items[\"Projects|Scripts|CommonUtilityFunctions\"].Data)\r\n\r\n#GetInstance(37,4,11,41,20,1,10,0.995,0.994)\r\n\r\n#GetInstance(37,4,11,41,20,1,8,0.99,0.99)\r\n#GetInstance(37,4,11,41,20,2,11,0.98,0.98)\r\n#GetInstance(32,4,11,35,20,2,11,0.99,0.99)\r\n\r\n#N1A,N1B,N1C,N2A,N2B, P1,P2, xMethanol,xAcetone\r\n\r\ndef startEALog(filename):\r\n\twith open(filename+\".csv\", \"w+\") as myfile:    \t\r\n\t\tmyfile.write(\"GEN;FITNESS;CONVERGED;N1A;N1B;N1C;N2B;N2B;P1;P2;COMMAND\\n\")\r\n\t\t\r\ndef writeEALog(filename,msg):\r\n\tprint(msg)\r\n\twith open(filename+\".csv\", \"a+\") as myfile:\r\n\t\tmyfile.write(msg+\"\\n\")\r\n\r\ndef ObjectiveFunction(c,ea):\r\n\t#print(c.ToString())\r\n\tfc=c.ToFloatingPoints()\r\n\t#print(\"N1A=\"+str(fc[0])+\", \"+\"N1B=\"+str(fc[1])+\", \"+\"N1C=\"+str(fc[2])+\", N2B=\"+str(fc[3])+\", \"+\"N2B=\"+str(fc[4])+\", \"+\"P1=\"+str(fc[5])+\", \"+\"P2=\"+str(fc[6]))\r\n\t#print(\"N1=\"+str(fc[0]+fc[1]+fc[2])+\", \"+\"N2=\"+str(fc[3]+fc[4]))\r\n\t#print(\"GetInstance(\"+str(fc[0])+\", \"+str(fc[1])+\", \"+str(fc[2])+\", \"+str(fc[3])+\", \"+str(fc[4])+\", \"+str(fc[5])+\", \"+str(fc[6])+\",0.99,0.99,True)\")\r\n\tflowsheet=GetInstance(fc[0],fc[1],fc[2],fc[3],fc[4],fc[5],fc[6],0.99,0.99,False)\r\n\tCOND1=flowsheet.GetUnit(\"COND1\")\r\n\tREB1=flowsheet.GetUnit(\"REB1\")\r\n\tCOND2=flowsheet.GetUnit(\"COND2\")\r\n\tREB2=flowsheet.GetUnit(\"REB2\")\r\n\tsteamCost=38.600E-2*8000*(abs(REB1.GetVariable(\"Q\").ValueInOutputUnit)+abs(REB2.GetVariable(\"Q\").ValueInOutputUnit))\r\n\tcoolingWaterCost=6.695E-3*8000*(abs(COND1.GetVariable(\"Q\").ValueInOutputUnit)+abs(COND2.GetVariable(\"Q\").ValueInOutputUnit))\r\n\tenergyCost=steamCost+coolingWaterCost\r\n\tinvestCost=545000*pow((0.5*(fc[0]+fc[1]+fc[2])+3)/50,0.55)+ 445000*pow((0.5*(fc[3]+fc[4])+3)/50,0.55)\r\n\tfitness= 200-( energyCost + investCost/10)/1000\r\n\t#print(\"Energy:\"+str(energyCost))\r\n\t#print(\"Invest:\"+str(investCost))\t\t   \r\n\t\t\t   \r\n\t#print \"Fitness=\"+str(fitness)\r\n\twriteEALog(\"mylog2\", str(ea.CurrentGeneration)+\";\"+str(fitness).replace('.',',')+\";\"+ str(_newton.IsConverged)+\";\"+ \";\".join(str(v).replace('.',',') for v in fc)+\";GetInstance(\"+\",\".join(str(v) for v in fc)+\",0.99,0.99,True)\")\r\n\t#print (\"\")\r\n\treturn fitness\r\n\t\r\ndef Callback(ga):\r\n\tprint(str(ga.GenerationsNumber) + \" \" + str(ga.BestChromosome.Fitness))\r\n\treturn\r\n\r\n_decomp.SuppressLogging=True\r\n_newton.SuppressLogging=True\r\nSetSolverOptions(50,1e-6,0.1,False)\r\nstartEALog(\"mylog2\")\r\n\r\nea= GeneticSharpSolver()\\\r\n\t.SetGenerationInfo(10,10)\\\r\n\t.SetMaximumGenerations(3)\\\r\n\t.SetObjectiveFunction(ObjectiveFunction)\\\r\n\t.SetGenerationCallback(Callback)\\\r\n\t.AddIntegerDecision(\"N1A\", 7,30)\\\r\n\t.AddIntegerDecision(\"N1B\", 2,5)\\\r\n\t.AddIntegerDecision(\"N1C\", 7,30)\\\r\n\t.AddIntegerDecision(\"N2A\", 7,30)\\\r\n\t.AddIntegerDecision(\"N2B\", 7,30)\\\r\n\t.AddDoubleDecision(\"P1\", 1,2.5)\\\r\n\t.AddDoubleDecision(\"P2\", 7,12)\\\r\n\t.Run()",
                          "Id": "00000000-0000-0000-0000-000000000000",
                          "Name": "Optimization",
                          "Children": {
                            "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                            "$values": []
                          },
                          "IsExpanded": true,
                          "IconName": "LanguagePythonText",
                          "IsRenaming": false,
                          "Parent": {
                            "$ref": "62"
                          }
                        }
                      ]
                    },
                    "IsExpanded": true,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "58"
                    }
                  },
                  {
                    "$id": "65",
                    "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "Name": "Cumene",
                    "Children": {
                      "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                      "$values": []
                    },
                    "IsExpanded": true,
                    "IconName": "Folder",
                    "IsRenaming": false,
                    "Parent": {
                      "$ref": "58"
                    }
                  }
                ]
              },
              "IsExpanded": true,
              "IconName": "Folder",
              "IsRenaming": false,
              "Parent": {
                "$ref": "2"
              }
            }
          ]
        },
        "IsExpanded": true,
        "IconName": "Folder",
        "IsRenaming": false,
        "Parent": {
          "$ref": "1"
        }
      },
      {
        "$id": "66",
        "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
        "Id": "00000000-0000-0000-0000-000000000000",
        "Name": "Results",
        "Children": {
          "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
          "$values": [
            {
              "$id": "67",
              "$type": "OpenFMSL.Contracts.Entities.Folder, OpenFMSL.Contracts",
              "Id": "00000000-0000-0000-0000-000000000000",
              "Name": "Snapshots",
              "Children": {
                "$type": "System.Collections.Generic.List`1[[OpenFMSL.Contracts.Entities.Entity, OpenFMSL.Contracts]], mscorlib",
                "$values": []
              },
              "IsExpanded": true,
              "IconName": "Folder",
              "IsRenaming": false,
              "Parent": {
                "$ref": "66"
              }
            }
          ]
        },
        "IsExpanded": true,
        "IconName": "Folder",
        "IsRenaming": false,
        "Parent": {
          "$ref": "1"
        }
      }
    ]
  },
  "IsExpanded": true,
  "IconName": "Folder",
  "IsRenaming": false,
  "Parent": null
}